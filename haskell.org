#+TITLE: Haskell
#+PROPERTY: ANKI_DECK CS

* Learn You a Haskell for Great Good!
:LOGBOOK:
CLOCK: [2022-01-19 Wed 14:22]--[2022-01-19 Wed 16:22] =>  2:00
CLOCK: [2022-01-18 Tue 16:48]--[2022-01-18 Tue 17:48] =>  1:00
CLOCK: [2022-01-17 Mon 16:14]--[2022-01-17 Mon 17:14] =>  1:00
CLOCK: [2022-01-16 Sun 19:44]--[2022-01-16 Sun 20:44] =>  1:00
CLOCK: [2022-01-12 Wed 17:25]--[2022-01-12 Wed 18:25] =>  1:00
CLOCK: [2022-01-07 Fri 19:22]--[2022-01-07 Fri 20:22] =>  1:00
CLOCK: [2022-01-11 Tue 17:09]--[2022-01-11 Tue 18:09] =>  1:00
CLOCK: [2022-01-04 Tue 15:24]--[2022-01-04 Tue 17:24] =>  2:00
CLOCK: [2021-12-29 Wed 19:00]--[2021-12-29 Wed 20:00] =>  1:00
CLOCK: [2021-12-29 Wed 14:08]--[2021-12-29 Wed 16:08] =>  2:00
CLOCK: [2021-12-28 Tue 13:17]--[2021-12-28 Tue 15:17] =>  2:00
CLOCK: [2021-12-28 Tue 10:22]--[2021-12-28 Tue 12:22] =>  2:00
CLOCK: [2021-12-21 Tue 15:36]--[2021-12-21 Tue 17:36] =>  2:00
CLOCK: [2021-12-17 Fri 14:49]--[2021-12-17 Fri 16:49] =>  2:00
CLOCK: [2021-12-17 Fri 11:46]--[2021-12-17 Fri 13:46] =>  2:00
CLOCK: [2021-11-01 Mon 11:44]--[2021-11-01 Mon 12:44] =>  1:00
CLOCK: [2021-10-22 Fri 15:53]--[2021-10-22 Fri 17:53] =>  2:00
CLOCK: [2021-10-22 Fri 13:00]--[2021-10-22 Fri 15:00] =>  2:00
CLOCK: [2021-10-20 Wed 17:38]--[2021-10-20 Wed 18:38] =>  1:00
CLOCK: [2021-10-20 Wed 14:36]--[2021-10-20 Wed 16:36] =>  2:00
CLOCK: [2021-10-20 Wed 09:33]--[2021-10-20 Wed 11:33] =>  2:00
CLOCK: [2021-10-18 Mon 16:59]--[2021-10-18 Mon 18:59] =>  2:00
CLOCK: [2021-10-18 Mon 14:06]--[2021-10-18 Mon 16:06] =>  2:00
CLOCK: [2021-10-13 Wed 16:37]--[2021-10-13 Wed 18:37] =>  2:00
CLOCK: [2021-10-13 Wed 14:01]--[2021-10-13 Wed 16:01] =>  2:00
CLOCK: [2021-10-11 Mon 16:53]--[2021-10-11 Mon 18:53] =>  2:00
CLOCK: [2021-10-11 Mon 13:29]--[2021-10-11 Mon 15:29] =>  2:00
CLOCK: [2021-10-06 Wed 13:31]--[2021-10-06 Wed 15:31] =>  2:00
CLOCK: [2021-10-04 Mon 17:02]--[2021-10-04 Mon 18:02] =>  1:00
CLOCK: [2021-10-04 Mon 13:54]--[2021-10-04 Mon 15:54] =>  2:00
CLOCK: [2021-09-02 Thu 17:00]--[2021-09-02 Thu 18:00] =>  1:00
CLOCK: [2021-09-02 Thu 12:15]--[2021-09-02 Thu 14:15] =>  2:00
CLOCK: [2021-08-31 Tue 20:11]--[2021-08-31 Tue 22:11] =>  2:00
CLOCK: [2021-08-31 Tue 14:47]--[2021-08-31 Tue 16:47] =>  2:00
CLOCK: [2021-08-31 Tue 11:05]--[2021-08-31 Tue 13:05] =>  2:00
CLOCK: [2021-08-29 Sun 15:42]--[2021-08-29 Sun 17:42] =>  2:00
CLOCK: [2021-08-29 Sun 10:19]--[2021-08-29 Sun 12:19] =>  2:00
CLOCK: [2021-08-27 Fri 19:05]--[2021-08-27 Fri 21:05] =>  2:00
CLOCK: [2021-08-26 Thu 17:05]--[2021-08-26 Thu 18:05] =>  1:00
CLOCK: [2021-08-26 Thu 14:08]--[2021-08-26 Thu 15:08] =>  1:00
:END:

** Starting Out
*** List Operations
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1629990405082
:END:

**** Text

haskell:

Concatenate two lists: {{c1:: ~LIST1 ++ LIST2~ }}

Prepend an element to a list: {{c1:: ~ELEMENT:LIST~ }}

Get an element from a list by index: {{c1:: ~LIST !! INDEX~ }}

Get the first element of a list: {{c1:: ~head LIST~ }}

Get all but the first element of a list: {{c1:: ~tail LIST~ }}

Get the last element element of a list: {{c1:: ~last LIST~ }}

Get all but the last element of a list: {{c1:: ~init LIST~ }}

Get the length of a list: {{c1:: ~length LIST~ }}

Check that a list is empty: {{c1:: ~null LIST~ }}

Check that a list contains an element: {{c1:: ~ELEMENT `elem` LIST~ }}

*** List Ranges
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1630090569411
:END:

**** Text

haskell: Get a list from a range of an enumerable: {{c1:: ~[FIRST..LAST]~ }}

*** List Comprehension
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1630090569542
:END:

**** Text

haskell: Build a list comprehension:
{{c1:: ~[OUTPUT_FUNCTION | INPUT_SET[, ...][, PREDICATE, ...]~ ]}}

*** List Comprehension Example
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1630090569654
:END:

**** Text

haskell: Using list comprehensions, build a list of odd integers under 10:
{{c1:: ~[x | x <- [1..10], odd x]~ ]}}

*** fst and snd
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1630090569772
:END:

**** Text

haskell:

Extract the first element of a pair tuple: {{c1:: ~fst TUPLE~ }}

Extract the second element of a pair tuple: {{c1:: ~snd TUPLE~ }}

*** zip
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1630090569881
:END:

**** Text

haskell: Create a list of tuples for each pair of elements in two lists: {{c1:: ~zip LIST1 LIST2~ }}

** Types and Typeclasses
*** :t in GHCI
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1630090569994
:END:

**** Text

haskell: ghci: Show the type of an expression: {{c1:: ~:t EXPRESSION~ }}

*** Polymorphic Functions
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1630090570082
:END:

**** Text

cs: {{c1::A function that can be applied to values of different types}} is a {{c2::polymorphic
function}}

*** =>
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1630250859771
:END:

**** Text

haskell: {{c1::=>}} is called a {{c2::Class Constraint}}

** Syntax in Functions
*** Pattern Matching Example
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1630250860043
:END:

**** Text

haskell: Define the factorial function with Pattern Matching:

{{c1::
#+BEGIN_SRC haskell
factorial :​: (Integral a) => a -> a
factorial 0 = 1
factorial n = n * factorial (n - 1)
#+END_SRC
}}

*** Function Guards Example
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1630250860174
:END:

**** Text

haskell: Define the max function with Function Guards:

{{c1::
#+BEGIN_SRC haskell
max' :​: (Ord a) => a -> a -> a
max' a b
  | a > b = a
  | otherwise = b
#+END_SRC
}}

*** Defining Infix Functions
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1634124263624
:END:

**** Text

haskell: Define or call an infix function by {{c1::enclosing the function name in backticks}}

Example:

{{c1::
#+BEGIN_SRC haskell
myCompare :​: (Ord a) => a -> a -> Ordering
a `myCompare` b
    | a > b     = GT
    | a == b    = EQ
    | otherwise = LT
#+END_SRC

#+BEGIN_SRC
ghci> 3 `myCompare` 2
GT
#+END_SRC
}}

*** where Clause in Function
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1630250860290
:END:

**** Text

haskell: Easily bind variables for functions bodies and guards with {{c1::where}}

*** let Bindings
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1630250860393
:END:

**** Text

haskell: Define let bindings: {{c1:: ~let BINDINGS in EXPRESSION~ }}

*** case Expression
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1630250860526
:END:

**** Text

haskell: Define a case expression:

{{c1::
#+BEGIN_SRC haskell
case EXPRESSION of PATTERN -> RESULT
                   PATTERN -> RESULT
                   [...]
#+END_SRC
}}

** Higher order functions
*** Currying
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1630250860661
:END:

**** Text

cs: {{c1::Currying}} is {{c2::the technique of converting a function that takes multiple arguments
into a sequence of functions that each takes a single argument}}

*** Partially Apply Infix Functions
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1630250860959
:END:

**** Text

haskell: {{c1::Partially apply infix functions}} by {{c2::enclosing the function in parentheses}}

Examples:

#+BEGIN_SRC haskell
divideByTen = {{c2::(/10)}}
plus = {{c2::(+)}}
#+END_SRC

*** Fold
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1630440509351
:END:

**** Text

cs: {{c1::A fold}} is {{c2::a function that processes a data-structure to build a return value}}

*** foldl1 and foldr1
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1630440509657
:END:

**** Text

haskell: {{c1::Fold a list with the first or last element as the accumulator}} with {{c2::foldl1
or foldr1}}

*** scanl and scanr
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1630440509782
:END:

**** Text

haskell: {{c1::Fold a list while creating a new list with the accumulators}} with {{c2::scanl or
scanr}}

*** Function Composition
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1630931186682
:END:

**** Text

haskell: {{c1::Compose two or more functions}} with {{c2::.}}

** Making Our Own Types and Typeclasses
*** Defining a Type
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1633972350631
:END:

**** Text

haskell: Define the Bool type: {{c1:: ~data Bool = True | False~ }}

*** Type Value Constructors
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1633972350803
:END:

**** Text

haskell: In ~data Bool = True | False~, ~True~ and ~False~ are called {{c1::Value Constructors}}

*** Defining a Type With Record Syntax
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1633972351110
:END:

**** Text

haskell: Define a Person type with a first and last name and with record syntax:

{{c1::
#+BEGIN_SRC haskell
data Person = Person { firstname :​: String
                     , lastname :​: String
                     } deriving (Show)
#+END_SRC
}}

*** Type Constructors
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1633972351293
:END:

**** Text

haskell: In ~data Maybe a = Nothing | Just a~, ~Maybe~ is called a {{c1::Type Constructor}}

*** Type Alias
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1633972351444
:END:

**** Text

haskell: Alias a type with {{c1:: ~type ALIAS = ORIGINAL_TYPE~ }}

*** Either Type
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1633972351593
:END:

**** Text

haskell: By convention, in the Either type, the errors use the {{c1::Left}} value constructor while
the results use the {{c1::Right}} value constructor

{{c1::Mnemonic: "right" also means "correct"}}

*** Typeclass Example
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1634204470620
:END:

**** Text

haskell: Define the Eq typeclass:

{{c1::
#+BEGIN_SRC haskell
class Eq a where
    (==) :​: a -> a -> Bool
    (/=) :​: a -> a -> Bool
    x == y = not (x /= y)
    x /= y = not (x == y)
#+END_SRC
}}

*** Instance of Typeclass Example
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1634204470750
:END:

**** Text

haskell: Make ~data TrafficLight = Red | Yellow | Green~ an instance of the Eq typeclass:

{{c1::
#+BEGIN_SRC haskell
instance Eq TrafficLight where
    Red == Red = True
    Green == Green = True
    Yellow == Yellow = True
    _ == _ = False
#+END_SRC
}}

*** :i in GHCi
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1634204470884
:END:

**** Text

haskell: ghci: Get typeclasses' functions and instances: {{c1:: ~:i TYPE|TYPECLASS~ }}

*** Functor in CS
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1634566571508
:END:

**** Text

cs: A Functor is a {{c1::type that can have a function applied to its value without changing the
type}}

*** Functor in Haskell
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1634566571679
:END:

**** Text

haskell: A Functor is a type that {{c1::implements the fmap function}}

*** :k in GHCi
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1634204470984
:END:

**** Text

haskell: ghci: Get the kind of a type: {{c1:: ~:k TYPE~ }}

** Input and Output
*** IO Actions in do Blocks
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1644232249057
:END:

**** Text

haskell: Read and print a string:

{{c1::
#+BEGIN_SRC haskell
main = do
  string <- getLine
  putStrLn string
#+END_SRC
}}

*** Result of a do Block
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1644232249126
:END:

**** Text

haskell: The result of a do block is the {{c1::result of the last action in the block}}

*** Bind Monad To A Name
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1644232249176
:END:

**** Text

haskell: Bind a monad to a name: {{c1:: ~NAME <- IO_ACTION~ }}

*** return
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1644232249329
:END:

**** Text

haskell: Inject a value in a monad: {{c1:: ~return VALUE~ }}

*** let Bindings
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1644232249399
:END:

**** Text

haskell: Bind variables in ~do~ contexts:

{{c1::
#+BEGIN_SRC haskell
main = do
  let var1 = value
      var2 = value
#+END_SRC
}}

*** sequence
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1644232249450
:END:

**** Text

haskell: Transform a list of IO actions in a single IO action: {{c1::sequence [ACTION1, ACTION2]}}

*** mapM
:PROPERTIES:
:ANKI_NOTE_TYPE: Cloze
:ANKI_NOTE_ID: 1644232249530
:END:

**** Text

haskell: Map a function over a list and sequence that list: {{c1::mapM FUNCTION LIST}}
