#+TITLE: Notes

* Checklists
** Project

Note: Make a Best Practice card for each item.

- [ ] Unit tests
- [ ] Integration tests
- [ ] Implementation rationales in docs/notes

*** Best Practice: Unit Tests                                       :drill:
SCHEDULED: <2021-01-14 Thu>
:PROPERTIES:
:ID:       be1caa32-3ea3-4977-aedb-ba85600687d7
:DRILL_LAST_INTERVAL: 139.0653
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 1.66
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-08-28 Fri 11:18]
:END:

cs: project best practice: Add unit tests

*** Best Practice: Integration Tests                                :drill:
SCHEDULED: <2021-01-14 Thu>
:PROPERTIES:
:ID:       e300dc21-2921-44dc-a20a-fb520451d8f0
:DRILL_LAST_INTERVAL: 139.0653
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 1.66
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-08-28 Fri 11:19]
:END:

cs: project best practice: Add integration tests

*** Best Practice: Implementation Rationales                        :drill:
SCHEDULED: <2021-01-14 Thu>
:PROPERTIES:
:ID:       12a7ff88-5bef-4b9f-b8a9-a26e6f6ef495
:DRILL_LAST_INTERVAL: 139.0653
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 1.66
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-08-28 Fri 11:18]
:END:

cs: project best practice: Add Implementation Rationales

* CS
** Android
*** Bionic                                                          :drill:
SCHEDULED: <2021-06-17 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       374c99c6-085b-4dcb-befb-832739661d2c
:DRILL_LAST_INTERVAL: 442.4264
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 3.16
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-04-01 Wed 14:25]
:END:

<[Android's libc]> is called <[Bionic]>

*** Installing a Custom ROM + Rooting

Installing a Custom ROM + Rooting in 4.1 steps:

- The device needs to be *OEM Unlocked* from the developer settings:
  - If the device is locked by *Factory Reset Protection* you need to bypass
    it. Bypassing *FRP* is specific to each device/android versions. This is the
    hardest part.
- Flash a new *Recovery Image* with fastboot (or with Odin/Heimdall for Samsung
  devices). [[https://twrp.me/][TWRP]] is the de facto choice of *Recovery Image*. The image is
  specific to each device.
- From the *Recovery Image* flash [[https://lineageos.org/][LineageOS]] with the sideload feature. The image
  is specific to each device.
- In the same manner flash the de facto choice of root solution [[https://github.com/topjohnwu/Magisk][Magisk]].

** Assembly
*** ABI
ABIs (Application Binary Interface) are specifications on:

- Registers, memory, ...
- Calling conventions, which specify how functions should call each others,
  more precisely the way arguments should be passed, how the stack should
  be handled, and how the registers should be saved.
- How user functions should make System Calls.

It can change from architectures (ARM, x86, MIPS...) to operating systems
(Linux/BSD vs Windows) and languages (C, Java, Python...). It is usually the
job of the compilers to respect them (eg. between user space programs and the
kernel, but not necessarily in the same program).

*** x32                                                           :drill:
SCHEDULED: <2020-10-16 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       0d5bedac-d90f-48a8-a94d-4d26d33740a9
:DRILL_LAST_INTERVAL: 149.9928
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.6
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-19 Tue 15:33]
:END:

cs: abi: <[x32]> is an ABI that <[is the same as the x86-64 ABI but uses 32-bit
pointers||... BUT ...]>

*** Frame Pointer

The frame pointer is a pointer to the base of the previous function stack.
It is used to restore the stack pointer when returning from a function call.

In the following example, you can see that the previous stack base pointer (rbp)
is saved on the stack. This variable on the stack can now be called a frame
pointer. It is later poped off the stack before returning from the function.

#+BEGIN_SRC asm
_test:
100000f50:      55              push    rbp
100000f51:      48 89 e5        mov     rbp, rsp
[...]
100000f75:      5d              pop     rbp
100000f76:      c3              ret
#+END_SRC

**** Drill :drill:
SCHEDULED: <2020-12-07 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       8F407CE1-5BC0-4898-8179-5D6D389B6DBB
:DRILL_LAST_INTERVAL: 328.7139
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.818
:DRILL_EASE: 2.34
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-01-13 Mon 08:31]
:END:

asm: The <[frame pointer]> is a pointer that points to <[the bottom of the
previous stack frame]>

**** Drill :drill:
SCHEDULED: <2021-10-13 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       2082790F-CCA2-4A47-BB98-55F2541DF637
:DRILL_LAST_INTERVAL: 620.4718
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.62
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-02-01 Sat 09:31]
:END:

asm: <[Frame pointers]> help debuggers find <[variables of previous functions in
the callstack]>

*** GAS
**** =b= suffix                                                    :drill:
SCHEDULED: <2020-12-26 Sat>
:PROPERTIES:
:SOURCE: https://en.wikibooks.org/wiki/X86_Assembly/GAS_Syntax#Operation_Suffixes
:ID:       dba34b88-c022-4ad9-80d8-f7deb21fdf95
:DRILL_LAST_INTERVAL: 251.1829
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.8
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-04-19 Sun 08:56]
:END:

asm: gas syntax: b suffix = <[byte]> operand = <[8]> bits long operand

**** =w= suffix                                                    :drill:
SCHEDULED: <2020-12-26 Sat>
:PROPERTIES:
:SOURCE: https://en.wikibooks.org/wiki/X86_Assembly/GAS_Syntax#Operation_Suffixes
:ID:       27ee78a2-dcfb-4d1e-be64-67ba6f2cf9d9
:DRILL_LAST_INTERVAL: 251.1829
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.8
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-04-19 Sun 09:07]
:END:

asm: gas syntax: w suffix = <[word]> operand = <[16]> bits long operand

**** =l= suffix                                                    :drill:
SCHEDULED: <2020-12-26 Sat>
:PROPERTIES:
:SOURCE: https://en.wikibooks.org/wiki/X86_Assembly/GAS_Syntax#Operation_Suffixes
:ID:       12a5c251-ac28-437d-b50c-855becc9b19f
:DRILL_LAST_INTERVAL: 251.1829
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.8
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-04-19 Sun 09:07]
:END:

asm: gas syntax: l suffix = <[long]> operand = <[32]> bits long operand

**** =q= suffix                                                    :drill:
SCHEDULED: <2020-12-26 Sat>
:PROPERTIES:
:SOURCE: https://en.wikibooks.org/wiki/X86_Assembly/GAS_Syntax#Operation_Suffixes
:ID:       5f393cec-3a45-4523-9945-f75146e59a4f
:DRILL_LAST_INTERVAL: 251.1829
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.8
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-04-19 Sun 09:07]
:END:

asm: gas syntax: q suffix = <[quad]> operand = <[64]> bits long operand

*** NOP

=NOP= is an instruction that does nothing by design. Historically (before
x86-64) it was equivalent to =XCHG EAX,EAX=. Now it just does nothing.
(https://stackoverflow.com/a/25053039)

It is typically used to align the start of functions because jumps are
apparently faster if the instruction is aligned on a 4/8/16 bytes boundary.
(https://stackoverflow.com/a/7788330)

**** Drill :drill:
SCHEDULED: <2022-04-03 Sun>
:PROPERTIES:
:SOURCE: https://stackoverflow.com/a/7788330
:DRILL_CARD_TYPE: show1cloze
:ID:       0E02F453-5E92-4F7C-8DB2-403FAE787CF3
:DRILL_LAST_INTERVAL: 749.0639
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.667
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-03-15 Sun 15:35]
:END:

x86: <[NOP]> instructions may be used to align <[functions start adress]>

**** Drill :drill:
SCHEDULED: <2022-09-25 Sun>
:PROPERTIES:
:SOURCE: https://stackoverflow.com/a/7788330
:DRILL_CARD_TYPE: show1cloze
:ID:       756E4139-727B-4CB8-9E1C-C847B586DB6B
:DRILL_LAST_INTERVAL: 742.1675
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.714
:DRILL_EASE: 2.18
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-09-13 Sun 10:28]
:END:

x86: <[Functions with addresses aligned on multiples of 4]> can be <[faster to
jump to]>

*** Two's Complement
**** Example: -4                                                   :drill:
SCHEDULED: <2022-01-23 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       7C305ACF-FD26-432A-B6C4-0B6B91AF6210
:DRILL_LAST_INTERVAL: 622.422
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-11 Mon 12:19]
:END:

The Two's Complement representation of <[-4]> (base 10) is <[100]> (binary) (3 bits)

**** Example: -3                                                   :drill:
SCHEDULED: <2021-06-01 Tue>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       382C05A6-D6B9-45E2-AF87-0EF661DA14AA
:DRILL_LAST_INTERVAL: 278.6548
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 20
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.98
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-08-26 Wed 11:57]
:END:

The Two's Complement representation of <[-3]> (base 10) is <[101]> (binary) (3 bits)

**** Example: -1                                                   :drill:
SCHEDULED: <2022-04-03 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       17220375-EC9D-4247-BC54-982C5AC3A810
:DRILL_LAST_INTERVAL: 666.4056
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.143
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-06-06 Sat 12:55]
:END:

The Two's Complement representation of <[-1]> (base 10) is <[111]> (binary) (3 bits)

**** First Bit                                                     :drill:
SCHEDULED: <2022-03-26 Sat>
:PROPERTIES:
:ID:       267F9497-BA8B-4002-9829-5A11CDAEB702
:DRILL_LAST_INTERVAL: 667.3536
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.667
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-05-28 Thu 06:43]
:END:

In a Two's Complement representation, <[the most significant bit]> determines
the sign

**** Formula                                                       :drill:
SCHEDULED: <2022-03-22 Tue>
:PROPERTIES:
:ID:       5D43A812-20A4-4495-87C4-7AFDF4E529A6
:DRILL_LAST_INTERVAL: 668.3135
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.667
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-05-23 Sat 11:30]
:END:

In order to compute the Two's Complement of a number you:
<[- Invert all the bits]>
<[- Add one]>

**** Minimum Number                                                :drill:
SCHEDULED: <2021-03-14 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       2E8296D1-BEA2-4C7B-8BEC-95506FD21EE0
:DRILL_LAST_INTERVAL: 383.0813
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.833
:DRILL_EASE: 2.32
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-02-25 Tue 09:02]
:END:

Why does computing the Two's Complement of the minimum number in the range
result in the same number?

***** Answer

Because the positive of the same number can't be represented in Two's Complement
(Overflow)

**** Negative                                                      :drill:
SCHEDULED: <2022-03-06 Sun>
:PROPERTIES:
:ID:       B00736C9-EBE8-478B-8AE1-3D597BA4688D
:DRILL_LAST_INTERVAL: 647.0187
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-05-28 Thu 06:43]
:END:

Computing the Two's Complement of a number results <[in its negative]>

*** x86
**** Stack Limits

Although "allocating" space on the stack doesn't require a syscall, its size is
still limited by the Kernel.

When a user space program tries to access memory that isn't yet allocated to it,
a page fault occurs and the kernel can then check if the memory size exceeds the
stack limit. (https://unix.stackexchange.com/a/239323)

** Browsers
*** Console
**** Drill :drill:
SCHEDULED: <2021-02-07 Sun>
:PROPERTIES:
:SOURCE: https://developer.mozilla.org/en-US/docs/Tools/Web_Console/Helpers
:ID:       f6cae94b-ef2f-4c60-b1e0-d03da382e9c1
:DRILL_LAST_INTERVAL: 187.4031
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.62
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-08-04 Tue 08:07]
:END:

browser: console: Get <[the first node under element that matches selector]> ==
cmd <[$(selector, element)]>

***** Bug

FIXME This should be a double-sided card, but org-drill doesn't like the
=$$=. Also the =$$= need to be after the cloze :/

**** Drill :drill:
SCHEDULED: <2021-08-30 Mon>
:PROPERTIES:
:SOURCE: https://developer.mozilla.org/en-US/docs/Tools/Web_Console/Helpers
:ID:       f7b34c5c-699d-421e-9788-f0be98e9f62d
:DRILL_LAST_INTERVAL: 544.1555
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.38
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-03-04 Wed 08:45]
:END:

browser: console: Get <[all the nodes under element that match selector]>
== cmd <[$$(selector, element)]>

***** Bug

FIXME This should be a double-sided card, but org-drill doesn't like the
=$$=. Also the =$$= need to be after the cloze :/

**** Drill :drill:
SCHEDULED: <2021-11-04 Thu>
:PROPERTIES:
:SOURCE: https://developer.mozilla.org/en-US/docs/Tools/Web_Console/Helpers
:ID:       6110fba4-3f3f-4486-ba12-546ceb313b10
:DRILL_LAST_INTERVAL: 599.0641
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-03-15 Sun 15:37]
:END:

browser: console: js function <[document.querySelector()]> == cmd
<[$(selector, element)]>

**** Drill :drill:
SCHEDULED: <2021-02-09 Tue>
:PROPERTIES:
:SOURCE: https://developer.mozilla.org/en-US/docs/Tools/Web_Console/Helpers
:ID:       d4b17ae9-c862-419f-95f5-8beb1e91c2a7
:DRILL_LAST_INTERVAL: 183.4342
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 18
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 1.96
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-08-10 Mon 12:16]
:END:

browser: console: js function <[document.querySelectorAll()]> == cmd
<[$$(selector, element)]>

***** Bug

FIXME This should be a double-sided card, but org-drill doesn't like the
=$$=. Also the =$$= needs to be after the cloze :/

*** Keyboard Shortcuts

Firefox and Chrome share a healthy number of shortcut keys (Replace with Cmd on
macOS).

Here are the most useful ones (IMHO):

|----------------------------+----------------+----------------|
| Description                | Linux/Windows  | macOS          |
|----------------------------+----------------+----------------|
| Open a New Tab             | Ctrl+T         | Cmd+T          |
| Close the current Tab      | Ctrl+W         | Cmd+W          |
| Open Previously closed Tab | Ctrl+Shift+T   | Cmd+Shift+T    |
| Switch to the Next Tab     | Ctrl+Tab       | Ctrl+Tab       |
| Switch to the previous Tab | Ctrl+Shift+Tab | Ctrl+Shift+Tab |
| Scroll One Page Down       | Space          | Space          |
| Scroll One Page Up         | Shift+Space    | Shift+Space    |
| Reload Page                | Ctrl+R         | Cmd+R          |
| Reload Page & Cache        | Ctrl+Shift+R   | Cmd+Shift+R    |
| Open Inspector             | Ctrl+Shift+I   | Cmd+Option+I   |
| Edit the URL               | Ctrl+L         | Cmd+L          |
| Exit from the URL Bar      | Tab            | Tab            |
|----------------------------+----------------+----------------|

There's also support for the common readline shortcuts in the URL field such as
~Alt+Backspace~, ~Ctrl+A~, ~Ctrl+E~, ~Ctrl+F~, ~Ctrl+B~.
This is by default on macOS but needs a bit of a config on Linux:

#+BEGIN_SRC sh
$ cat ~/.gtkrc-2.0.mine
gtk-key-theme-name = "Emacs"
$ cat ~/.config/gtk-3.0/settings.ini
[Settings]
[...]
gtk-key-theme-name=Emacs
#+END_SRC

That's about it for what's common and useful.
Please note macOS horrible inconsistency!

**** =<C-S-I>=                                                     :drill:
SCHEDULED: <2021-04-05 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       1BFF6519-3736-40FA-A2E5-3436059AD90C
:DRILL_LAST_INTERVAL: 507.7732
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.875
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2019-11-14 Thu 13:49]
:END:

browser: In Firefox and Chrome <[open the inspector]> with <[=<C-S-I>=]>

**** =<C-l>=                                                       :drill:
SCHEDULED: <2022-06-02 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       F2335586-AF25-4889-B5D4-71DA2E537347
:DRILL_LAST_INTERVAL: 824.8199
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 3.1
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-02-28 Fri 09:18]
:END:

browser: In Firefox and Chrome <[edit the URL]> with <[=<C-l>=]>

** C
*** =#include_next=

=#include_next= can be used to override other headers. If you would want to add
some definitions to =stdlib.h= for example, you could write your own =stdlib.h=,
add your definitions in it, and also add =#include_next <stdlib.h>= at the top
of if.

For example it is used in the =string.h= header of libbsd as follows:

#+BEGIN_SRC c
#ifdef LIBBSD_OVERLAY
#include_next <string.h>
#else
#include <string.h>
#endif
#+END_SRC

**** Drill :drill:
SCHEDULED: <2021-05-09 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       12DD5551-8167-429D-8DD7-20A773266C4E
:DRILL_LAST_INTERVAL: 321.8413
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 12
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.75
:DRILL_EASE: 2.24
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-06-21 Sun 13:55]
:END:

c: <[~#include_next~]> can be used to include <[customized headers]>, eg.
stdlib.h

*** Architectures

https://stackoverflow.com/questions/6971886/exotic-architectures-the-standards-committees-care-about
https://stackoverflow.com/questions/2098149/what-platforms-have-something-other-than-8-bit-char

*** Arrays of constant known size

You can tell the compiler that an array should always have a specific size by
including the ~static~ keyword in the function declaration.

Example:

#+BEGIN_SRC c
void test(int array[static 10])
{
	array[0] = 0;
}

int main()
{
	int array[3];
	test(array);
}
#+END_SRC

#+BEGIN_SRC
gcc -Wall -Werror -Wextra array-static.c
array-static.c:9:2: error: array argument is too small; contains 3 elements, callee requires at least 10 [-Werror,-Warray-bounds]
        test(array);
        ^    ~~~~~
array-static.c:1:15: note: callee declares array parameter as static here
void test(int array[static 10])
              ^    ~~~~~~~~~~~
1 error generated.
#+END_SRC

**** Drill :drill:
SCHEDULED: <2020-10-27 Tue>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       B915C12C-9EAD-4EFB-A31E-CE3661E67194
:DRILL_LAST_INTERVAL: 405.2847
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2019-09-18 Wed 11:01]
:END:

c: You can tell the compiler that a function argument array <[should have at
least a specific size]>, by including the keyword <[~static~]> in its
declaration

***** Example

void test(int array[static 10])

**** Drill :drill:
SCHEDULED: <2021-01-07 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       F0F0C64F-EDAE-4D8C-B7D3-A3D462F70C06
:DRILL_LAST_INTERVAL: 316.9476
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 15
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.666
:DRILL_EASE: 2.2
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-02-25 Tue 09:01]
:END:

c: The following function declaration <[~void test(int array[static X])~]>
tells the compiler that the <[array must be at least X elements long]>

*** Bit Fields
**** Syntax                                                        :drill:
SCHEDULED: <2020-12-31 Thu>
:PROPERTIES:
:ID:       80da1364-4290-40f7-90e0-05e950cb1203
:DRILL_LAST_INTERVAL: 342.1075
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-01-24 Fri 10:26]
:END:

c: The syntax of a bitfield is as follows: <[TYPE NAME : WIDTH]>

**** Type                                                          :drill:
SCHEDULED: <2022-09-01 Thu>
:PROPERTIES:
:ID:       F40D5B1B-CB07-4CBE-9767-33DE2B549F58
:DRILL_LAST_INTERVAL: 788.9073
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.833
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-07-04 Sat 09:20]
:END:

c: A bitfield must have <[an integer]> type

**** Use                                                           :drill:
SCHEDULED: <2021-05-08 Sat>
:PROPERTIES:
:ID:       62C61FBC-923D-4422-B12C-93B4FFA16093
:DRILL_LAST_INTERVAL: 364.5012
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.429
:DRILL_EASE: 1.94
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-08 Fri 11:54]
:END:

c: Use bitfields:

- When <[you want to pack a structure more efficiently]>
OR
- When <[you want help manipulating specific bits]>

**** Where                                                         :drill:
SCHEDULED: <2022-06-02 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       76DA0FBE-DB59-4736-8D5C-113ED7111D0C
:DRILL_LAST_INTERVAL: 708.1928
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-06-24 Wed 09:20]
:END:

c: Where can *bitfields* be declared?

***** Answer

In structures or unions

*** Constants
**** Integers
***** Type of Integer Constant
:PROPERTIES:
:SOURCE: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf 6.4.4.1
:END:

****** L Suffix                                                  :drill:
SCHEDULED: <2020-11-12 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       551ff6b3-e1ce-444f-9536-4667ec4dd184
:DRILL_LAST_INTERVAL: 210.8316
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.6
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-04-15 Wed 08:45]
:END:

c: Suffix an *Integer Constant* with <[L]> to make its type be <[long]>

****** LL Suffix                                                 :drill:
SCHEDULED: <2020-11-12 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       b06af9bf-2626-44dd-b457-3ec0df0e19c2
:DRILL_LAST_INTERVAL: 210.8316
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.6
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-04-15 Wed 08:47]
:END:

c: Suffix an *Integer Constant* with <[LL]> to make its type be <[long long]>

****** U Suffix                                                  :drill:
SCHEDULED: <2021-01-15 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       5f11ddd0-85f3-4410-830b-5bdf2b70f570
:DRILL_LAST_INTERVAL: 259.0976
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-05-01 Fri 14:57]
:END:

c: Suffix an *Integer Constant* with <[U]> to make its type be <[unsigned]>

*** Conversions

- https://stackoverflow.com/a/50632

*** Compiler
**** Flags
***** -Wpedantic                                                  :drill:
SCHEDULED: <2020-12-22 Tue>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       00703CF1-042F-4501-90F9-C09D82B310AB
:DRILL_LAST_INTERVAL: 403.7165
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.38
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2019-11-14 Thu 13:49]
:END:

c: The compiler flag <[-Wpedantic]> will warn about the usage of <[non-standard
c features]>

**** Function Attributes
***** Drill                                                       :drill:
SCHEDULED: <2022-08-15 Mon>
:PROPERTIES:
:ID:       5c5e3dff-5d5b-4d18-adae-fa8d386ef954
:DRILL_LAST_INTERVAL: 794.5575
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.833
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-06-11 Thu 08:44]
:END:

c: *Function Attributes* help the compiler make certain <[checks and
optimizations||X and X]>

***** Syntax                                                      :drill:
SCHEDULED: <2022-08-15 Mon>
:PROPERTIES:
:ID:       7c4b2c34-f7d3-4feb-b599-c9e8cf8438b1
:DRILL_LAST_INTERVAL: 794.5575
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.833
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-06-11 Thu 08:44]
:END:

c: The syntax of Function Attributes is <[__attribute__((ATTRIBUTE))]>

***** Constructor/Deconstructor                                   :drill:
SCHEDULED: <2021-07-30 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       53e726b5-9f87-4ef3-b282-3a17f9efb869
:DRILL_LAST_INTERVAL: 499.4091
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.42
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-03-18 Wed 13:04]
:END:

c: The <[constructor and deconstructor]> function attributes <[make the
functions be called respectively before and after main()||What they do]>

***** =format=                                                    :drill:
SCHEDULED: <2021-02-13 Sat>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       ef5017f0-1ef9-4b65-a013-0bebac8e565f
:DRILL_LAST_INTERVAL: 153.7995
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 20
:DRILL_FAILURE_COUNT: 4
:DRILL_AVERAGE_QUALITY: 3.6
:DRILL_EASE: 2.34
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-09-12 Sat 13:40]
:END:

c: The <[format]> function attribute specifies that <[the arguments to the
function should be type checked like printf]>

# ***** =const= and =pure=                                          :drill:
# SCHEDULED: <2020-08-07 Fri>
# :PROPERTIES:
# :SOURCE: https://stackoverflow.com/questions/29117836/attribute-const-vs-attribute-pure-in-gnu-c
# :ID:       cccb2b03-bc02-48bf-8107-4ed1583c8f3d
# :DRILL_LAST_INTERVAL: 22.3597
# :DRILL_REPEATS_SINCE_FAIL: 13
# :DRILL_TOTAL_REPEATS: 23
# :DRILL_FAILURE_COUNT: 2
# :DRILL_AVERAGE_QUALITY: 3.391
# :DRILL_EASE: 1.3
# :DRILL_LAST_QUALITY: 4
# :DRILL_LAST_REVIEWED: [2020-07-16 Thu 11:51]
# :END:

# c: function attribute: const:
# <[- The function result only depends on its arguments
#   - The function has no side effects
#   - Pointers cannot be dereferenced]>

# c: function attribute: pure:
# <[- The function result depends on its arguments and the global state
#   - The function has no side effects
#   - Pointers can be dereferenced]>

*** Data Types
**** Floating Points
***** Sizes
****** float                                                     :drill:
SCHEDULED: <2022-02-14 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       a25fe16b-3f7b-4496-b50e-e1c4ba477477
:DRILL_LAST_INTERVAL: 507.771
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-09-24 Thu 13:33]
:END:

c: <[float||float OR double OR long double]> usually represents the
<[IEEE 754 binary32]> type

****** double                                                    :drill:
SCHEDULED: <2020-10-16 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       52e84460-d67c-40cc-9d24-731afb7aac28
:DRILL_LAST_INTERVAL: 21.9752
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 9
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.28
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-09-24 Thu 13:30]
:END:

c: <[double||float OR double OR long double]> usually represents the
<[IEEE 754 binary64]> type

****** long double on x86                                        :drill:
SCHEDULED: <2020-10-06 Tue>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       7c1d2377-696a-4175-861e-433f9685e713
:DRILL_LAST_INTERVAL: 128.911
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.6
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-30 Sat 13:04]
:END:

c: <[long double||float OR double OR long double]> on x86 usually represents the
<[x86 80-bit extended precision]> type

****** long double on 64-bit ARM                                        :drill:
SCHEDULED: <2021-05-03 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       9517fcb8-48cc-44c5-bf53-5cd7b65866bd
:DRILL_LAST_INTERVAL: 295.5091
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.08
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-07-11 Sat 09:33]
:END:

c: <[long double||float OR double OR long double]> on 64-bit ARM represents the
<[IEEE 754 binary128]> type

**** Integers
***** Overflow

- unsigned integer always wrap properly (the result is always modulo the maximum possible value)
- signed integer overflow is *UNDEFINED*
- undefined behavior can lead to instructions being optimized away
- gcc and clang have built-in functions that check for the overflow https://gcc.gnu.org/onlinedocs/gcc-9.1.0/gcc/Integer-Overflow-Builtins.html#Integer-Overflow-Builtins https://clang.llvm.org/docs/LanguageExtensions.html
- c compilers assume x + 1 > x is always true (because if x + 1 overflows, that would be undefined behavior)
- c compilers are able to optimise x * 2 / 2 to just x when x is signed thanks to undefined behavior
- negative integers constants don't exist (the unary minus operator is applied to the positive constant)

***** Sizes
****** short                                                     :drill:
SCHEDULED: <2022-06-03 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       0d1fe017-16f7-4323-a849-6399a117ea7a
:DRILL_LAST_INTERVAL: 635.1346
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-09-06 Sun 14:05]
:END:

c: <[short||short OR int OR long OR long long]> usually is <[16 bits]> long

****** short and int                                             :drill:
SCHEDULED: <2021-12-18 Sat>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       056B023F-D4AD-4185-9661-1DD8CAAA7120
:DRILL_LAST_INTERVAL: 600.8811
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-04-26 Sun 11:56]
:END:

c: <[short AND int||short OR int OR long OR long long]> must *both* be at least <[16 bits]> long

****** int                                                       :drill:
SCHEDULED: <2022-04-24 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       0C7AE10F-3E2F-49F2-84BC-784939A1F318
:DRILL_LAST_INTERVAL: 688.9405
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-06-04 Thu 11:48]
:END:

c: <[int||short OR int OR long OR long long]> usually is <[32 bits]> long

****** long                                                      :drill:
SCHEDULED: <2022-03-28 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       DE09CB91-8625-4D01-AB19-C5AD39DE03A6
:DRILL_LAST_INTERVAL: 668.6641
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-05-28 Thu 06:43]
:END:

c: <[long||short OR int OR long OR long long]> must be at least <[32 bits]> long

****** long and long long                                        :drill:
SCHEDULED: <2022-06-19 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       98C0F4F8-FD08-48A5-B0AE-CCD207317946
:DRILL_LAST_INTERVAL: 733.7117
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.667
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-06-15 Mon 12:33]
:END:

c: <[long and long long||short OR int OR long OR long long]> usually are *both*
<[64 bits]> long

****** long long                                                 :drill:
SCHEDULED: <2022-03-28 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       5F004E6E-2DFB-4B13-9DFA-215D18AE2575
:DRILL_LAST_INTERVAL: 668.6641
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-05-28 Thu 06:43]
:END:

c: <[long long||short OR int OR long OR long long]> must be at least <[64 bits]>
long

***** Types
****** intN_t                                                    :drill:
SCHEDULED: <2020-12-20 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       7E8B173A-BE02-4ED9-9796-AA3ED2B2C0E9
:DRILL_LAST_INTERVAL: 337.0135
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.833
:DRILL_EASE: 2.28
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-01-18 Sat 12:40]
:END:

c: <[intN_t]> is <[an integer type that is N bits]> long

****** int_leastN_t                                              :drill:
SCHEDULED: <2020-12-27 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       A6FC1263-5C53-450D-9AB1-368A9E94B636
:DRILL_LAST_INTERVAL: 155.8704
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.818
:DRILL_EASE: 2.42
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-07-24 Fri 13:22]
:END:

c: <[int_leastN_t]> is <[the smallest possible]> integer type that is at least N
bits long

****** int_fastN_t                                               :drill:
SCHEDULED: <2021-05-12 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       C1B9805B-23A7-4800-A5A1-FBAADA7B8172
:DRILL_LAST_INTERVAL: 431.9657
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-03-06 Fri 10:50]
:END:

c: <[int_fastN_t]> is <[the fastest possible]> integer type that is at least N
bits long

****** intmax_t                                                  :drill:
SCHEDULED: <2022-03-28 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       42691C49-4BD1-49ED-BB41-9CE067BAACF5
:DRILL_LAST_INTERVAL: 668.6641
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-05-28 Thu 06:44]
:END:

c: <[intmax_t]> is <[the largest integer type]>

*** TODO FINISH Compounds Literals

Compounds Literals are anonymous objects expressed as such:
~(type){init-list}~.
You can use them in-place when an array, a struct or a union is only
needed once.

*** Freeing NULL
:PROPERTIES:
:SOURCE: http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1256.pdf
:END:

**** Drill                                                         :drill:
SCHEDULED: <2021-05-24 Mon>
:PROPERTIES:
:ID:       8aa6f9d0-3600-4f21-a5c9-7109a61b0757
:DRILL_LAST_INTERVAL: 477.1672
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-02-02 Sun 13:18]
:END:

c: By the standard, freeing() NULL has <[no effect]>

*** GNU C Library
**** Feature Test Macros

*Feature Test Macros* are a way for a programmer to control the standards
exposed by the glibc (i'm not sure about the others).

For example ~_GNU_SOURCE~ can be defined in order to enable gnu specific functions.
Likewise you can define ~_POSIX_C_SOURCE~ to ~200809L~ in order to enable only
the functions from the 2008 specification.

See more: ~man 7 feature_test_macros~

***** Drill :drill:
SCHEDULED: <2020-10-12 Mon>
:PROPERTIES:
:SOURCE: https://www.gnu.org/software/libc/manual/html_node/Feature-Test-Macros.html
:DRILL_CARD_TYPE: show1cloze
:ID:       9201A0AC-3234-405C-8814-CB7F555D9736
:DRILL_LAST_INTERVAL: 125.3462
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 19
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.527
:DRILL_EASE: 2.16
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-06-09 Tue 11:24]
:END:

c: <[Different standards]> can be enabled by <[defining certain Feature Test
Macros]>

*** Inline
**** C99 Spec                                                      :drill:
SCHEDULED: <2021-12-24 Fri>
:PROPERTIES:
:SOURCE: http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1256.pdf
:ID:       1a6df739-0a40-4076-84e6-ff463c222a44
:DRILL_LAST_INTERVAL: 624.5947
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-04-08 Wed 08:08]
:END:

c: The function specifier *inline* specifies that <[calls to the function should
be as fast as possible]>

**** GCC Not Inlining                                              :drill:
SCHEDULED: <2020-12-26 Sat>
:PROPERTIES:
:ID:       e72bbc4a-9044-4c65-966c-e6099aad6be5
:DRILL_LAST_INTERVAL: 357.5277
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.42
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-01-03 Fri 07:56]
:END:

c: GCC does not inline functions when <[optimizations are disabled]>

**** GCC Force Inlining                                            :drill:
SCHEDULED: <2020-10-31 Sat>
:PROPERTIES:
:ID:       d03fa07c-faf5-4c97-9dba-93ac55c4c9bc
:DRILL_LAST_INTERVAL: 70.8828
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 21
:DRILL_FAILURE_COUNT: 4
:DRILL_AVERAGE_QUALITY: 3.714
:DRILL_EASE: 2.62
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-08-21 Fri 14:35]
:END:

c: You can force GCC to inline a function even when there is no optimization
with <[__attribute__((always_inline))]>

*** Lvalues and Rvalues
:PROPERTIES:
:SOURCE: https://eli.thegreenplace.net/2011/12/15/understanding-lvalues-and-rvalues-in-c-and-c/
:END:

**** lvalue                                                        :drill:
SCHEDULED: <2020-12-01 Tue>
:PROPERTIES:
:ID:       5be697c6-6a1c-4c00-95dd-f25d0cafe0d9
:DRILL_LAST_INTERVAL: 72.1503
:DRILL_REPEATS_SINCE_FAIL: 9
:DRILL_TOTAL_REPEATS: 20
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.2
:DRILL_EASE: 1.3
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-09-20 Sun 14:21]
:END:

c: An *lvalue* is an object that is <[addressable]>

**** rvalue                                                        :drill:
SCHEDULED: <2021-06-29 Tue>
:PROPERTIES:
:ID:       13afd09e-2c02-499f-864e-96c66b36f744
:DRILL_LAST_INTERVAL: 394.3531
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.285
:DRILL_EASE: 1.8
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-31 Sun 11:52]
:END:

c: An *rvalue* is <[by definition anything that isn't an *lvalue*]>

*** Quine

#+BEGIN_SRC c
#include <stdio.h>

#define PRINT(S) printf(S, #S)

int main()
{
    PRINT("#include <stdio.h>\n\n#define PRINT(S) printf(S, #S)\n\nint main()\n{\n    PRINT(%s);\n}\n");
}
#+END_SRC

*** Reserved Names

Along with [[https://en.cppreference.com/w/c/keyword][C keywords]] there is a bunch of reserved names. You can find them
in the [[https://www.gnu.org/software/libc/manual/html_node/Reserved-Names.html][libc documentation]]. It ranges from libc function names like ~exit~ to
reserved names for future usage by the C or POSIX standards such as names that
begin with ~str~ or ~mem~ for the potential future string and memory functions.

*** Sanitizers
**** ASAN Call Stack

If ASAN doesn't print the call stack with the debug info (supposing they were
compiled with), like so:

#+BEGIN_SRC
==687540==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 32 byte(s) in 1 object(s) allocated from:
    #0 0x559ba60fd5f9  ([...]/test+0xe65f9)
    #1 0x559ba61bde79  ([...]/test+0x1a6e79)
    #2 0x559ba619cba8  ([...]/test+0x185ba8)
    #3 0x559ba619af5e  ([...]/test+0x183f5e)
    #4 0x559ba61785cc  ([...]/test+0x1615cc)
    #5 0x559ba618a12a  ([...]/test+0x17312a)
    #6 0x559ba61b7f8f  ([...]/test+0x1a0f8f)
    #7 0x559ba6195894  ([...]/test+0x17e894)
    #8 0x7f47fd54a001  (/usr/lib/libc.so.6+0x27001)
#+END_SRC

As explained [[https://github.com/google/sanitizers/wiki/AddressSanitizerCallStack][here]]
you need to have llvm-symbolizer in your PATH.

For me it meant installing the =llvm= package on Arch Linux:

*** Standard Library

The Standard Library is automatically linked by a C compiler. That's why you
don't need to link (=-l...=) anything when calling printf() for example.
You can stop that with the =-nostdlib= flag with gcc.

*** Storage-class Specifiers
:PROPERTIES:
:SOURCE: http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1256.pdf
:END:

There are four storage-class specifiers:
- auto
- extern
- static
- register

The storage-class specifiers (except *register*) determine the *linkage* and
*storage duration* of the objects declared with.

The storage-class specifier *register* only suggets that access to the object
should be as fast as possible.

**** Linkage

The Linkage of identifiers defines how they can refer to the same
object/function in different scopes.

***** Possible Linkage                                            :drill:
SCHEDULED: <2020-11-11 Wed>
:PROPERTIES:
:ID:       e44a597b-6aee-4c72-bb06-e599bc889fd1
:DRILL_LAST_INTERVAL: 84.4028
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.455
:DRILL_EASE: 1.9
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-08-19 Wed 09:51]
:END:

c: An object or a function can have one of 3 types of linkages:
- <[External]>
- <[Internal]>
- <[None]>

***** Drill                                                       :drill:
SCHEDULED: <2021-10-02 Sat>
:PROPERTIES:
:ID:       ddc38853-fef3-485a-8b1b-a4ed1db7259c
:DRILL_LAST_INTERVAL: 540.6967
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.38
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-04-09 Thu 14:28]
:END:

c: *External linkage* means the identifier can be referred to <[from anywhere in
the whole program]>

***** Drill                                                       :drill:
SCHEDULED: <2021-07-02 Fri>
:PROPERTIES:
:ID:       1998149e-a65c-4c26-ba79-cc73380edd8d
:DRILL_LAST_INTERVAL: 402.9144
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 13
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.692
:DRILL_EASE: 2.42
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-05-25 Mon 11:00]
:END:

c: *Internal linkage* means the identifier can be referred to <[from all the
scopes of the translation unit]>

***** Drill                                                       :drill:
SCHEDULED: <2021-06-07 Mon>
:PROPERTIES:
:ID:       134c3bf7-bba1-48b1-9f80-96ace054b111
:DRILL_LAST_INTERVAL: 398.7158
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.429
:DRILL_EASE: 1.94
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-04 Mon 14:59]
:END:

c: *No linkage* means the identifier can be referred to <[only from the scope it
is declared in]>

***** Drill                                                       :drill:
SCHEDULED: <2020-10-09 Fri>
:PROPERTIES:
:ID:       b5c95d53-7783-41dc-80ad-4c97dd0a0126
:DRILL_CARD_TYPE: show1cloze
:DRILL_LAST_INTERVAL: 29.872
:DRILL_REPEATS_SINCE_FAIL: 11
:DRILL_TOTAL_REPEATS: 41
:DRILL_FAILURE_COUNT: 5
:DRILL_AVERAGE_QUALITY: 3.585
:DRILL_EASE: 1.5
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-09-09 Wed 11:42]
:END:

c: <[File]>-scoped identifiers have <[external]> linkage by default

**** Storage Duration

The lifetime of an object is determined by its storage duration. This storage
duration can be:

***** Storage Durations                                           :drill:
SCHEDULED: <2021-03-09 Tue>
:PROPERTIES:
:ID:       a44656b6-cdd5-4579-933f-2290a83dc4c2
:DRILL_LAST_INTERVAL: 288.0165
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 13
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-05-25 Mon 10:59]
:END:

c: Objects have 3 possible storage durations:
- <[Allocated]>
- <[Automatic]>
- <[Static]>

***** Automatic                                                   :drill:
SCHEDULED: <2021-07-16 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       cf7d22f2-8c04-4d0c-93d7-0cb06db98236
:DRILL_LAST_INTERVAL: 389.015
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.833
:DRILL_EASE: 2.32
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-06-22 Mon 11:56]
:END:

c: <[Automatic]> storage duration means that the object lives as long as <[the
block in which it was declared runs]>

***** Static                                                      :drill:
SCHEDULED: <2022-01-07 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       7c7c8442-b21a-48ab-945b-a9cb40776a34
:DRILL_LAST_INTERVAL: 532.9738
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-07-23 Thu 12:14]
:END:

c: <[Static]> storage duration means that the object lives as long as <[the
program runs]>

***** Drill                                                       :drill:
SCHEDULED: <2021-02-18 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       7b61aa53-6a02-4642-ad4c-c22b689f9948
:DRILL_LAST_INTERVAL: 284.4562
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.04
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-10 Sun 11:53]
:END:

c: An object with <[external or internal]> linkage has <[static]> storage
duration

**** Extern Storage-class Specifier                                :drill:
SCHEDULED: <2020-10-11 Sun>
:PROPERTIES:
:ID:       6f0a606a-f926-45f7-9be0-94038cbb9930
:DRILL_LAST_INTERVAL: 251.1829
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.8
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-02-03 Mon 09:25]
:END:

c: An object declared with the *extern* storage-class specifier has <[static]>
storage duration and <[external]> linkage

**** Static Storage-class Specifier                                :drill:
SCHEDULED: <2021-09-30 Thu>
:PROPERTIES:
:ID:       e30d2992-f67f-4c1d-8b1f-de6f8aa53d5a
:DRILL_LAST_INTERVAL: 449.2041
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-07-08 Wed 10:13]
:END:

c: An object declared with the *static* storage-class specifier has <[static]>
storage duration and <[internal]> linkage

**** Drill                                                         :drill:
SCHEDULED: <2021-08-14 Sat>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       710b94bf-41ea-43dc-9891-bc84f8502813
:DRILL_LAST_INTERVAL: 445.6663
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.635
:DRILL_EASE: 2.14
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-25 Mon 11:02]
:END:

c: <[storage-class specifiers]> determine:
<[- linkage]>
<[- storage duration]>

**** Drill                                                         :drill:
SCHEDULED: <2020-10-20 Tue>
:PROPERTIES:
:ID:       1ab1f047-6e39-4499-8a03-31e0dc43ca15
:DRILL_LAST_INTERVAL: 62.1406
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 31
:DRILL_FAILURE_COUNT: 5
:DRILL_AVERAGE_QUALITY: 3.354
:DRILL_EASE: 1.2
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-08-19 Wed 09:54]
:END:

c: The storage-class specifiers are:
<[- auto]>
<[- extern]>
<[- register]>
<[- static]>

**** Drill                                                         :drill:
SCHEDULED: <2021-03-14 Sun>
:PROPERTIES:
:ID:       b5e1455a-22ad-445b-88b6-998a0ae88d64
:DRILL_LAST_INTERVAL: 428.2904
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-01-11 Sat 11:25]
:END:

c: The storage-class specifier "register" suggests that the <[access to the
object should be as fast as possible]>

**** Drill                                                         :drill:
SCHEDULED: <2022-07-18 Mon>
:PROPERTIES:
:ID:       575f19f0-6431-48df-81ab-f445a827eab1
:DRILL_LAST_INTERVAL: 775.7117
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.667
:DRILL_EASE: 2.86
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-06-02 Tue 14:50]
:END:

c: At most <[one]> storage-class specifier can be used at a time

*** Translation Units

In C the *Translation Units* designate the source files after preprocessing
the #includes.

**** Drill                                                         :drill:
SCHEDULED: <2020-11-19 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       31bebe41-3402-4e75-94b1-2cb884a6f790
:DRILL_LAST_INTERVAL: 297.0918
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.299
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-01-27 Mon 09:29]
:END:

c: A <[Translation Unit]> is a <[source file with its includes processed]>

*** Trigraph Sequences
**** Trigraph Sequences                                            :drill:
SCHEDULED: <2022-08-11 Thu>
:PROPERTIES:
:ID:       a57b29bf-a6ea-49e6-a474-2d279aeeabca
:DRILL_LAST_INTERVAL: 797.2395
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.833
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-06-05 Fri 11:05]
:END:

c: How much characters is there in Trigraph Sequences?

***** Answer

3

**** Trigraph Sequences                                            :drill:
SCHEDULED: <2020-12-14 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       cee2e50e-f22a-4b2b-9036-3f0769872741
:DRILL_LAST_INTERVAL: 131.36
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.727
:DRILL_EASE: 2.2
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-08-05 Wed 11:15]
:END:

c: All <[Trigraph]> Sequences start with <[??]>

**** Trigraph Sequences                                            :drill:
SCHEDULED: <2020-11-14 Sat>
:PROPERTIES:
:ID:       1e048d59-25b2-4ebc-98a2-93c327aff6d2
:DRILL_LAST_INTERVAL: 109.3705
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.3
:DRILL_EASE: 2.96
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-07-28 Tue 08:23]
:END:

c: By how much characters are Trigraph Sequences replaced?

***** Answer

1

**** Trigraph Sequences                                            :drill:
SCHEDULED: <2021-01-03 Sun>
:PROPERTIES:
:ID:       9e3e0f94-2e14-4eae-b1d3-b47b7b9e8109
:DRILL_LAST_INTERVAL: 374.406
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.857
:DRILL_EASE: 2.52
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2019-12-26 Thu 14:14]
:END:

c: When are Trigraph Sequences replaced?

***** Answer

Before any processing

*** Type Qualifiers
**** ~const~

In C the ~const~ keyword can be applied in different ways.
In a nutshell, ~const~-qualified objects and struct or union types objects that
have at least one ~const~-qualified member are not modifiable.

Examples:

#+BEGIN_SRC c
const int a;
int const b;

a = 1;
b = 1;
#+END_SRC

#+BEGIN_SRC sh
gcc -Wall -Wextra -Werror const.c
#+END_SRC

#+BEGIN_SRC
const.c:16:4: error: cannot assign to variable 'a' with const-qualified type 'const int'
        a = 1;
        ~ ^
const.c:13:12: note: variable 'a' declared const here
        const int a;
        ~~~~~~~~~~^
const.c:17:4: error: cannot assign to variable 'b' with const-qualified type 'const int'
        b = 1;
        ~ ^
const.c:14:12: note: variable 'b' declared const here
        int const b;
#+END_SRC

Here are some examples with pointers:

#+BEGIN_SRC c
int * const ptr1;
ptr1 = NULL;

int const * ptr2;
ptr2 = 0;
*ptr2 = 0;
#+END_SRC

#+BEGIN_SRC
const.c:55:7: error: cannot assign to variable 'ptr1' with const-qualified type 'int *const'
        ptr1 = NULL;
        ~~~~ ^
const.c:54:14: note: variable 'ptr1' declared const here
        int * const ptr1;
        ~~~~~~~~~~~~^~~~
const.c:59:8: error: read-only variable is not assignable
        *ptr2 = 0;
        ~~~~~ ^
#+END_SRC

Struct or union member acquire the same qualification as the type they are part of:

#+BEGIN_SRC c
struct s {
    int a;
    const int b;
};
const struct s s1;
s1.a = 0;
#+END_SRC

#+BEGIN_SRC
const.c:31:7: error: cannot assign to variable 's3' with const-qualified type 'const struct s'
        s3.a = 0;
        ~~~~ ^
const.c:30:17: note: variable 's3' declared const here
        const struct s s3;
#+END_SRC

***** Drill                                                       :drill:
SCHEDULED: <2020-10-19 Mon>
:PROPERTIES:
:ID:       7AB8BFFA-2097-46C8-9B59-182F922F89D4
:DRILL_CARD_TYPE: show1cloze
:DRILL_LAST_INTERVAL: 288.6586
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 15
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.933
:DRILL_EASE: 2.92
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-01-04 Sat 15:53]
:END:

c: A <[constant pointer to int]> is declared like so: <[int * const ptr;]>

***** Drill                                                       :drill:
SCHEDULED: <2021-10-15 Fri>
:PROPERTIES:
:ID:       2575A332-62D8-44C3-BD6B-7591CA9F9D8A
:DRILL_CARD_TYPE: show1cloze
:DRILL_LAST_INTERVAL: 651.4065
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-01-03 Fri 07:53]
:END:

c: A <[pointer to constant int]> can be declared as follows: <[int const * ptr; const int * ptr;]>

***** Drill                                                       :drill:
SCHEDULED: <2021-02-02 Tue>
:PROPERTIES:
:ID:       46205B6F-2C3E-4AD8-95FD-15E9B8550D1A
:DRILL_LAST_INTERVAL: 184.2304
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 13
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.615
:DRILL_EASE: 2.0
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-08-02 Sun 08:29]
:END:

c: <[Members of a const-qualified struct or union]> are automatically
const-qualified too

**** ~restrict~

~restrict~ is a pointer type qualifier that tells the compiler that any object
pointed by that pointer, will be accessed/modified only through that same pointer.

This allows the compiler to do more optimizations with that knowledge.

/!\ modifying the object pointed by a restrict-qualified pointer through
another pointer is Undefined Behavior!

Here's an optimization example (taken from [[https://devdocs.io/c/language/restrict][devdocs.io]]):

#+BEGIN_SRC c
int foo(int *a, int *b)
{
    *a = 5;
    *b = 6;
    return *a + *b;
}

int rfoo(int *restrict a, int *restrict b)
{
    *a = 5;
    *b = 6;
    return *a + *b;
}
#+END_SRC

#+BEGIN_SRC
0000000000000000 <_foo>:
   0:   55                      push   rbp
   1:   48 89 e5                mov    rbp,rsp
   4:   c7 07 05 00 00 00       mov    DWORD PTR [rdi],0x5
   a:   c7 06 06 00 00 00       mov    DWORD PTR [rsi],0x6
  10:   8b 07                   mov    eax,DWORD PTR [rdi]
  12:   83 c0 06                add    eax,0x6
  15:   5d                      pop    rbp
  16:   c3                      ret
  17:   66 0f 1f 84 00 00 00    nop    WORD PTR [rax+rax*1+0x0]
  1e:   00 00

0000000000000020 <_rfoo>:
  20:   55                      push   rbp
  21:   48 89 e5                mov    rbp,rsp
  24:   c7 07 05 00 00 00       mov    DWORD PTR [rdi],0x5
  2a:   c7 06 06 00 00 00       mov    DWORD PTR [rsi],0x6
  30:   b8 0b 00 00 00          mov    eax,0xb
  35:   5d                      pop    rbp
  36:   c3                      ret
#+END_SRC

***** Best Practice                                               :drill:
SCHEDULED: <2020-10-09 Fri>
:PROPERTIES:
:ID:       2c5a1850-a3f7-410c-b4c6-e0b7a5fd26b0
:DRILL_LAST_INTERVAL: 143.5735
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.167
:DRILL_EASE: 1.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-05-18 Mon 10:38]
:END:

c: best practice: Use the *restrict* type qualifier

***** Restrict-Qualified Pointer                                  :drill:
SCHEDULED: <2021-10-05 Tue>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       897ca648-ec58-48ac-98bb-bdfb4a658e5e
:DRILL_LAST_INTERVAL: 432.3306
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.6
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-07-30 Thu 13:50]
:END:

c: A <[restrict]>-qualified pointer tells the compiler that the <[object pointed
by said pointer will be modified through that pointer only]>

***** Restrict-Qualified Pointer                                  :drill:
SCHEDULED: <2020-12-09 Wed>
:PROPERTIES:
:ID:       b5c1762a-c220-48db-beb1-a51d34227792
:DRILL_LAST_INTERVAL: 266.4154
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.3
:DRILL_EASE: 2.96
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-03-18 Wed 13:04]
:END:

c: *restrict* qualifying pointers helps <[the compiler make further
optimizations]>

**** ~volatile~
:PROPERTIES:
:SOURCE: http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1256.pdf
:END:

~volatile~ is a type qualifier that tells the compiler that the variable may be
changed outside of the program, ensuring that the compiler doesn't "optimize
away" the variable and always force re-reading its value when accessing it.

Its primary use case is memory mapped I/O.

***** Drill                                                       :drill:
SCHEDULED: <2021-02-04 Thu>
:PROPERTIES:
:ID:       3d873709-8446-4276-a8e4-39c2357a2bef
:DRILL_LAST_INTERVAL: 314.8838
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.285
:DRILL_EASE: 1.8
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-03-26 Thu 07:58]
:END:

c: ~volatile~ guarantees that the access to a variable:
- <[is always done through the actual memory]>
- <[isn't optimized away]>

***** Drill                                                       :drill:
SCHEDULED: <2021-04-05 Mon>
:PROPERTIES:
:ID:       86b26d86-3d92-4002-a432-d266ecfccf1b
:DRILL_LAST_INTERVAL: 360.5906
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.429
:DRILL_EASE: 1.94
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-04-09 Thu 14:27]
:END:

c: ~volatile~ lacks <[the guarantees needed for a synchronization primitive]>

** Compilers
*** Linkers

There is two replacement for the old GNU ld: [[https://lld.llvm.org/][lld]] and [[https://en.wikipedia.org/wiki/Gold_(linker)][gold]].
You can find a benchmarking comparing them [[https://lld.llvm.org/#performance][here]].
Make clang use =lld= by adding the =-fuse-ld=lld= flag.

Readings:
- https://lld.llvm.org/NewLLD.html
- http://a3f.at/lists/linkers

** CSS
# *** Selectors
# **** Drill :drill:
# SCHEDULED: <2020-02-13 Thu>
# :PROPERTIES:
# :DRILL_CARD_TYPE: show1cloze
# :SOURCE: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors
# :ID:       0c95106b-f244-4d8a-bf60-d1c2b21bb39c
# :DRILL_LAST_INTERVAL: 108.5238
# :DRILL_REPEATS_SINCE_FAIL: 6
# :DRILL_TOTAL_REPEATS: 13
# :DRILL_FAILURE_COUNT: 2
# :DRILL_AVERAGE_QUALITY: 3.538
# :DRILL_EASE: 2.1
# :DRILL_LAST_QUALITY: 4
# :DRILL_LAST_REVIEWED: [2019-10-27 Sun 12:11]
# :END:

# css: <[A ~ B]> selects <[all B that follow A under the same parent]>

** Debugging
*** Conditional breakpoints with ~lldb~ and ~gdb~

You can set conditional breakpoints in ~lldb~ and ~gdb~:

#+BEGIN_SRC c
int test(int a)
{
	return (a == 42);
}

int main(void)
{
	int tmp;

	for (int i=0 ; i < 1000 ; i++)
		tmp = test(i);
}
#+END_SRC

LLDB (Be careful, the ~b~ command is an alias to ~_regexp-break~ not ~breakpoint~):

#+BEGIN_SRC
$ lldb a.out
(lldbinit) target create "a.out"
Current executable set to 'a.out' (x86_64).
(lldbinit) br s -f breakpoint.c -l 11 -c 'test(i) == 1'
Breakpoint 1: where = a.out`main + 35 at breakpoint.c:11, address = 0x0000000100000f93
(lldbinit) run
Process 43104 launched: '/Users/jfrankow/test/c/a.out' (x86_64)
Process 43104 stopped
,* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
    frame #0: 0x0000000100000f93 a.out`main at breakpoint.c:11
   8            int tmp;
   9
   10           for (int i=0 ; i < 1000 ; i++)
-> 11                   tmp = test(i);
   12   }
(lldbinit) p i
(int) $0 = 42
#+END_SRC

#+BEGIN_SRC
$ gdb -n a.out
(gdb) b breakpoint.c:11 if test(i) == 1
Breakpoint 1 at 0x113d: file breakpoint.c, line 11.
(gdb) run
Starting program: /home/me/test/c/a.out

Breakpoint 1, main () at breakpoint.c:11
11                      tmp = test(i);
(gdb) p i
$1 = 42
#+END_SRC

**** Drill :drill:
SCHEDULED: <2020-11-02 Mon>
:PROPERTIES:
:ID:       93CA75FE-D991-47B0-BA79-C93A8932249C
:DRILL_LAST_INTERVAL: 238.2236
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.091
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-03-09 Mon 08:19]
:END:

LLDB: Set a conditional breakpoint: <[br s -f file.c -l line -c 'condition']>

**** Drill :drill:
SCHEDULED: <2021-11-28 Sun>
:PROPERTIES:
:ID:       51A94CE9-3A32-4092-8414-8B65E28125F6
:DRILL_LAST_INTERVAL: 529.7396
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 18
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.668
:DRILL_EASE: 2.54
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-06-16 Tue 14:21]
:END:

GDB: Set a conditional breakpoint: <[b file.c:line if condition]>

*** Shotgun Debugging
**** Drill :drill:
SCHEDULED: <2022-05-31 Tue>
:PROPERTIES:
:ID:       028737FA-8184-4606-8241-96292FF56CF1
:DRILL_LAST_INTERVAL: 799.2261
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.833
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-03-23 Mon 12:27]
:END:

<[Shotgun Debugging]> is a technique in which you make undirected changes in the
hope of removing a bug

** Emacs
*** TODO Overriding ~evil-mode~ keys

# TODO Finish! Find out why bind-key wasn't working but general is

Overriding keys in Emacs can be a pretty tricky task. You first need to
understand that Emacs uses keymaps. The next step is understanding the
precedence of those maps. You can find more information about maps [[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][in this
masteringemacs entry]], and more about their precedence [[https://github.com/syl20bnr/spacemacs/wiki/Keymaps-guide][in this spacemacs wiki
entry]] (although afaik they're wrong about the ~bind-key~ order), and finally
some more informations about evil mode order [[https://github.com/noctuid/evil-guide#keybindings-and-states][in this awesome guide]].

I used to set some eyebrowse keybindings with the ~bind-key*~ function provided
by the ~use-package~ package. It should let you override any major/minor mode
key by leveraging the keymap ~emulation-mode-map-alist~. However it seems like
it isn't able to override ~evil-mode~ keys.

So I fallbacked to using [[https://github.com/noctuid/general.el][general]] and it is working great so far:
#+BEGIN_SRC emacs-lisp
(require 'general)
(general-override-mode)

(defun new-tab ()
  (interactive)
  (eyebrowse-create-window-config)
  (winum-select-window-1)
  (delete-other-windows))

(general-def '(insert normal visual) 'override
  "M-h" 'eyebrowse-prev-window-config
  "M-l" 'eyebrowse-next-window-config
  "M-t" 'new-tab
  "M-d" 'eyebrowse-close-window-config)
#+END_SRC

*** Autosave and Backup files

"#autosave#" and "backup~" files are enabled by default.
You can disable them like so:

#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
(setq make-backup-files nil)
#+END_SRC

*** Comint
**** Comint                                                        :drill:
SCHEDULED: <2021-03-04 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       184E6BC8-2D30-4ED3-94A9-25B06559EB61
:DRILL_LAST_INTERVAL: 168.4269
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 14
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.714
:DRILL_EASE: 2.38
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-09-17 Thu 11:10]
:END:

emacs: <[Comint]> is the <[module that helps manage *REPLs*]>

**** Next Input                                                    :drill:
SCHEDULED: <2022-02-01 Tue>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       ADCBA802-713A-4350-919A-792BE2A0026D
:DRILL_LAST_INTERVAL: 618.8025
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-05-23 Sat 11:30]
:END:

emacs: comint: <[Select the *next input*]> with <[M-n]>

**** Previous Input                                                :drill:
SCHEDULED: <2021-06-12 Sat>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       E0D15A70-C520-4809-BB23-A85B302383DF
:DRILL_LAST_INTERVAL: 443.8713
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.42
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-03-25 Wed 14:30]
:END:

emacs: comint: <[Select the *previous input*]> with <[M-p]>

*** Debugging
**** Drill :drill:
SCHEDULED: <2021-04-26 Mon>
:PROPERTIES:
:DRILL_LAST_INTERVAL: 234.9886
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.091
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-09-03 Thu 11:46]
:ID:       e35851fd-9303-45b5-9625-660142038aa3
:END:

emacs: Call <[(toggle-debug-on-error)]> to enable debug on error


**** Drill :drill:
SCHEDULED: <2020-10-09 Fri>
:PROPERTIES:
:ID:       7635ffe8-ca0e-438b-a7b5-a82816128646
:DRILL_LAST_INTERVAL: 326.5087
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.833
:DRILL_EASE: 2.32
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2019-11-17 Sun 12:56]
:END:

emacs: <[debug-ignored-errors]> contains the list of errors ignored by the
debugger

*** Echo Area
**** Drill                                                         :drill:
SCHEDULED: <2022-05-06 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       DF09E5AD-796D-4366-9046-C1C70E0F3BF9
:DRILL_LAST_INTERVAL: 774.1837
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.667
:DRILL_EASE: 2.86
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-03-23 Mon 12:27]
:END:

emacs: Where is the *Echo Area*?

***** Answer

At the *bottom* of the frame

*** Frustrations
**** Bad Defaults

- "Text read-only" in Echo Area
- The customization system traps
- Does not create missing dirs automatically

**** Prompt for creating dir breaks everything
*** Keyword Arguments

Emacs Lisp supports Common Lisp style keyword arguments through the use of the
function ~cl-defun~ from the ~cl-lib~ library.

Example:
#+BEGIN_SRC emacs-lisp
(require 'cl-lib)

(cl-defun test (&key arg)
  (message arg))

(test :arg "test")
#+END_SRC

**** Drill :drill:
SCHEDULED: <2021-03-16 Tue>
:PROPERTIES:
:ID:       39AEC249-7CD6-4411-BD92-77A552F18855
:DRILL_LAST_INTERVAL: 479.0184
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 12
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 4.334
:DRILL_EASE: 3.3
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2019-11-23 Sat 13:57]
:END:

lisp: In ~(test :arg "test")~ ":arg" is called a <[keyword argument]>

**** Drill :drill:
SCHEDULED: <2021-04-29 Thu>
:PROPERTIES:
:ID:       C83CE938-F8AD-45B4-B9D4-9D849C670F90
:DRILL_LAST_INTERVAL: 484.789
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.38
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2019-12-31 Tue 10:37]
:END:

Emacs Lisp supports the use of keyword function arguments with the library <[cl-lib]>

*** Messages

An easy way to debug some code is to print messages in the ~*Messages*~ buffer.

Example:
#+BEGIN_SRC emacs-lisp
(message "my_var: %s" my_var)
#+END_SRC

Also in order not to have the messages show up in the echo area, set
~inhibit-message~ to ~t~.

**** Drill :drill:
SCHEDULED: <2022-01-17 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       AA3A19B1-23D2-4ADB-8947-DAD08E460ED9
:DRILL_LAST_INTERVAL: 680.7591
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.62
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-03-07 Sat 17:45]
:END:

emacs: The <[(message)]> function can be used to print messages in <[the *Echo
Area* and ~*Messages*~ buffer]>

*** Org
**** Code Blocks

In org-mode [[https://orgmode.org/manual/Structure-of-code-blocks.html][code blocks]] look like this:

#+BEGIN_SRC org
,#+BEGIN_SRC <language>

,#+END_SRC
#+END_SRC

You can find the list of supported languages [[https://orgmode.org/manual/Languages.html#Languages][here]].

**** Drawers                                                       :drill:
SCHEDULED: <2020-10-11 Sun>
:PROPERTIES:
:SOURCE: https://orgmode.org/worg/org-glossary.html#drawer
:DRILL_CARD_TYPE: show1cloze
:ID:       3B3333E4-B8A8-40FD-9BF0-0386EC95F4F1
:DRILL_LAST_INTERVAL: 93.0622
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 15
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 4.066
:DRILL_EASE: 2.92
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-07-10 Fri 08:45]
:END:

org: <[Drawers]> are containers that can be used to <[hide]> informations during
normal reading

**** Easy Insertion of Structured Blocks

You can easily insert structured blocks thanks to [[https://orgmode.org/manual/Easy-templates.html][Easy templates]].

For example, to insert a code block, insert ~<s~ and then press ~<TAB>~ and this
will be expanded to:

#+BEGIN_SRC org
,#+BEGIN_SRC

,#+END_SRC
#+END_SRC

**** Easy Insertion of Tables

You can [[https://orgmode.org/manual/Built_002din-Table-Editor.html][easily insert tables]] by typing the first columns separated by ~|~ as
such "|column1|column2" and then typing ~C-c RET~.

For example, this:

#+BEGIN_SRC org
|column1|column2
#+END_SRC

would expand to:

#+BEGIN_SRC org
| column1 | column2 |
|---------+---------|
|         |         |
#+END_SRC

***** Drill :drill:
SCHEDULED: <2021-04-22 Thu>
:PROPERTIES:
:ID:       7743F455-45C9-47B7-B67C-8CBD42779230
:DRILL_LAST_INTERVAL: 430.1804
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 14
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.786
:DRILL_EASE: 2.44
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-02-17 Mon 12:13]
:END:

org: Insert a table by typing <["|column1|column2" and ~C-c RET~||something +
shortcut]>

**** Properties / Meta-data

Org-mode supports arbitrary metadata tags through the use of the ~:PROPERTIES:~
drawer.

Example:

#+BEGIN_SRC org
,* Headline
:PROPERTIES:
:SOURCE: https://orgmode.org/worg/org-glossary.html#property
:END:
#+END_SRC

***** Drill :drill:
SCHEDULED: <2022-05-31 Tue>
:PROPERTIES:
:ID:       C805A64B-B884-474A-9ED9-1C62A7F99803
:DRILL_LAST_INTERVAL: 799.2261
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.833
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-03-23 Mon 12:27]
:END:

org: The <[:PROPERTIES:]> drawer lets you set arbitrary meta-data to tree entries

***** Drill :drill:
SCHEDULED: <2022-07-14 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       5D3222B9-A76E-4A94-8862-8E47FCCEC2C9
:DRILL_LAST_INTERVAL: 786.636
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.1
:DRILL_EASE: 2.82
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-18 Mon 10:39]
:END:

org: <[:SOMETHING+:]> can be used to <[append to a property]>

***** Drill :drill:
SCHEDULED: <2021-08-06 Fri>
:PROPERTIES:
:Source: https://orgmode.org/manual/Conventions.html
:ID:       DED46815-C50D-4637-A92B-9A9665D8B48F
:DRILL_LAST_INTERVAL: 555.2431
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.52
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-01-29 Wed 13:10]
:END:

org: By convention, <[user defined]> properties are Capitalized

*** Profiling
# **** profiler-start                                                :drill:
# SCHEDULED: <2020-07-10 Fri>
# :PROPERTIES:
# :ID:       3217FF5D-7E38-4C16-94EE-81B0AADA8117
# :DRILL_LAST_INTERVAL: 253.1973
# :DRILL_REPEATS_SINCE_FAIL: 6
# :DRILL_TOTAL_REPEATS: 5
# :DRILL_FAILURE_COUNT: 0
# :DRILL_AVERAGE_QUALITY: 4.8
# :DRILL_EASE: 2.9
# :DRILL_LAST_QUALITY: 4
# :DRILL_LAST_REVIEWED: [2019-10-31 Thu 14:52]
# :END:

# emacs: Start profiling with <[(profiler-start)]>

# **** profiler-report                                               :drill:
# SCHEDULED: <2020-04-18 Sat>
# :PROPERTIES:
# :ID:       EDF0E953-437E-4192-AB74-4158F38C9C04
# :DRILL_LAST_INTERVAL: 186.4742
# :DRILL_REPEATS_SINCE_FAIL: 6
# :DRILL_TOTAL_REPEATS: 5
# :DRILL_FAILURE_COUNT: 0
# :DRILL_AVERAGE_QUALITY: 4.0
# :DRILL_EASE: 2.42
# :DRILL_LAST_QUALITY: 3
# :DRILL_LAST_REVIEWED: [2019-10-15 Tue 11:17]
# :END:

# emacs: Report on profiling with <[(profiler-report)]> before calling
# <[(profiler-stop)]>

*** Re-entering top level after C stack overflow

If you get this error right after opening a new file, there's a chance it's
[[https://www.reddit.com/r/emacs/comments/9fs8pp/reentering_top_level_after_c_stack_overflow/][because of the undo-tree file]].

Just delete it to see if that was indeed the problem.

*** ~use-package~

[[https://github.com/jwiegley/use-package][~use-package~]] is a package that makes installing, loading and configuring
packages easier. When using ~use-package~, it can install packages if they
aren't already installed if ~use-package-always-ensure~ is ~true~ or if the
~:ensure~ keyword is set to ~t~. It can execute code before the package is
loaded thanks to the ~:init~ keyword. It can execute code after the package is
loaded with the ~:config~ keyword (and the execution is deferred until after the
package is loaded, even if it is lazy loaded).

This would install the ~evil~ package if not already installed, execute ~(setq
evil-want-C-u-scroll t)~ before the package is loaded, and execute ~(evil-mode
1)~ after it is loaded.

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-C-u-scroll t)
  :config
  (evil-mode 1))
#+END_SRC

**** =:ensure= keyword                                             :drill:
SCHEDULED: <2022-05-08 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       504B799B-A7D9-42C0-A405-914BA366F7B2
:DRILL_LAST_INTERVAL: 799.7607
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.833
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-02-28 Fri 09:18]
:END:

Emacs: The ~use-package~ function supports the keyword <[~:ensure~]> that when
set to ~t~ <[will ensure the package is installed]>

**** =:config= and =:init= keyword                                 :drill:
SCHEDULED: <2020-10-22 Thu>
:PROPERTIES:
:ID:       1E87CB3D-14AE-402C-9EE5-84147A2CDBFD
:DRILL_LAST_INTERVAL: 371.666
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.833
:DRILL_EASE: 2.28
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2019-10-16 Wed 17:46]
:END:

emacs: The ~use-package~ function keyword =:init= will <[execute code *before*
loading the package]>

emacs: The ~use-package~ function keyword =:config= will <[execute code *after*
loading the package]>

** Fonts and Typefaces

Typefaces are collections of glyphs with a particular design. Fonts
are expressions of a typeface with a specific weight (boldness),
slant and size. Font families are fonts with same design type.

The name ~Font~ comes from the French word ~Fonte~ which referred to
the metal castings at type foundries.

The names ~lowercase~ and ~uppercase~ come from metal type cases which
typically stored the small letters in the lower case, and the capital
letters in the upper case.

*** Drill :drill:
SCHEDULED: <2020-12-24 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       E92712E3-930D-4E2F-A654-52BB76B3FB45
:DRILL_LAST_INTERVAL: 358.0805
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 12
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.417
:DRILL_EASE: 2.28
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-01-01 Wed 14:59]
:END:

A <[typeface]> is a <[collection of glyphs with a particular design]>

*** Drill :drill:
SCHEDULED: <2022-03-03 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       1EA33112-2151-4EBE-965E-07463FB30CD0
:DRILL_LAST_INTERVAL: 614.9176
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.572
:DRILL_EASE: 2.04
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-06-26 Fri 11:02]
:END:

A <[font]> is an expression of a <[typeface]> with a particular <[size, slant
and weight]>

*** Drill :drill:
SCHEDULED: <2021-01-24 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       89030284-47D2-49C8-B4B5-4FAFF78128E4
:DRILL_LAST_INTERVAL: 183.7058
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 14
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 1.76
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-07-24 Fri 13:23]
:END:

The names <[Lowercase and Uppercase]> come from <[the metal type cases which
stored the small letters in the lower case, and the capital letters in the upper
case]>

** Formats
*** Base64
**** Charset of Base64                                             :drill:
SCHEDULED: <2020-10-05 Mon>
:PROPERTIES:
:ID:       cb9b37f2-6710-4b7f-b14b-a6ec2acefeca
:DRILL_LAST_INTERVAL: 183.1894
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.42
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-04-05 Sun 15:32]
:END:

format: The target *Charset* of *Base64* is <[A-Za-z0-9+/]> padded with <[=]>

** Golfing
*** C
**** Drill                                                         :drill:
SCHEDULED: <2021-11-23 Tue>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       b24a1d9a-69c4-4f0e-ae47-079dfd1a5fcd
:DRILL_LAST_INTERVAL: 595.5471
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.2
:DRILL_EASE: 2.82
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-04-06 Mon 12:36]
:END:

golf: c:
Instead of:

<[
#+BEGIN_SRC c
int main(){
int a=0;
}
#+END_SRC
]>

do

<[
#+BEGIN_SRC c
int a;
int main(){
}
#+END_SRC
]>

**** Drill                                                         :drill:
SCHEDULED: <2022-03-31 Thu>
:PROPERTIES:
:ID:       5213990e-f5a1-4fa5-832d-f83225339e10
:DRILL_LAST_INTERVAL: 703.4293
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-04-27 Mon 13:53]
:END:

golf: c:
Instead of:

#+BEGIN_SRC c
if(something){instruction;instruction;}
#+END_SRC

do

<[
#+BEGIN_SRC c
if(something)instruction,instruction;
#+END_SRC
]>

**** Drill :drill:
SCHEDULED: <2020-11-29 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       23c7644f-7528-4f37-9d28-7397ffba1ab2
:DRILL_LAST_INTERVAL: 378.8131
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 4.273
:DRILL_EASE: 3.2
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2019-11-16 Sat 10:46]
:END:

golf: c: Use <[a^b or a-b||... OR ...]> to <[compare two integers for equality]>

**** Drill :drill:
SCHEDULED: <2022-03-23 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       e696ddb4-a22d-4671-8631-c701894903a2
:DRILL_LAST_INTERVAL: 622.5323
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.62
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-07-08 Wed 10:15]
:END:

golf: c: Use <[main's argc]> if you need a variable <[initialized to 1]>

** Google
*** Operators
**** Drill :drill:
SCHEDULED: <2022-05-13 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       83B871E1-CB40-45D7-962C-69764129B35D
:DRILL_LAST_INTERVAL: 796.5522
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.833
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-03-07 Sat 17:42]
:END:

Google: <[Quoting the search terms]> forces <[an exact search]>

**** Drill :drill:
SCHEDULED: <2022-05-13 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       1E42D96C-8480-4AC7-ACA8-E7D70AEA222C
:DRILL_LAST_INTERVAL: 796.5522
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.833
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-03-07 Sat 17:42]
:END:

Google: <[X OR Y]> will return pages <[about X or Y or both]>

**** Drill :drill:
SCHEDULED: <2022-05-13 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       C64C3973-AF9F-440B-AE71-2C50689DAC5C
:DRILL_LAST_INTERVAL: 796.5522
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.833
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-03-07 Sat 17:44]
:END:

Google: <[X AND Y]> will return pages <[that contain both X and Y]>. This is the
default.

**** Drill :drill:
SCHEDULED: <2022-06-07 Tue>
:PROPERTIES:
:ID:       DBF3D0E9-8252-4CB7-BD09-E3197F21CD6F
:DRILL_LAST_INTERVAL: 821.5108
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 3.1
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-03-07 Sat 17:44]
:END:

Google: <[-X]> will return pages without X

**** Drill :drill:
SCHEDULED: <2021-03-12 Fri>
:PROPERTIES:
:ID:       A6A7BBB6-FAF1-4C57-824E-2F167F37F9DB
:DRILL_LAST_INTERVAL: 240.8323
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.999
:DRILL_EASE: 2.62
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-07-14 Tue 09:07]
:END:

Google: <[-]> also works on other operators

***** Example

-inurl:https

**** Drill :drill:
SCHEDULED: <2022-02-19 Sat>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       C687D5BB-96F1-43AC-BA4E-4F0213C158B3
:DRILL_LAST_INTERVAL: 723.0551
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-02-27 Thu 13:48]
:END:

Google: <[*]> acts <[as a wildcard]>

**** Drill :drill:
SCHEDULED: <2021-02-03 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       03ED8758-EB22-4416-8C5B-7FE6FEBB038E
:DRILL_LAST_INTERVAL: 447.1937
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.52
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2019-11-14 Thu 13:49]
:END:

Google: <[( and )]> allows <[grouping terms]>

**** Drill :drill:
SCHEDULED: <2021-06-09 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       ED0625AB-2D85-4F75-951F-E13B09B81C42
:DRILL_LAST_INTERVAL: 336.3103
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.272
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-07-08 Wed 10:12]
:END:

Google: <[filetype:]> and <[ext:]> will filter <[pages based on their extension]>

**** Drill :drill:
SCHEDULED: <2022-03-14 Mon>
:PROPERTIES:
:ID:       B8AC6E55-7E3D-4C68-905D-83626A98B262
:DRILL_LAST_INTERVAL: 746.4791
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.667
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-02-27 Thu 13:50]
:END:

Google: <[site:]> will limit results to a certain domain

**** Drill :drill:
SCHEDULED: <2022-06-07 Tue>
:PROPERTIES:
:ID:       6BE92CA0-BF73-4DA4-B6CD-E5F0EC1F1897
:DRILL_LAST_INTERVAL: 821.5108
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 3.1
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-03-07 Sat 17:44]
:END:

Google: <[intitle:]> will return pages that have certain words in their title

**** Drill :drill:
SCHEDULED: <2022-06-07 Tue>
:PROPERTIES:
:ID:       FFD11E0B-3C47-4044-9576-F79A17337C45
:DRILL_LAST_INTERVAL: 821.5108
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 3.1
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-03-07 Sat 17:44]
:END:

Google: <[inurl:]> will return pages that have certain words in their url

**** Drill :drill:
SCHEDULED: <2022-06-07 Tue>
:PROPERTIES:
:ID:       EBC1E92F-0B26-43F6-B900-964EAF5439AD
:DRILL_LAST_INTERVAL: 821.5108
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 3.1
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-03-07 Sat 17:45]
:END:

Google: <[intext:]> will return pages that have certain words in their text

**** Drill :drill:
SCHEDULED: <2022-04-18 Mon>
:PROPERTIES:
:ID:       ACDEA1E2-95E4-458D-A91D-13AB15FD7A27
:DRILL_LAST_INTERVAL: 771.5936
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.667
:DRILL_EASE: 2.86
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-03-07 Sat 17:42]
:END:

Google: <[X AROUND(N) Y]> will return pages containing X within N words of Y

** HTTP
*** Status Codes
**** 418

The response status code 418 "I'm a teapot" comes from the April's Fool
[[https://tools.ietf.org/html/rfc2324][RFC 2324]].

***** Drill                                                       :drill:
SCHEDULED: <2022-05-31 Tue>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       2063C726-C35C-4A39-9204-798338373231
:DRILL_LAST_INTERVAL: 799.2261
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.833
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-03-23 Mon 12:27]
:END:

HTTP STATUS CODE: <[418]>: <[I'm a teapot]>

***** Drill                                                       :drill:
SCHEDULED: <2021-01-22 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       3EF8EBCE-B3A2-4865-9F3F-E67A01F23932
:DRILL_LAST_INTERVAL: 143.6591
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 18
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.278
:DRILL_EASE: 1.74
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-08-31 Mon 07:28]
:END:

HTTP STATUS CODE: <[418 I'm a teapot]> comes from the April's Fool RFC <[2324]>

** Linking
*** Name Mangling

Name mangling is a technique compilers use to differentiate functions in
languages where function overloading is allowed, or where symbols with the
same name can exist in different namespaces.

The compilers need to name mangle before linking in order to let other
programs/libraries link against the right symbol.

C does not allow redifinitions hence it doesn't need name mangling.

Example in C++:
#+BEGIN_SRC C++
void test()
{
}

int main()
{
    test();
}
#+END_SRC
#+BEGIN_SRC sh
$ gcc test.cpp && nm a.out
0000000100000f80 T __Z4testv
0000000100000f90 T _main
[...]
#+END_SRC

*** ~LD_PRELOAD~ And ~DYLD_INSERT_LIBRARIES~

~LD_PRELOAD~ on Linux and ~DYLD_INSERT_LIBRARIES~ on macOS can be used to "hijack" the
dynamic linking process.

Suppose you have the following program:
#+BEGIN_SRC c
#include <stdio.h>

int main()
{
    puts("Hello World");
}
#+END_SRC

When compiled it would simply execute as such:

#+BEGIN_SRC sh
$ ./test
Hello World
#+END_SRC

We can now try to "hijack" the call to puts with a dynamic library like this:
#+BEGIN_SRC c
#include <string.h>
#include <unistd.h>

int puts(const char *s)
{
    char *str = "Hello LD_PRELOAD!\n";
    write(1, str, strlen(str));
}
#+END_SRC
#+BEGIN_SRC sh
$ gcc -fPIC -shared libhijack.c -o libhijack.so
$ LD_LIBRARY_PATH=. LD_PRELOAD=libhijack.so ./test
Hello LD_PRELOAD!
#+END_SRC

You can basically do the same with ~DYLD_PRINT_LIBRARIES=1 DYLD_INSERT_LIBRARIES=./libhijack.dylib~

You can also call the original function thanks to ~dlsym~:
#+BEGIN_SRC c
#define _GNU_SOURCE

#include <dlfcn.h>
#include <string.h>
#include <unistd.h>

int real_puts(const char *s)
{
    // Don't do casts like this kids!
    return (((int(*)(const char *s))dlsym(RTLD_NEXT, "puts"))(s));
}

int puts(const char *s)
{
    char *str = "Hello LD_PRELOAD!\n";
    write(1, str, strlen(str));
    return (real_puts(s));
}
#+END_SRC

#+BEGIN_SRC sh
$ gcc -fPIC -shared -ldl libhijack.c -o libhijack.so
❯ LD_LIBRARY_PATH=. LD_PRELOAD=libhijack.so ./test
Hello LD_PRELOAD!
Hello World
#+END_SRC

**** Drill :drill:
SCHEDULED: <2020-12-17 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       09E02BE5-9EB8-4C89-AFB9-98C75FDB0132
:DRILL_LAST_INTERVAL: 197.4547
:DRILL_REPEATS_SINCE_FAIL: 10
:DRILL_TOTAL_REPEATS: 20
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.499
:DRILL_EASE: 1.54
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-06-03 Wed 14:54]
:END:

The equivalent of <[LD_PRELOAD]> on Linux is <[DYLD_INSERT_LIBRARIES]> on macOS

** Linux
*** Boot Process

The file system supported by the Extensible Firmware Interface is based on the
FAT file system. EFI defines a specific version of FAT that is explicitly
documented and testable. Conformance to the EFI specification and its associate
reference documents is the only definition of FAT that needs to be implemented
to support EFI. To differentiate the EFI file system from pure FAT, a new
partition file system type has been defined.
EFI encompasses the use of FAT32 for a system partition, and FAT12 or FAT16 for
removable media. The FAT32 system partition is identified by an OSType value
other than that used to identify previous versions of FAT. This unique partition
type distinguishes an EFI defined file system from a normal FAT file system. The
file system supported by EFI includes support for long file names.

- UEFI finds and opens EFI System Partition
- ESP should be formated with a fat fs. and have the following guid
C12A7328-F81F-11D2-BA4B-00A0C93EC93B
- Runs ? efi binary
- Bootloader needs appropriate drivers to open partition that contains kernel
and initramfs if they aren't on the ESP
- Initramfs contains drivers to open the rest of the partitions
- (Arch) initramfs is the one that decrypts partitions (zfs or luks)
(mkinitcpio hooks). it calls =zfs load-key=.
- kernel modules (/usr/lib/modules) which contains devices firmware
https://wiki.archlinux.org/index.php/Mkinitcpio#Image_creation_and_activation
fallback == all modules
- When the option CONFIG_EFI_STUB is enabled, the kernel will masquerade as a
PE binary and can be directly executed by the UEFI firmware
- Boots configurations are stored in the NVRAM, but the firmware also searches
for standardized file paths; for example, the file path to the OS loader on an
x86-64 system is /efi/BOOT/BOOTX64.EFI,[28] and efi\boot\bootaa64.efi on ARM64
architecture.
- If you don't use the std paths, the firmware won't automatically suggest your
efi bootloader and you will probably have to manually configure it from the
firmware or with efibootmgr?
- (binary blobs) are added to the initramfs by mkinitcpio

refind:
TODO Test it can find the root automatically if it has the following
standardized guid 4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709 (x86-64)
(https://www.freedesktop.org/wiki/Specifications/DiscoverablePartitionsSpec/)

gpt/fs:
- https://wiki.archlinux.org/index.php/Persistent_block_device_naming
- GPT partitions have uuid, but filesystems can have one too!
- GPT partitions have labels, but filesystems can have one too!
- GPT partitions have both a guid and a uuid
- GPT partitions have both a unique guid and a type guid (same as above??)
- A GPT disk has a unique uuid
- https://en.wikipedia.org/wiki/GUID_Partition_Table#Partition_type_GUIDs
- https://askubuntu.com/questions/703443/gdisk-hex-codes
(gdisk uses non-official short ids based on MBR ones to designate full gpt guids)
- by-id creates a unique name depending on the hardware serial number, by-path
depending on the shortest physical path (according to sysfs).
- by-id could be used when we want to clone the disk, but not immediately use
it?

boot process:
- The bootloader will load the kernel and initial root file system image into
memory and then start the kernel, passing in the memory address of the image. At
the end of its boot sequence, the kernel tries to determine the format of the
image from its first few blocks of data, which can lead either to the initrd or
initramfs scheme.
- In the initrd scheme, the image may be a file system image (optionally
compressed), which is made available in a special block device (/dev/ram) that
is then mounted as the initial root file system.[3] The driver for that file
system must be compiled statically into the kernel. Many distributions
originally used compressed ext2 file system images, while the others (including
Debian 3.1) used cramfs in order to boot on memory-limited systems, since the
cramfs image can be mounted in-place without requiring extra space for
decompression. Once the initial root file system is up, the kernel executes
/linuxrc as its first process;[4] when it exits, the kernel assumes that the
real root file system has been mounted and executes /sbin/init to begin the
normal user-space boot process.[3]
- In the initramfs scheme (available since the Linux kernel 2.6.13), the image may
be a cpio archive (optionally compressed). The archive is unpacked by the kernel
into a special instance of a tmpfs that becomes the initial root file system.
This scheme has the advantage of not requiring an intermediate file system or
block drivers to be compiled into the kernel.[5] Some systems use the dracut
package to create an initramfs image.[6] In the initramfs scheme, the kernel
executes /init as its first process that is not expected to exit.[5]. For some
applications, initramfs can use the casper utility to create a writable
environment using unionfs to overlay a persistence layer over a read-only root
filesystem image. For example, overlay data can be stored on a USB flash drive,
while a compressed SquashFS read-only image stored on a live CD acts as a root
filesystem.[7][8]
- the root file system can be indicated to the kernel with the root="" argument
  the value can be one of:
  - LABEL={Filesystem Label}
  - UUID={Filesystem UUID}
  - /dev/disk/by-...
  - PARTLABEL={GPT Partition Label}
  - PARTUUID={GPT Partition UUID}

fat:
- fat can have 12,16 or 32 bits long pointers in its table. vfat designates a
fat filesystem with support for long file names (vs 8.3). mkfs.vfat will
intelligently select between 12/16 and 32bit based on the partition size
- fat has a max file size of 4GiB and max volume size of 2 or 16TB (4k sectors)
- FAT does not support symlinks

exfat:
- exfat is the default fs of sdxc cards above 32 GiB
- ExFAT does not support symlinks
- Operating systems have supported EXFAT for many years, since:
    Windows: XP
    MacOS: 10.6.3
    Linux: CentOS 5, Ubuntu 10.04, etc.
    Android: 4

mdadm:
ESP Raid 1:

Use mdadm 1.0 so that the raid infos are at the end of the of the partition, and
the ESP partition still looks like one to the BIOS. (Instead of being
encapsulated inside a mdadm block (1.1 and 1.2))
This should not conflict with the FAT fs, and i've checked this myself (no data
at the end of the partition) ???????? Unless the fs is full??
If the firmware modifies the ESP it will lead to mdadm/fat corruption.
Another solution would be to keep both ESP in sync fully manually, resolving
conflicts automatically (either by copying from a trusted external source or by
merging and keeping everything)
https://lists.fedoraproject.org/archives/list/devel@lists.fedoraproject.org/thread/QTRRMZU6PORBTGSATUFUIEUKY7QYA3PV/
According to my single unscientific test, even completely filling the vfat
partition doesn't overwrite the mdadm metadata.

BIOS /boot raid 1:


usb/sdcard idea:
- gpt?
- 1 vfat32 part for ESP ? How to hide?
  - one refind entry for every zfs snapshot?
- 1 vfat32 part for old printers?
- 1 exfat part for backups?
- 1 zfs part for pc copies ?

TODO:
- https://wiki.archlinux.org/index.php/Microcode
- Raid 1 ESP
- Remote unlock https://wiki.archlinux.org/index.php/ZFS#Remote_unlocking_of_ZFS_encrypted_root

Tools:

gdisk vs fdisk:
- fdisk shows all the disks/devs
- fdisk shows the full gpt uuids
- fdisk -l -o +UUID shows partitions uuid


qemu-img create test.img 0.1G
qemu-img resize --preallocation=full test.img 1G

losetup -f test.img

fdisk /dev/loop0

partx --show /dev/loop0
partx --add /dev/loop0 >>> /dev/loop0p1 exists now!

mkfs.vfat /dev/loop0p1

mdadm -C /dev/md0 -e 1.0 --level=1 --raid-devices=2 missing /dev/loop0p1
Once you've made a raid1 on p1, you won't be able to mount p1 as vfat. I guess
it's the kernel that overrides it. You need to mount /dev/md0. But I guess the
firmware won't have such a problem.

/!\ Keep in mind that all of the following operations will affect the disk
immediately. GNU parted does not stage changes like fdisk or gdisk.

zfs:
- TODO
  - lz4
  - encryption
- ZFS may benefit from AF disk https://github.com/zfsonlinux/zfs/wiki/faq#advanced-format-disks
  - Needs to be proven, but seems like more or less all ssds have 512 bytes sectors
- Create a pool:
  zpool create -f <name> /dev/disk/by-id/id-to-partition-partx
  - Degraded pool (https://blog.chaospixel.com/linux/2017/08/zfs-create-pool-with-missing-devices.html):
    - truncate -s <size> sparse.img
    - zpool create -f <name> /dev/disk/by-id/id-to-partition-partx /.../sparse.img
    - zpool offline <name> /.../sparse.img
- ZFS Datasets are like partitions but without the hassle.
  - If you want to boot from older snapshots, you should take care of putting
  your persistent data outside of the root one (eg. /home). Otherwise you would
  boot off an older snapshot of your personal data.
  - zfs create -o mountpoint=/ zroot/root
  - zfs create -o mountpoint=/home zroot/data
  - zfs list
- Swap:
  - https://github.com/zfsonlinux/zfs/wiki/FAQ#using-a-zvol-for-a-swap-device
    - zfs create -V 8G -b $(getconf PAGESIZE) \
                -o logbias=throughput -o sync=always\
                -o primarycache=metadata \
                -o com.sun:auto-snapshot=false <pool>/<zvol_name>
    - mkswap /dev/zvol/swap/swap
    - swapon /dev/zvol/swap/swap
    - echo "/dev/zvol/swap/swap none swap discard 0 0" >> /etc/fstab
- Copy zpool.cache file (cp /etc/zfs/zpool.cache /mnt/etc/zfs)

Gentoo:
- TODOs
  - repos.conf
    - There is one in /usr/share/portage/config, but it looks like it's optional
    so far
  - mirrorselect
  - https://wiki.gentoo.org/wiki/Localization/Guide https://blogs.gentoo.org/mgorny/2016/05/16/how-linguas-are-thrice-wrong/
  - Prove that locale.gen and locale-gen only generate locales
  - Prove that localectl changes locale.conf AND vconsole.conf among others
  - Try not setting locale.conf or LANG
- mount /proc! Otherwise emerge fails with /dev/fd unsane
- Sync ebuild repo: emerge-webrsync
- Sync ebuild repo to the very latest source: emerge --sync [--quiet] # quiet should be faster
- Generate locales: echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && locale-gen


Config:
- Ansible:
  - PROS:
    - Easy templating
    - Abstraction (eg. timezone module)
    - Easier to manage differing configurations ???
  - CONS:
    - Lots of files
    - Needs Ansible
    - Systemd configuration needs to be run
    - Sometimes need to update config because of ansible update
- sh:
  - PROS:
    - Already have an install script
    - Fit more stuff in a single file
    - Needs only a shell
    - More control, no abstraction
    - Most configurations can be rerun without problem (idempotence)
    - No need to update because of ansible update
    - If splitted properly in functions, pcs and servers could have clearly
    defined setups ???
  - CONS:
    - Hard/No templating
    - Harder to do a diff ?

Try scripts with Gentoo?

- cmd/files:
  - PROS:
    - More control
    - More cross distros ?
  - CONS:
    - Might miss something that systemd wouldn't
- systemd:
  - PROS:
    - Abstraction
  - CONS:
    - Less cross distros ?

>> cmd/files for now on Gentoo

Checklist:
- Partitions
- FS
- Bootloader
- Initramfs
- Hostname
- Locales
- Time sync
- Update notifier ?

*** Commands
**** chattr on Linux and chflags on BSDs                           :drill:
SCHEDULED: <2021-11-29 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       f0b8d804-993c-4deb-90c8-3fedf0f068b3
:DRILL_LAST_INTERVAL: 569.2393
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.1
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-05-09 Sat 09:24]
:END:

cmd: The equivalent of <[chattr]> on Linux is <[chflags]> on BSDs

**** chattr                                                        :drill:
SCHEDULED: <2022-02-20 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       f7615628-a099-4fcd-b70b-20fced20a56e
:DRILL_LAST_INTERVAL: 645.4614
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-16 Sat 08:07]
:END:

linux: cmd: <[chattr]> == <[change file attributes]>

**** getfacl                                                       :drill:
SCHEDULED: <2021-07-07 Wed>
:PROPERTIES:
:ID:       ecbb4846-fbed-4898-86f5-2e7c5910d8ca
:DRILL_LAST_INTERVAL: 406.4062
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.833
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-27 Wed 12:31]
:END:

linux: cmd: <[getfacl]> == list file acls

**** getfattr                                                      :drill:
SCHEDULED: <2021-01-11 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       1ef825d8-a4e6-47d6-8ea9-3db197873a88
:DRILL_LAST_INTERVAL: 270.1752
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.08
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-04-16 Thu 12:47]
:END:

linux: cmd: <[getfattr]> == <[get extended file attributes]>

**** lsattr                                                        :drill:
SCHEDULED: <2021-10-21 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       09e16762-3f16-4017-b2ae-929654b88572
:DRILL_LAST_INTERVAL: 564.8608
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.62
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-04-04 Sat 12:38]
:END:

linux: cmd: <[lsattr]> == <[list file attributes]>

**** setfacl                                                       :drill:
SCHEDULED: <2022-01-15 Sat>
:PROPERTIES:
:ID:       a57e6a67-854d-431f-898d-0dd938a1c182
:DRILL_LAST_INTERVAL: 532.4198
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-08-01 Sat 18:46]
:END:

linux: cmd: <[setfacl]> == set file acls

**** setfattr                                                      :drill:
SCHEDULED: <2021-04-21 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       e2984282-6f1b-4bcc-9c79-18b53ffe589d
:DRILL_LAST_INTERVAL: 342.7416
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 9
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.444
:DRILL_EASE: 2.32
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-05-13 Wed 13:43]
:END:

linux: cmd: <[setfattr]> == <[set file extended attributes]>

*** FS
**** ACLs Through Extended Attributes                              :drill:
SCHEDULED: <2021-02-19 Fri>
:PROPERTIES:
:ID:       7a226a2a-9722-4821-ba20-a094cc8e3b31
:DRILL_LAST_INTERVAL: 396.0474
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-01-20 Mon 09:02]
:END:

linux: How are files *ACLs* implemented?

***** Answer

With the *Extended File Attributes*

**** Capabilities Through Extended Attributes                      :drill:
SCHEDULED: <2021-12-07 Tue>
:PROPERTIES:
:SOURCE: https://wiki.archlinux.org/index.php/Capabilities
:ID:       bc75ac41-4c31-4c80-93a3-5e4a805d8bb7
:DRILL_LAST_INTERVAL: 499.5719
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.42
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-07-25 Sat 08:26]
:END:

linux: How are files *Capabilities* implemented?

***** Answer

Through the use of *Extended File Attributes*

**** File and Extended Attributes                                  :drill:
SCHEDULED: <2021-03-05 Fri>
:PROPERTIES:
:ID:       9e878238-752b-45d0-bf82-d89099324449
:DRILL_LAST_INTERVAL: 246.1342
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.08
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-07-02 Thu 09:02]
:END:

linux: fs: File Attributes are <[specific attributes that affect the filesystem
behavior]>
linux: fs: Extended File Attributes are <[arbitrary key value pairs]>

**** File Attributes
***** i                                                           :drill:
SCHEDULED: <2021-03-29 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       643dd849-3691-4f2a-8f48-2eb7880949a7
:DRILL_LAST_INTERVAL: 421.9204
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.62
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-02-01 Sat 09:30]
:END:

linux: When the File Attribute <[i]> is set <[the file is immutable]>

***** S                                                           :drill:
SCHEDULED: <2020-10-21 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       a4df41e8-c482-48a5-8357-4b49030436ca
:DRILL_LAST_INTERVAL: 24.6015
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.9
:DRILL_EASE: 2.52
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-09-26 Sat 12:19]
:END:

linux: When the File Attribute <[S]> is set <[the file modifications are written
synchronously]>

*** Networking
**** Interface Name Max Size                                       :drill:
SCHEDULED: <2020-11-06 Fri>
:PROPERTIES:
:Source: https://bbs.archlinux.org/viewtopic.php?id=246507
:ID:       6359fd40-94e9-4384-94e9-9fe7f0a13c06
:DRILL_LAST_INTERVAL: 128.911
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.6
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-06-30 Tue 11:32]
:END:

linux: The default max size of interface names is <[15 characters]>

*** Tainted Kernel

The kernel is said to be tainted when it fits certain conditions such as loading
a proprietary module. Tainting the kernel lets the kernel developer refuse to
treat some bug reports because the debugging conditions would not be the proper,
usual ones.
https://unix.stackexchange.com/a/118117
https://www.kernel.org/doc/html/latest/admin-guide/tainted-kernels.html

**** Tainted is Untrustworthy                                      :drill:
SCHEDULED: <2023-04-29 Sat>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       66A46D93-4610-4084-BF8A-BFA6B4875090
:DRILL_LAST_INTERVAL: 960.0799
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.285
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-09-11 Fri 13:05]
:END:

linux: A <[tainted]> kernel is a kernel that is in an <[untrustworthy]> state

**** Tainted                                                       :drill:
SCHEDULED: <2022-06-07 Tue>
:PROPERTIES:
:ID:       8775D165-051D-4BE1-81A3-91818ADB565A
:DRILL_LAST_INTERVAL: 821.5108
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 3.1
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-03-07 Sat 17:44]
:END:

linux: If you load a proprietary module, your kernel will be said to be
<[tainted]>

** Make
*** ~LDLIBS~ and ~LDFLAGS~

~LDLIBS~ and ~LDFLAGS~ are two distinct [[https://www.gnu.org/savannah-checkouts/gnu/make/manual/html_node/Implicit-Variables.html#Implicit-Variables][implicit variables]] in Gnu Make and you
should use them properly if you are making use of the [[https://www.gnu.org/savannah-checkouts/gnu/make/manual/html_node/Catalogue-of-Rules.html#Catalogue-of-Rules][implicit rules]].

In a nutshell the implicit rule for linking object files is ~$(CC) $(LDFLAGS)
n.o $(LOADLIBES) $(LDLIBS)~ and you will run into compilation problems if you
put your library flags (~-llib~) in ~LDFLAGS~ because it appears before the
object, and we all know that the [[https://eli.thegreenplace.net/2013/07/09/library-order-in-static-linking][order of library flags matters]]!

*** ~pkg-config~

~pkg-config~ is a utility in the C ecosystem that facilitates the work of
generating the proper dependencies flags.

For example, you can put the following in your Makefile when you need to use a
bsd specific function (eg. strlcpy).
#+BEGIN_SRC makefile
ifeq ($(UNAME), Linux)
	CFLAGS += `pkg-config --cflags libbsd-overlay`
	LDLIBS += `pkg-config --libs libbsd-overlay`
endif
#+END_SRC

The commands will produce the following flags:
#+BEGIN_SRC sh
$ pkg-config --cflags libbsd-overlay
-isystem /usr/include/bsd -DLIBBSD_OVERLAY
$ pkg-config --libs libbsd-overlay
-lbsd
#+END_SRC

If a library depends on another one, it will also include it in the generated
flags:
#+BEGIN_SRC sh
$ pkg-config --libs libpng
-lpng16 -lz
#+END_SRC

** Numbers
*** Arithmetic
**** Modular                                                       :drill:
SCHEDULED: <2021-05-24 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       BD0D007D-128D-4625-9C19-ACDBA58DD6C7
:DRILL_LAST_INTERVAL: 426.0306
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.42
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-03-24 Tue 12:29]
:END:

math: With <[Modular]> arithmetic the results of operations <[*wrap* around a
minimum and maximum value]>

**** Saturation                                                    :drill:
SCHEDULED: <2021-09-05 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       41C7E590-F526-4CC5-8DE1-78D66CB00DAF
:DRILL_LAST_INTERVAL: 500.4404
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-04-23 Thu 08:22]
:END:

math: With <[Saturation]> arithmetic the results of operations <[are *clamped*
between a minimum and maximum value]>

*** Floating Point
**** bfloat16
:PROPERTIES:
:SOURCE: https://cloud.google.com/blog/products/ai-machine-learning/bfloat16-the-secret-to-high-performance-on-cloud-tpus
:END:

=bfloat16= flushes denormals to zero.

***** Sizes                                                       :drill:
SCHEDULED: <2020-12-27 Sun>
:PROPERTIES:
:SOURCE: https://en.wikipedia.org/wiki/Bfloat16_floating-point_format
:ID:       a47bec8b-0ec3-42b3-9e15-23fec9606689
:DRILL_LAST_INTERVAL: 110.5158
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 22
:DRILL_FAILURE_COUNT: 5
:DRILL_AVERAGE_QUALITY: 3.41
:DRILL_EASE: 1.96
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-09-07 Mon 08:39]
:END:

floating point: The bfloat16 format has an <[8]> bits long exponent and a <[7]>
bits long fraction

***** Truncated binary32                                          :drill:
SCHEDULED: <2021-11-22 Mon>
:PROPERTIES:
:SOURCE: https://en.wikipedia.org/wiki/Bfloat16_floating-point_format
:ID:       3e06895d-9e8b-4bb8-a250-5c31bce038d9
:DRILL_LAST_INTERVAL: 445.576
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-09-02 Wed 12:22]
:END:

floating point: The bfloat16 format is a <[truncated]> version of
<[IEEE 754 binary32]>

**** Fraction Homonyms                                             :drill:
SCHEDULED: <2021-04-08 Thu>
:PROPERTIES:
:ID:       0d17c379-28cb-4aee-8bfe-dcc826bf2d1a
:DRILL_LAST_INTERVAL: 306.453
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 9
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.332
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-06-06 Sat 12:55]
:END:

floating point: Fraction aka <[Mantissa]> aka <[Significand]>

**** IEEE 754
***** The Standard                                                :drill:
SCHEDULED: <2020-12-07 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       9cb6b94e-199b-4319-88a4-44f5f0d2cdfd
:DRILL_LAST_INTERVAL: 251.1829
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.8
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-03-31 Tue 09:43]
:END:

std: <[IEEE 754]> is a standard that defines
<[floating point formats and behaviors]>

***** Single Precision                                            :drill:
SCHEDULED: <2020-10-03 Sat>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       b0d69254-573b-4518-8b92-7461c14be067
:DRILL_LAST_INTERVAL: 200.2757
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.4
:DRILL_EASE: 2.7
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-03-17 Tue 13:03]
:END:

floating point: IEEE 754 <[Single Precision]> aka <[binary32]>

***** Double Precision                                            :drill:
SCHEDULED: <2020-12-21 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       c6ba999d-d753-4cf8-a81a-e90f358921a1
:DRILL_LAST_INTERVAL: 154.8854
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.7
:DRILL_EASE: 2.2
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-07-19 Sun 10:16]
:END:

floating point: IEEE 754 <[Double Precision]> aka <[binary64]>

***** Quadruple Precision                                            :drill:
SCHEDULED: <2020-11-12 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       d25efd34-4a8e-4e1b-b078-b1a2a7d5b514
:DRILL_LAST_INTERVAL: 228.688
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.4
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-03-28 Sat 13:38]
:END:

floating point: IEEE 754 <[Quadruple Precision]> aka <[binary128]>

***** Format
****** binary32 exponent size                                    :drill:
SCHEDULED: <2020-11-12 Thu>
:PROPERTIES:
:ID:       85a7a501-4fd9-4179-8493-2dedd88fc0e7
:DRILL_LAST_INTERVAL: 228.688
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.4
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-03-28 Sat 13:38]
:END:

floating point: In a binary32 format, the exponent is <[8]> bits long

****** binary32 fraction size                                    :drill:
SCHEDULED: <2021-01-11 Mon>
:PROPERTIES:
:ID:       31996006-7b3d-4acc-bbd3-5d3b9bb0bd11
:DRILL_LAST_INTERVAL: 167.8102
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 14
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.34
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-07-27 Mon 11:30]
:END:

floating point: In a binary32 format, the fraction is <[23]> bits long

****** Generic Format                                            :drill:
SCHEDULED: <2020-12-15 Tue>
:PROPERTIES:
:ID:       49f7e5fd-ace2-4b70-86d5-a1fbf5cf3da7
:DRILL_LAST_INTERVAL: 259.0976
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-03-31 Tue 09:45]
:END:

floating point: The IEEE 754 format is composed of:
- <[A sign bit]>
- <[Exponent bits]>
- <[Fraction bits]>

****** Implicit Leading Bit                                      :drill:
SCHEDULED: <2020-10-05 Mon>
:PROPERTIES:
:ID:       82f3f5a3-9c25-4591-854a-8d39812117a4
:DRILL_LAST_INTERVAL: 9.3751
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.75
:DRILL_EASE: 2.42
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-09-26 Sat 12:16]
:END:

floating point: In the IEEE 754 format when the exponent is non null, the
fraction is said to have <[an implicit leading bit set to 1]>

***** Values
****** Special Values                                            :drill:
SCHEDULED: <2020-10-01 Thu>
:PROPERTIES:
:ID:       44695f7f-8009-4242-b515-b6aea590c4b5
:DRILL_LAST_INTERVAL: 3.874
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 18
:DRILL_FAILURE_COUNT: 4
:DRILL_AVERAGE_QUALITY: 3.555
:DRILL_EASE: 2.42
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-09-27 Sun 13:09]
:END:

floating point: The value 0 is expressed with:
<[- An empty exponent
- An empty fraction]>

floating point: A subnormal number is expressed with:
<[- An empty exponent
- An non empty fraction]>

floating point: Infinity is expressed with:
<[- A full exponent
- An empty fraction]>

floating point: NaN is expressed with:
<[- A full exponent
- A non empty fraction]>

***** Iterate Trough All Values

Here is a way to iterate through all the binary32 values, from =-FLT_MAX= to
=FLT_MAX=:

#+BEGIN_SRC c
#include <float.h>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>

int main() {
    float test = -FLT_MAX;
    float prev;
    int offset = -1;

    while (test != FLT_MAX)
    {
        prev = test;
        *(uint32_t*)&test = *(uint32_t*)&test + offset;
        if (prev >= test)
        {
            printf("%.10f >= %.10f\n", prev, test);
            printf("%x >= %x\n", *(uint32_t*)&prev, *(uint32_t*)&test);
            exit(-1);
        }
        if (test == +0.0)
        {
            offset = 1;
            test = -test;
        }
    }
}
#+END_SRC

**** Machine Epsilon                                               :drill:
SCHEDULED: <2020-10-12 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       3b423e3b-5c5d-4f14-9c17-52a345006f49
:DRILL_LAST_INTERVAL: 200.0419
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.2
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-03-26 Thu 07:58]
:END:

floating point: The <[Machine Epsilon]> is commonly defined as <[the ULP of one]>

**** Subnormal Numbers

Subnormal numbers have an history of being slower to compute because the
hardware designers often resorted to calling internal microcode to handle them.
[[https://stackoverflow.com/a/54938328]]

Subnormal numbers are said to be losing precision because the lower they get,
the more leading zeros they have!


***** Subnormal aka Denormal                                      :drill:
SCHEDULED: <2020-12-10 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       e026284d-b558-4216-9ad9-7cf0c261a369
:DRILL_LAST_INTERVAL: 251.1829
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.8
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-04-03 Fri 08:11]
:END:

floating point: <[Subnormal]> Numbers aka <[Denormal]> Numbers

***** Subnormal Numbers                                           :drill:
SCHEDULED: <2021-06-19 Sat>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       f9398c01-3786-4bcd-a9e8-18befc95eabf
:DRILL_LAST_INTERVAL: 337.2317
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.833
:DRILL_EASE: 2.32
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-07-17 Fri 07:20]
:END:

floating point: A <[Subnormal]> Number is <[a floating point number that can
only be expressed with leading zeros in its fraction part]>

# ***** Gradual Underflow                                           :drill:
# SCHEDULED: <2020-09-26 Sat>
# :PROPERTIES:
# :DRILL_CARD_TYPE: show1cloze
# :SOURCE: https://en.wikipedia.org/wiki/Denormal_number
# :ID:       4f99ee32-5473-4346-9377-30bc47028320
# :DRILL_LAST_INTERVAL: 194.1587
# :DRILL_REPEATS_SINCE_FAIL: 6
# :DRILL_TOTAL_REPEATS: 5
# :DRILL_FAILURE_COUNT: 0
# :DRILL_AVERAGE_QUALITY: 4.4
# :DRILL_EASE: 2.7
# :DRILL_LAST_QUALITY: 4
# :DRILL_LAST_REVIEWED: [2020-03-16 Mon 10:27]
# :END:

# floating point: Subnormal numbers are said to allow a <[Gradual Underflow]>
# because <[they gradually lose precision the smaller they get]>

**** ULP
***** Acronym                                                     :drill:
SCHEDULED: <2021-05-25 Tue>
:PROPERTIES:
:ID:       18c58799-e0f2-4d87-9229-3ad7c0a00bdb
:DRILL_LAST_INTERVAL: 315.8953
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.18
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-07-13 Mon 09:55]
:END:

floating point: ULP aka <[Unit in the Last Place]>

***** What                                                        :drill:
SCHEDULED: <2020-10-02 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:SOURCE: https://en.wikipedia.org/wiki/Unit_in_the_last_place
:ID:       4d359fed-433e-40c8-90f3-6946e7c5b240
:DRILL_LAST_INTERVAL: 3.874
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 16
:DRILL_FAILURE_COUNT: 4
:DRILL_AVERAGE_QUALITY: 3.063
:DRILL_EASE: 1.52
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-09-28 Mon 11:05]
:END:

floating point: The <[ULP]> is <[the spacing between floating point numbers]>

**** Underflow                                                     :drill:
SCHEDULED: <2021-06-08 Tue>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       14995f3a-d4ac-4bd8-9796-4809a4999fc9
:DRILL_LAST_INTERVAL: 326.618
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.18
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-07-16 Thu 11:51]
:END:

floating point: An <[Underflow]> happens when <[the result of an operation is
smaller than the smallest number the computer can represent]>

**** Unums

[[https://en.wikipedia.org/wiki/Unum_(number_format)][Unums]] are a proposed format for storing floating point numbers more accurately
and efficiently.

** Python
*** Arguments
# **** Drill :drill:
# SCHEDULED: <2019-12-05 Thu>
# :PROPERTIES:
# :ID:       02a003a0-a6d1-42fb-868b-ec7fef620012
# :DRILL_LAST_INTERVAL: 25.7288
# :DRILL_REPEATS_SINCE_FAIL: 5
# :DRILL_TOTAL_REPEATS: 22
# :DRILL_FAILURE_COUNT: 6
# :DRILL_AVERAGE_QUALITY: 3.182
# :DRILL_EASE: 1.82
# :DRILL_LAST_QUALITY: 4
# :DRILL_LAST_REVIEWED: [2019-11-09 Sat 11:31]
# :END:

# python: Arguments are said to be passed by <[assignment]> or passed by <[object
# reference]>

**** Drill :drill:
SCHEDULED: <2021-09-01 Wed>
:PROPERTIES:
:ID:       97b10a20-13fc-4bf3-9d1f-9c47fd9e059a
:DRILL_LAST_INTERVAL: 473.7473
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.909
:DRILL_EASE: 2.44
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-15 Fri 11:49]
:END:

python: With pass-by-assignment only <[mutable]> arguments can be modified
outside of the function

**** Drill :drill:
SCHEDULED: <2021-10-16 Sat>
:PROPERTIES:
:ID:       4c1401dc-4cf0-4e4d-a1c2-3cfa899f0fe5
:DRILL_LAST_INTERVAL: 580.237
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.52
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-03-15 Sun 15:35]
:END:

python: With pass-by-assignment, reassignment <[doesn't change||changes or
doesn't change]> the outer reference

**** Drill :drill:
SCHEDULED: <2020-10-12 Mon>
:PROPERTIES:
:ID:       e08e86f6-d282-4a58-9a6b-de61e4022671
:DRILL_LAST_INTERVAL: 41.2948
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 20
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.2
:DRILL_EASE: 1.26
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-09-01 Tue 12:26]
:END:

#+BEGIN_SRC python
def reassign(list):
  list = [1, 2]

list = [0]
reassign(list)
#+END_SRC

list == <[ [0] ]>

**** Drill :drill:
SCHEDULED: <2022-07-12 Tue>
:PROPERTIES:
:ID:       0ce4c8e7-a9b9-4ff2-ba61-febe7f7ae050
:DRILL_LAST_INTERVAL: 803.3925
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.833
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-04-30 Thu 11:05]
:END:

#+BEGIN_SRC python
def append(list):
  list.append(1)

list = [0]
append(list)
#+END_SRC

list == <[ [0, 1] ]>

**** Drill :drill:
SCHEDULED: <2021-01-10 Sun>
:PROPERTIES:
:ID:       da5d146d-e7ed-4953-96e7-f97c69cd1b4b
:DRILL_LAST_INTERVAL: 162.9787
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 13
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.769
:DRILL_EASE: 2.48
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-07-31 Fri 12:51]
:END:

#+BEGIN_SRC python
def reassign(int):
  int = 1

int = 0
reassign(int)
#+END_SRC

int == <[ 0 ]>

**** Drill :drill:
SCHEDULED: <2023-06-26 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       52c9cc98-5518-45b6-8e06-37424cf0878f
:DRILL_LAST_INTERVAL: 1030.6692
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 9
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.111
:DRILL_EASE: 2.96
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-08-29 Sat 11:35]
:END:

python: <[copy.copy()]> makes a <[shallow]> copy

**** Drill :drill:
SCHEDULED: <2022-01-26 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       fb6299e0-96d3-48b4-b1cf-e15ad0d82dbb
:DRILL_LAST_INTERVAL: 661.827
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-04-04 Sat 12:38]
:END:

python: <[copy.deepcopy(OBJECT)]> makes a <[recursive (deep) copy of an object]>

*** Daemon

You can turn a script into a daemon with only a few instructions:

#+BEGIN_SRC python
import daemon
import time

with daemon.DaemonContext():
    while True:
        my_function()
        time.sleep(300)
#+END_SRC

*** Divisions

In python 2 and 3 the divisions can be a bit confusing. In python 2 the type of
the result depends on the type of the operators. It would be an integer if both
operands were integers and a float otherwise. Hence the operator ~/~ did a
C-style division (floor division) when dividing integers, eg ~2/3~ would be ~1~.

With [[https://docs.python.org/release/2.2.3/whatsnew/node7.html][PEP 238]] python 3 ~/~ will always do a "true division", meaning that ~2/3~
or ~2/3.0~ will always return the expected result ~1.5~, and always as a float
regardless of the type of the operands.

This PEP also introduced the ~//~ operator for python 2/3 which will always do a
floor division.

Examples in python 2:
#+BEGIN_SRC python
>>> 3/2
1
>>> 3/2.0
1.5
>>> 3//2
1
>>> 3//2.0
1.0
#+END_SRC

Examples in python 3:
#+BEGIN_SRC python
>>> 3/2
1.5
>>> 3/2.0
1.5
>>> 3//2
1
>>> 3//2.0
1.0
#+END_SRC

**** 3/2 == 1.5                                                    :drill:
SCHEDULED: <2022-03-07 Mon>
:PROPERTIES:
:ID:       F0806021-2E2C-493E-8EDD-5DD10B5B1DF2
:DRILL_LAST_INTERVAL: 647.6489
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-28 Thu 06:44]
:END:

python 3: 3/2 == <[1.5]>

**** 3/2.0 == 1.5                                                  :drill:
SCHEDULED: <2020-11-02 Mon>
:PROPERTIES:
:ID:       09B8C325-FED5-44A0-9494-9D509D55C655
:DRILL_LAST_INTERVAL: 304.074
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.833
:DRILL_EASE: 2.32
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-01-03 Fri 07:54]
:END:

python 3: 3/2.0 == <[1.5]>

**** 3//2 == 1                                                     :drill:
SCHEDULED: <2022-01-02 Sun>
:PROPERTIES:
:ID:       B7408D6B-B3EC-45AA-90D8-5D4F1B8E42BC
:DRILL_LAST_INTERVAL: 591.6736
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.857
:DRILL_EASE: 2.52
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-20 Wed 11:58]
:END:

python 3: 3//2 == <[1]>

**** 3//2.0 == 1.0                                                 :drill:
SCHEDULED: <2021-04-13 Tue>
:PROPERTIES:
:ID:       F86E7AD1-5EFB-4395-9D7D-9352D8726A70
:DRILL_LAST_INTERVAL: 417.8835
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.42
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-02-20 Thu 09:50]
:END:

python 3: 3//2.0 == <[1.0]>

**** True Division Operator                                        :drill:
SCHEDULED: <2021-02-12 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       05595497-ABCB-44A0-8EB8-ABE2E0B4B062
:DRILL_LAST_INTERVAL: 153.4697
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.727
:DRILL_EASE: 2.24
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-09-12 Sat 13:28]
:END:

python 3: <[/]> aka <[True Division Operator]>

**** Floor Division Operator                                       :drill:
SCHEDULED: <2022-07-25 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       AE4DC2BB-50A3-46F4-9F6D-4CA93AA4B2F6
:DRILL_LAST_INTERVAL: 761.5478
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.667
:DRILL_EASE: 2.86
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-06-23 Tue 11:32]
:END:

python 3: <[//]> aka <[Floor Division Operator]>

*** Loops
**** Dict                                                          :drill:
SCHEDULED: <2021-11-15 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       6ff49f8f-bd1c-4452-ad78-2dcf8ec5f7bf
:DRILL_LAST_INTERVAL: 570.0375
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.52
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-04-24 Fri 17:38]
:END:

python: <[=for key in dict=]> will loop over <[the keys]> of dict

**** Dict                                                          :drill:
SCHEDULED: <2020-12-20 Sun>
:PROPERTIES:
:ID:       6a41804e-f0b7-4a58-8188-ffbfb8a3b305
:DRILL_LAST_INTERVAL: 134.3541
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 19
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.578
:DRILL_EASE: 2.24
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-08-08 Sat 09:30]
:END:

python: <[=for key,value in dict.items()=]> will loop over the keys and values
of a dict

*** Order of Operations

Python follows the [[https://en.wikipedia.org/wiki/Order_of_operations][PEMDAS convention]], which is also followed by pretty much
every programming languages.

PEMDAS is the acronym for Parentheses Exponents Multiplications Divisions
Additions Subtractions. The multiplications/divisions and additions/subtractions
operations are done in a single step, from left to right.

**** Drill :drill:
SCHEDULED: <2021-09-09 Thu>
:PROPERTIES:
:ID:       159FEC85-2483-463A-BA02-4234EC9340FA
:DRILL_LAST_INTERVAL: 633.598
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2019-12-15 Sun 11:52]
:END:

PEMDAS aka <[(Parentheses Exponents) (Multiplications Divisions)
(Additions Subtractions)]>

**** Drill :drill:
SCHEDULED: <2022-06-18 Sat>
:PROPERTIES:
:ID:       557138F9-E784-48E0-B9BC-CFBA3F939DC6
:DRILL_LAST_INTERVAL: 805.8177
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.833
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-04-03 Fri 08:11]
:END:

The commonly used order of mathematical operations is called <[PEMDAS||acronym]>

**** Drill :drill:
SCHEDULED: <2022-03-11 Fri>
:PROPERTIES:
:ID:       E593EE8C-9519-47B7-BF2E-08A8A9AD4C15
:DRILL_LAST_INTERVAL: 725.5588
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-03-15 Sun 15:37]
:END:

With PEMDAS, Parentheses and Exponents, Multiplications and Divisions
and Additions and Subtractions operations are <[done left-to-right and together
two by two||HOW]>

*** Requests

The [[http://docs.python-requests.org/en/master/][Requests module]] helps you make HTTP requests.

Example:

#+BEGIN_SRC python
import requests

r = requests.get("https://google.com")
#+END_SRC

You can also set the query string:

#+BEGIN_SRC python
r = requests.get("https://google.com", params={'q': 'test'})
# Same thing!
r = requests.get("https://google.com?q=test")
#+END_SRC

# **** Drill :drill:
# SCHEDULED: <2020-01-02 Thu>
# :PROPERTIES:
# :ID:       8DA88D62-1FE1-4F43-BB0F-B84A16843127
# :DRILL_LAST_INTERVAL: 216.9608
# :DRILL_REPEATS_SINCE_FAIL: 6
# :DRILL_TOTAL_REPEATS: 5
# :DRILL_FAILURE_COUNT: 0
# :DRILL_AVERAGE_QUALITY: 4.6
# :DRILL_EASE: 2.8
# :DRILL_LAST_QUALITY: 4
# :DRILL_LAST_REVIEWED: [2019-05-30 Thu 11:28]
# :END:

# A simple GET request with python's ~requests~ module looks like this: <[~r =
# requests.get("https://google.com?q=test")~]>

*** Strings
**** bytes.decode()                                                :drill:
SCHEDULED: <2021-09-25 Sat>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       9395c056-093d-4e1e-8bb7-e0f147636444
:DRILL_LAST_INTERVAL: 469.8331
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.429
:DRILL_EASE: 1.9
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-06-12 Fri 15:17]
:END:

python: Convert <[utf-8 bytes to a string]> with <[BYTES.decode()]>

**** str.encode()                                                  :drill:
SCHEDULED: <2021-12-08 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       4a62de99-d949-4065-8ba0-8198aa591c91
:DRILL_LAST_INTERVAL: 624.2447
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-03-24 Tue 12:27]
:END:

python: Convert <[a string to utf-8 bytes]> with <[STR.encode()]>

** Security
*** TLS
**** ESNI
***** Acronym                                                     :drill:
SCHEDULED: <2021-07-08 Thu>
:PROPERTIES:
:ID:       89141d17-2319-4dab-98c7-1202266d255b
:DRILL_LAST_INTERVAL: 329.3842
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 13
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.692
:DRILL_EASE: 2.34
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-08-13 Thu 12:03]
:END:

ESNI aka <[Encrypted Server Name Indication]>

***** Drill                                                       :drill:
SCHEDULED: <2021-12-27 Mon>
:PROPERTIES:
:ID:       fe75bc02-11aa-4faa-bfe0-12ad039ef794
:DRILL_LAST_INTERVAL: 597.9768
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.52
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-08 Fri 11:58]
:END:

ESNI works by <[encrypting the sni with a key obtained from a DNS record]>

***** Drill                                                       :drill:
SCHEDULED: <2022-08-09 Tue>
:PROPERTIES:
:ID:       149cbe65-dfc6-4d25-9d40-e8d7aa44ba89
:DRILL_LAST_INTERVAL: 700.9437
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.273
:DRILL_EASE: 2.92
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-09-07 Mon 09:14]
:END:

Which DNS record contains the key used for ESNI?

****** Answer

TXT _esni.DOMAIN

***** Version                                                     :drill:
SCHEDULED: <2022-08-15 Mon>
:PROPERTIES:
:ID:       ce9d3cec-e8c3-4c8f-bd4e-c46b692b66f7
:DRILL_LAST_INTERVAL: 794.5575
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.833
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-06-11 Thu 08:44]
:END:

With which versions of TLS does ESNI work?

****** Answer

1.3

** Shell
*** Field Splitting                                                 :drill:
SCHEDULED: <2021-01-18 Mon>
:PROPERTIES:
:SOURCE: https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05
:SOURCE+: http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion
:SOURCE+: http://zsh.sourceforge.net/Doc/Release/Expansion.html#Command-Substitution
:ID:       b1c22b11-b909-4eba-870c-cc212c3b3d6b
:DRILL_LAST_INTERVAL: 118.1201
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 18
:DRILL_FAILURE_COUNT: 4
:DRILL_AVERAGE_QUALITY: 3.167
:DRILL_EASE: 1.44
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-09-22 Tue 10:09]
:END:

posix shell: Field splitting is done:
<[
- For unquoted commands substitutions
- For unquoted parameters expansions
]>

zsh: Field splitting is done:
<[
- For unquoted commands substitutions
- When sh_word_split is set
- With ${=VAR}
]>

*** Reading the Script                                              :drill:
SCHEDULED: <2020-12-28 Mon>
:PROPERTIES:
:Source: https://unix.stackexchange.com/a/121025
:ID:       5c38721a-b321-4033-8cf6-a31879f44bd1
:DRILL_LAST_INTERVAL: 165.125
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.5
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-07-16 Thu 11:51]
:END:

sh: Shells <[don't always]> load the whole script in memory before executing it

*** Redirect Both stdout and stderr                                 :drill:
SCHEDULED: <2021-01-07 Thu>
:PROPERTIES:
:ID:       50f90969-55d4-4b54-ac1c-f29892959fd5
:DRILL_LAST_INTERVAL: 99.2325
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.6
:DRILL_EASE: 2.18
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-09-30 Wed 13:54]
:END:

sh: Redirect both stdout and stderr to FILE with <['>FILE 2>&1' and not
'2>&1 >FILE'||... and not ...]>

*** Tilde Expansion                                                 :drill:
SCHEDULED: <2020-11-30 Mon>
:PROPERTIES:
:ID:       f925f9f5-c75b-43bb-b385-f7200ca5e3d1
:DRILL_LAST_INTERVAL: 142.8596
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.6
:DRILL_EASE: 2.18
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-07-10 Fri 08:42]
:END:

sh: The Tilde character <[isn't]> expanded in double-quote strings

** Software Engineering
*** EAFP  Acronym                                                   :drill:
SCHEDULED: <2022-08-17 Wed>
:PROPERTIES:
:ID:       1173b918-3585-4a19-91f0-d31d10b60f4c
:DRILL_LAST_INTERVAL: 792.6573
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.833
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-06-15 Mon 12:34]
:END:

EAFP aka <[Easier to Ask for Forgiveness than Permission]>

*** LBYL Acronym                                                    :drill:
SCHEDULED: <2022-08-17 Wed>
:PROPERTIES:
:ID:       18084e47-c299-4ac6-8884-dbcb5ac8f9a1
:DRILL_LAST_INTERVAL: 792.6573
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.833
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-06-15 Mon 12:34]
:END:

LBYL aka <[Look Before You Leap]>

*** TOCTTOU Acronym                                                 :drill:
SCHEDULED: <2022-08-17 Wed>
:PROPERTIES:
:ID:       32cabfc8-1f5a-47f2-b997-2f6f0ff1c6e5
:DRILL_LAST_INTERVAL: 792.6573
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.833
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-06-15 Mon 12:34]
:END:

TOCTTOU aka <[Time Of Check To Time Of Use]>

*** TOCTTOU                                                         :drill:
SCHEDULED: <2020-12-18 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       24629c09-4b24-4519-b6f2-af4bfefabca1
:DRILL_LAST_INTERVAL: 343.6433
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.833
:DRILL_EASE: 2.28
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-01-09 Thu 09:26]
:END:

A <[TOCTTOU Bug]> is a <[bug related to checking before using something]>

*** TOCTTOU and EAFP/LBYL                                           :drill:
SCHEDULED: <2020-12-24 Thu>
:PROPERTIES:
:ID:       b50ecaac-d54d-4108-9ffc-f334ef4f49c3
:DRILL_LAST_INTERVAL: 359.7012
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2019-12-30 Mon 11:24]
:END:

Why is TOCTTOU closely related to EAFP and LBYL?

**** Answer

Because EAFP is a potential fix for TOCTTOU issues

** Standards
*** ISO
**** Drill                                                         :drill:
SCHEDULED: <2020-12-31 Thu>
:PROPERTIES:
:ID:       FA1024BA-7D9C-4E1A-BDD0-F716BCB381AE
:DRILL_LAST_INTERVAL: 130.7745
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 18
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.666
:DRILL_EASE: 2.3
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-08-22 Sat 12:45]
:END:

iso: <[8601]> defines a standard way to format dates and times

*** RFC
**** Drill                                                         :drill:
SCHEDULED: <2021-07-15 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       06F3AB63-2AAB-428D-A9B3-F1D21CC84F37
:DRILL_LAST_INTERVAL: 542.6792
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 12
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.917
:DRILL_EASE: 2.72
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-01-19 Sun 10:55]
:END:

rfc: <[1149]> aka <[IP over Avian Carriers]>

**** Drill                                                         :drill:
SCHEDULED: <2020-11-05 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       0C917123-7AFA-4250-A5A0-C8973F3873CC
:DRILL_LAST_INTERVAL: 320.5515
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 12
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.86
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2019-12-20 Fri 12:31]
:END:

rfc: <[2324]> aka <[Hyper Text Coffee Pot Control Protocol]>

** Storage
*** RAID
**** RAID decay
- https://www.zdnet.com/article/why-raid-5-stops-working-in-2009/
- https://www.zdnet.com/article/why-raid-6-stops-working-in-2019/
- https://storagemojo.com/2010/02/27/does-raid-6-stops-working-in-2019/
- https://queue.acm.org/detail.cfm?id=1670144
- https://www.backblaze.com/blog/how-long-do-disk-drives-last/
** System
*** Concurrency
# **** Critical Section                                              :drill:
# SCHEDULED: <2019-11-29 Fri>
# :PROPERTIES:
# :DRILL_CARD_TYPE: show1cloze
# :ID:       57a076bd-674a-4148-b077-1262cf6edee1
# :DRILL_LAST_INTERVAL: 3.874
# :DRILL_REPEATS_SINCE_FAIL: 2
# :DRILL_TOTAL_REPEATS: 13
# :DRILL_FAILURE_COUNT: 3
# :DRILL_AVERAGE_QUALITY: 3.846
# :DRILL_EASE: 2.86
# :DRILL_LAST_QUALITY: 3
# :DRILL_LAST_REVIEWED: [2019-11-25 Mon 09:47]
# :END:

# cs: A <[Critical Section]> is a <[section of a program that needs concurrency
# protections]>

# **** Locks
# ***** Spinlock                                                    :drill:
# SCHEDULED: <2019-12-24 Tue>
# :PROPERTIES:
# :ID:       c9b6751b-9fe3-4a18-a695-316a825961d3
# :DRILL_LAST_INTERVAL: 138.1721
# :DRILL_REPEATS_SINCE_FAIL: 6
# :DRILL_TOTAL_REPEATS: 5
# :DRILL_FAILURE_COUNT: 0
# :DRILL_AVERAGE_QUALITY: 3.8
# :DRILL_EASE: 2.32
# :DRILL_LAST_QUALITY: 3
# :DRILL_LAST_REVIEWED: [2019-08-08 Thu 12:46]
# :END:

# cs: With a spinlock, threads <["spin" in a loop when trying to acquire the lock]>

**** Preemption                                                    :drill:
SCHEDULED: <2022-05-17 Tue>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       6f9eee35-420c-426b-92b6-2d8f6b2cad8e
:DRILL_LAST_INTERVAL: 715.672
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-31 Sun 11:56]
:END:

cs: <[Preempting]> == <[temporarily interrupting a task]>

# **** Read-Modify-Write
# :PROPERTIES:
# :SOURCE: https://en.wikipedia.org/wiki/Read%E2%80%93modify%E2%80%93write
# :END:

# ***** Read-Modify-Write                                           :drill:
# SCHEDULED: <2019-11-26 Tue>
# :PROPERTIES:
# :DRILL_CARD_TYPE: show1cloze
# :ID:       ffc21fa0-9c35-4641-92b2-433ad685dca7
# :DRILL_LAST_INTERVAL: 38.8909
# :DRILL_REPEATS_SINCE_FAIL: 5
# :DRILL_TOTAL_REPEATS: 17
# :DRILL_FAILURE_COUNT: 4
# :DRILL_AVERAGE_QUALITY: 3.413
# :DRILL_EASE: 2.18
# :DRILL_LAST_QUALITY: 4
# :DRILL_LAST_REVIEWED: [2019-10-18 Fri 18:39]
# :END:

# cs: <[Read-Modify-Write]> is a class of <[atomic operations that both read and
# write a value to memory]>

# ***** Test and Set                                                :drill:
# SCHEDULED: <2019-11-23 Sat>
# :PROPERTIES:
# :DRILL_CARD_TYPE: show1cloze
# :ID:       84c4b5c3-d965-4f6b-8796-e15960e41ac6
# :DRILL_LAST_INTERVAL: 88.1633
# :DRILL_REPEATS_SINCE_FAIL: 5
# :DRILL_TOTAL_REPEATS: 11
# :DRILL_FAILURE_COUNT: 2
# :DRILL_AVERAGE_QUALITY: 4.0
# :DRILL_EASE: 2.86
# :DRILL_LAST_QUALITY: 5
# :DRILL_LAST_REVIEWED: [2019-08-27 Tue 22:21]
# :END:

# cs: <[Test and Set]> is an <[atomic instruction that writes 1 and returns the
# old value of a memory location||X and X]>

*** SMP
**** Acronym                                                       :drill:
SCHEDULED: <2021-09-10 Fri>
:PROPERTIES:
:ID:       a48b5f23-7211-4b38-b36a-cb7113e010f0
:DRILL_LAST_INTERVAL: 536.704
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-03-22 Sun 12:59]
:END:

SMP aka <[Symmetric MultiProcessing]>

**** Drill                                                         :drill:
SCHEDULED: <2021-09-22 Wed>
:PROPERTIES:
:ID:       81469fae-5abb-4db5-8c94-5a4abb73b04f
:DRILL_LAST_INTERVAL: 520.9368
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.1
:DRILL_EASE: 2.72
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-04-19 Sun 08:56]
:END:

What is the characteristic of an SMP system's processors?

***** Answer

They are identical

**** Drill                                                         :drill:
SCHEDULED: <2022-03-17 Thu>
:PROPERTIES:
:ID:       85eb7591-0626-45b2-9589-ee8155b7bf9f
:DRILL_LAST_INTERVAL: 673.4434
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-05-13 Wed 13:41]
:END:

In a SMP system the processors <[share]> the memory

**** Drill                                                         :drill:
SCHEDULED: <2022-05-17 Tue>
:PROPERTIES:
:ID:       2e84effe-6663-44a6-a9c4-cbaee53d7cf0
:DRILL_LAST_INTERVAL: 715.672
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-31 Sun 11:57]
:END:

In a SMP system all the processors have <[full access]> to the i/o devices

** Tools
*** Hardware
**** https://github.com/xoreaxeaxeax/sandsifter The x86 processor fuzzer
*** Security
**** https://github.com/christophetd/CloudFlair Find origin servers of websites behind by CloudFlare using Internet-wide scan data from Censys.
**** https://github.com/tbiehn/CURRYFINGER CURRYFINGER - SNI & Host header spoofing utility.
**** https://github.com/gnebbia/pdlist A passive subdomain finder
** Unix
*** Commands
**** mktemp                                                        :drill:
SCHEDULED: <2021-04-17 Sat>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       0eeb8b5d-fa9d-4c24-814a-8eefcf342656
:DRILL_LAST_INTERVAL: 287.8004
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.182
:DRILL_EASE: 2.86
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-07-03 Fri 13:11]
:END:

cmd: <[mktemp]> <[make a temporary directory or file safely]>

**** nm                                                            :drill:
SCHEDULED: <2021-04-03 Sat>
:PROPERTIES:
:ID:       AB3FC850-6D10-42FF-B6D0-B51067110B9F
:DRILL_CARD_TYPE: show1cloze
:DRILL_LAST_INTERVAL: 441.4665
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 14
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.643
:DRILL_EASE: 2.68
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-01-18 Sat 12:39]
:END:

cmd: <[nm]> shows the <[symbol table]> of object files

*** FS
**** Inode                                                         :drill:
SCHEDULED: <2021-05-24 Mon>
:PROPERTIES:
:ID:       5327fa09-eca5-4913-8f77-f91ffafd9bd6
:DRILL_LAST_INTERVAL: 334.1869
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 12
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 1.86
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-06-24 Wed 09:21]
:END:

unix: fs: An inode is a <[structure that holds the attributes and disk block
locations of a file system object]>

**** Permissions
***** ls Uppercase setuid/setgid/sticky Bits                      :drill:
SCHEDULED: <2021-02-17 Wed>
:PROPERTIES:
:ID:       6757681e-9507-4eca-b8f3-245a9654d10b
:DRILL_LAST_INTERVAL: 173.2548
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 17
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.706
:DRILL_EASE: 2.48
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-08-28 Fri 11:17]
:END:

unix: perms: With =ls= the set-user-ID, set-group-ID and sticky bits are
represented as <[S, S and T]> if the corresponding *executable bit* is *not* set

***** chmod Symbolic Representations of setuid/setgid/sticky Bits :drill:
SCHEDULED: <2021-04-12 Mon>
:PROPERTIES:
:ID:       8f9dc27d-ca7e-49bf-a455-a3144703ba5c
:DRILL_LAST_INTERVAL: 423.8442
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.38
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-02-13 Thu 11:07]
:END:

unix: perms: With =chmod= the set-user-ID, set-group-ID and sticky bits can be
set with the symbolic representations <[u+s, g+s and +t]>

***** Setuid and Setgid Bit on Executable Files Change the Effective ID :drill:
SCHEDULED: <2020-11-30 Mon>
:PROPERTIES:
:ID:       0d28ce4f-3da7-47b2-83bf-a66fae3d283a
:DRILL_LAST_INTERVAL: 274.5844
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.726
:DRILL_EASE: 2.28
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-02-29 Sat 13:40]
:END:

unix: perms: What process id does the setuid or setgid bit on an executable file
change?

****** Answer

The effective id

***** Setuid and Setgid Bit on Normal Files                       :drill:
SCHEDULED: <2022-04-11 Mon>
:PROPERTIES:
:ID:       130F2B0B-50B0-4F12-8EC2-246B21C9CD58
:DRILL_LAST_INTERVAL: 670.9825
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-06-09 Tue 11:24]
:END:

unix: perms: Setting the *Setuid or Setgid Bits* on *normal files* does <[nothing]>

***** Setgid on Directories                                       :drill:
SCHEDULED: <2021-01-18 Mon>
:PROPERTIES:
:ID:       0541365B-981E-4113-916F-F273541F2504
:DRILL_CARD_TYPE: show1cloze
:DRILL_LAST_INTERVAL: 174.9457
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 21
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.619
:DRILL_EASE: 2.1
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-07-27 Mon 11:27]
:END:

unix: perms: Setting the <[Setgid Bit on a Directory]> makes <[new files or
directories under it inherit its group]>

***** Setuid on Directories                                       :drill:
SCHEDULED: <2021-06-20 Sun>
:PROPERTIES:
:ID:       9E9042FC-A6F9-4784-8A6D-63B15EC70DAE
:DRILL_LAST_INTERVAL: 449.4747
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.429
:DRILL_EASE: 2.28
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-03-28 Sat 13:39]
:END:

unix: perms: Setting the *Setuid Bit* on *directories* does <[nothing]>

***** Blocking setuid and setgid                                  :drill:
SCHEDULED: <2021-02-12 Fri>
:PROPERTIES:
:ID:       cf66ad30-7a36-4a70-8cc1-463457e9ab4f
:DRILL_LAST_INTERVAL: 151.1849
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 19
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.685
:DRILL_EASE: 2.42
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-09-14 Mon 08:51]
:END:

unix: perms: The setuid and setgid effects on executables are not performed if:
<[- The calling process is being ptraced]>
<[- The filesystem is mounted with "nosuid"]>
<[- The no_new_privs attribute is set on the calling thread]>

***** Sticky Bit on Directories                                   :drill:
SCHEDULED: <2021-07-16 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       13fa8c77-b02e-46c9-a90c-7407913d99e9
:DRILL_LAST_INTERVAL: 307.3086
:DRILL_REPEATS_SINCE_FAIL: 9
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 1.38
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-09-12 Sat 13:36]
:END:

unix: perms: Setting the <[sticky bit on a directory]> <[allows only root, the
directory or the file owner to remove or rename a file inside it even if the
user would normally be able to]>

***** Sticky Bit on Files                                         :drill:
SCHEDULED: <2020-10-28 Wed>
:PROPERTIES:
:ID:       008d974d-657e-428c-ab9e-8cd81ae2b21d
:DRILL_LAST_INTERVAL: 306.8103
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.833
:DRILL_EASE: 2.32
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2019-12-26 Thu 14:13]
:END:

unix: perms: Setting the *Sticky Bit* on *files* does <[nothing]>

***** Sticky Bit on /tmp                                          :drill:
SCHEDULED: <2021-02-16 Tue>
:PROPERTIES:
:ID:       f0d69834-7704-47e4-8127-c7efc5e3213e
:DRILL_LAST_INTERVAL: 361.2329
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.18
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-02-21 Fri 14:37]
:END:

Why is the sticky bit often used with the /tmp directory?

****** Answer

Because it lets different users write files in it but also forbids them to
modify files from others

*** Functions
**** *at                                                           :drill:
SCHEDULED: <2022-05-12 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       88523c9d-8b33-484d-97c8-39d4a9c176fc
:DRILL_LAST_INTERVAL: 708.1928
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-06-03 Wed 14:55]
:END:

unix: function: The <[*at()]> function family all take <[a directory file
descriptor]> as a first argument

**** *at                                                           :drill:
SCHEDULED: <2021-01-11 Mon>
:PROPERTIES:
:SOURCE: man 2 openat
:ID:       b2e74d99-50b6-485d-9b4a-8c8f647d2e14
:DRILL_LAST_INTERVAL: 255.0335
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 12
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.417
:DRILL_EASE: 1.72
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-01 Fri 14:57]
:END:

unix: function: What's the main reason for using the *at() functions?

***** Answer

With them you can avoid race conditions related to directories being renamed

**** *at                                                           :drill:
SCHEDULED: <2021-08-26 Thu>
:PROPERTIES:
:ID:       6c41c087-b997-45dc-88b5-6521242f4e36
:DRILL_LAST_INTERVAL: 368.6117
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 12
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.833
:DRILL_EASE: 2.42
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-08-22 Sat 12:45]
:END:

unix: function: The *at() function family doesn't protect you <[from a potential
race condition with the very first open()]>

**** chdir                                                         :drill:
SCHEDULED: <2021-04-12 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       86296a09-2913-4a7c-99f4-71eb7ef0b9b2
:DRILL_LAST_INTERVAL: 423.8442
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.38
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-02-13 Thu 11:07]
:END:

unix: function: <[chdir()]> == <[change the working directory]>

**** chmod                                                         :drill:
SCHEDULED: <2021-10-22 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       2e9f5df7-0470-460b-b468-f6cf766d5172
:DRILL_LAST_INTERVAL: 578.5831
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.667
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-03-22 Sun 12:59]
:END:

unix: function: <[chmod()]> == <[change the permissions of a file]>

**** chown                                                         :drill:
SCHEDULED: <2022-01-18 Tue>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       f8d0ad72-e167-4dfd-8ef8-b69816b3c406
:DRILL_LAST_INTERVAL: 615.9042
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-05-12 Tue 12:28]
:END:

unix: function: <[chown()]> == <[change the owner and group of a file]>

**** clock                                                         :drill:
SCHEDULED: <2020-11-26 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       EA822C50-FA55-4CF0-BBA5-AD11EE29CD10
:DRILL_LAST_INTERVAL: 146.2942
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 20
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.45
:DRILL_EASE: 1.72
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-07-03 Fri 13:11]
:END:

unix: function: <[clock()]> == <[get the cpu time used by the process so far, in
microseconds]>

**** clock                                                         :drill:
SCHEDULED: <2022-03-07 Mon>
:PROPERTIES:
:SOURCE: https://linux.die.net/man/3/clock
:ID:       A6C87F78-9344-4DD7-9BA5-E38F3E3486FB
:DRILL_LAST_INTERVAL: 662.9205
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.667
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-05-13 Wed 13:41]
:END:

unix: function: On 32 bit systems clock() wraps around every <[72 minutes]>

***** Explanation

2^32 / 1 000 000 / 60

**** link                                                          :drill:
SCHEDULED: <2021-12-30 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       cb7892b2-535f-42c9-9cb1-6be2ebaadad3
:DRILL_LAST_INTERVAL: 596.5479
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.52
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-12 Tue 12:28]
:END:

unix: function: <[link()]> == <[make a new hard link]>

# **** mkdtemp                                                       :drill:
# SCHEDULED: <2020-08-18 Tue>
# :PROPERTIES:
# :DRILL_CARD_TYPE: show1cloze
# :ID:       2e8a140f-cff2-4daf-870c-d7cc56118182
# :DRILL_LAST_INTERVAL: 296.0151
# :DRILL_REPEATS_SINCE_FAIL: 6
# :DRILL_TOTAL_REPEATS: 8
# :DRILL_FAILURE_COUNT: 1
# :DRILL_AVERAGE_QUALITY: 4.25
# :DRILL_EASE: 2.86
# :DRILL_LAST_QUALITY: 4
# :DRILL_LAST_REVIEWED: [2019-10-27 Sun 12:10]
# :END:

# unix: function: <[mkdtemp()]> == <[make a unique temporary directory]>

**** mkdir                                                         :drill:
SCHEDULED: <2022-07-18 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       263c6c7b-5455-4d21-b93e-e9ddd67cc2da
:DRILL_LAST_INTERVAL: 765.2489
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.667
:DRILL_EASE: 2.86
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-06-13 Sat 11:03]
:END:

unix: function: <[mkdir()]> == <[make a new directory]>

**** mkstemp                                                       :drill:
SCHEDULED: <2021-02-01 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       977219a3-e745-49ee-b626-d3feb2e6930b
:DRILL_LAST_INTERVAL: 152.0756
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 21
:DRILL_FAILURE_COUNT: 4
:DRILL_AVERAGE_QUALITY: 3.62
:DRILL_EASE: 2.26
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-09-02 Wed 12:23]
:END:

unix: function: <[mkstemp()]> == <[make a unique temporary file]>

**** mktemp                                                        :drill:
SCHEDULED: <2021-07-05 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       cc8b6a6a-e410-427e-9032-f937dc08d611
:DRILL_LAST_INTERVAL: 457.8994
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.9
:DRILL_EASE: 2.52
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-04-03 Fri 08:12]
:END:

unix: function: <[mktemp()]> == <[make a unique temporary filename]>

**** mktemp                                                        :drill:
SCHEDULED: <2020-11-22 Sun>
:PROPERTIES:
:ID:       c73edc59-0696-4f59-afde-6b7161699c25
:DRILL_LAST_INTERVAL: 139.8796
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 15
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.4
:DRILL_EASE: 1.72
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-07-05 Sun 13:53]
:END:

unix: function: mktemp() is considered insecure because <[there is a potential
race condition between checking that the name exists and opening the file]>

# **** nextafter                                                     :drill:
# SCHEDULED: <2020-08-07 Fri>
# :PROPERTIES:
# :DRILL_CARD_TYPE: show1cloze
# :ID:       0c44d6ae-7e68-452d-9083-d3504b9457af
# :DRILL_LAST_INTERVAL: 165.8295
# :DRILL_REPEATS_SINCE_FAIL: 6
# :DRILL_TOTAL_REPEATS: 5
# :DRILL_FAILURE_COUNT: 0
# :DRILL_AVERAGE_QUALITY: 3.8
# :DRILL_EASE: 2.32
# :DRILL_LAST_QUALITY: 3
# :DRILL_LAST_REVIEWED: [2020-02-23 Sun 16:08]
# :END:

# unix: function: <[nextafter()]> <[returns the next representable floating point
# value]>

**** perror                                                        :drill:
SCHEDULED: <2021-05-30 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       372e238f-b509-4e6e-8ac5-4cd1b4653779
:DRILL_LAST_INTERVAL: 451.3577
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.42
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-03-05 Thu 13:13]
:END:

unix: function: <[perror()]> == <[print an error message according to the
current value of errno]>

**** printf
***** Conversion Specifiers
****** d or i                                                    :drill:
SCHEDULED: <2021-10-23 Sat>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       b0b7dfd8-e8d9-437f-89a4-af0ab5c39f21
:DRILL_LAST_INTERVAL: 432.3306
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.6
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-08-17 Mon 11:42]
:END:

c: printf: <[Print a signed integer in decimal]> with <[d or i]>

****** o                                                         :drill:
SCHEDULED: <2020-10-14 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       86f78574-2732-440f-8868-fb9a558bc114
:DRILL_LAST_INTERVAL: 210.8316
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.6
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-03-17 Tue 13:03]
:END:

c: printf: <[Print an unsigned integer in octal]> with <[o]>

****** u                                                         :drill:
SCHEDULED: <2021-12-12 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       117e1f4f-28d9-46ab-9584-8b11a5076b31
:DRILL_LAST_INTERVAL: 462.6536
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.875
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-09-05 Sat 11:52]
:END:

c: printf: <[Print an unsigned integer in decimal]> with <[u]>

****** x                                                         :drill:
SCHEDULED: <2020-12-01 Tue>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       2a4a4fe4-06fb-4b07-bf3a-787b06f5d090
:DRILL_LAST_INTERVAL: 243.2682
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.6
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-04-02 Thu 11:09]
:END:

c: printf: <[Print an unsigned integer in hexadecimal]> with <[x]>

****** f                                                         :drill:
SCHEDULED: <2021-06-26 Sat>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       ac4c5409-2d04-4870-bc94-50d67eb8a5bf
:DRILL_LAST_INTERVAL: 337.509
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.18
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-07-23 Thu 12:14]
:END:

c: printf: <[Print a double]> with <[f]>

****** c                                                         :drill:
SCHEDULED: <2020-10-20 Tue>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       9fe143c4-509f-44a8-830f-0552890e9168
:DRILL_LAST_INTERVAL: 217.4577
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.8
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-03-17 Tue 13:03]
:END:

c: printf: <[Print a character]> with <[c]>

****** s                                                         :drill:
SCHEDULED: <2020-12-17 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       41d67ad3-b440-4820-9069-f811aeed7e67
:DRILL_LAST_INTERVAL: 259.0976
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-04-02 Thu 11:09]
:END:

c: printf: <[Print a string]> with <[s]>

****** p                                                         :drill:
SCHEDULED: <2020-12-09 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       3e3e11df-26bb-4e7e-9915-1446bcf7ed83
:DRILL_LAST_INTERVAL: 251.1829
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.8
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-04-02 Thu 11:09]
:END:

c: printf: <[Print a pointer in hexadecimal]> with <[p]>

***** Length Modifier
****** hh                                                        :drill:
SCHEDULED: <2020-10-21 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       ce288947-2909-461c-a37a-8b27e4571b7e
:DRILL_LAST_INTERVAL: 23.7871
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 9
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.32
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-09-27 Sun 13:03]
:END:

c: printf: <[Cast the integer argument to char]> with <[hh]>

****** h                                                         :drill:
SCHEDULED: <2020-10-25 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       f2341b94-1057-4137-b451-d8837d8e2a18
:DRILL_LAST_INTERVAL: 217.4738
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.6
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-03-22 Sun 13:00]
:END:

c: printf: <[Cast the integer argument to short]> with <[h]>

****** l                                                         :drill:
SCHEDULED: <2020-10-28 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       1990fbf7-4087-4d5f-b2a6-e6c0b7dd1704
:DRILL_LAST_INTERVAL: 217.2537
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.4
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-03-25 Wed 14:29]
:END:

c: printf: <[Cast the integer argument to long]> with <[l]>

****** ll                                                        :drill:
SCHEDULED: <2021-07-12 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       914d9a4b-a9f1-4bc6-af03-53e263897661
:DRILL_LAST_INTERVAL: 345.9004
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-07-31 Fri 12:51]
:END:

c: printf: <[Cast the integer argument to long long]> with <[ll]>

****** L                                                         :drill:
SCHEDULED: <2021-10-27 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       c8174905-5415-4d60-b10b-bf7b24d5757d
:DRILL_LAST_INTERVAL: 432.3306
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.875
:DRILL_EASE: 2.6
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-08-21 Fri 14:35]
:END:

c: printf: <[Cast the double argument to long double]> with <[L]>

**** rename                                                        :drill:
SCHEDULED: <2021-04-26 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       68480441-bff7-4397-84b9-4eb7292ff98f
:DRILL_LAST_INTERVAL: 437.7042
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.52
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-02-13 Thu 11:07]
:END:

unix: function: <[rename()]> == <[change the name or location of a file]>

**** rmdir                                                         :drill:
SCHEDULED: <2022-08-17 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       53d892ba-4ebc-4e68-bb94-f3af58e2148b
:DRILL_LAST_INTERVAL: 792.6573
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.833
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-06-15 Mon 12:33]
:END:

unix: function: <[rmdir()]> == <[remove a directory]>

**** symlink                                                       :drill:
SCHEDULED: <2022-04-24 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       2952cf2d-6275-48b7-98fc-6f86d5550c33
:DRILL_LAST_INTERVAL: 693.8708
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-05-30 Sat 13:04]
:END:

unix: function: <[symlink()]> == <[make a new symbolic link]>

**** system                                                        :drill:
SCHEDULED: <2021-07-16 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       70c849d7-1080-43cf-a64d-62516d062755
:DRILL_LAST_INTERVAL: 490.2264
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.6
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-03-13 Fri 08:05]
:END:

unix: function: <[system()]> == <[execute commands in a shell]>

**** unlink                                                        :drill:
SCHEDULED: <2021-08-10 Tue>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       13971d9a-1492-4dcb-852f-cbd6191a330c
:DRILL_LAST_INTERVAL: 497.5448
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.38
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-03-30 Mon 08:43]
:END:

unix: function: <[unlink()]> == <[delete a name and possibly the file it refers
to]>

**** unlink                                                        :drill:
SCHEDULED: <2021-03-26 Fri>
:PROPERTIES:
:DRILL_LAST_INTERVAL: 316.2116
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-14 Thu 17:02]
:ID:       01b3b693-e45b-4ae6-abc0-9eff4f43d12b
:END:

unix: function: unlink() deletes the actual file data when:
- <[There is only one remaining link on the data]>
AND
- <[The file is closed]>

*** Library Version and Dependencies
**** Linux                                                         :drill:
SCHEDULED: <2021-06-13 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       9C6FB13D-0CC5-4C9D-A3D1-334B4E89C3F6
:DRILL_LAST_INTERVAL: 521.3012
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.52
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-01-09 Thu 09:26]
:END:

Linux: cmd: <[ldd]> shows <[libraries dependencies]>

**** macOS                                                         :drill:
SCHEDULED: <2022-03-11 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       AB88CD0E-6F6E-4A34-95AE-E5DEFA7BBD6E
:DRILL_LAST_INTERVAL: 725.5588
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-03-15 Sun 15:34]
:END:

macOS: cmd: <[otool -L]> shows libraries <[dependencies and versions||X and X]>

*** Processes
**** Orphan                                                        :drill:
SCHEDULED: <2020-12-16 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       100883c0-ffc3-40f6-855f-d242ab72c005
:DRILL_LAST_INTERVAL: 347.9386
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.42
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-01-03 Fri 07:54]
:END:

unix: An <[Orphan]> process is a process <[whose parent has terminated but is
still running||X but X]>

**** Orphan                                                        :drill:
SCHEDULED: <2021-09-25 Sat>
:PROPERTIES:
:ID:       51cbd622-3a49-42ce-af28-ddee182286e0
:DRILL_LAST_INTERVAL: 551.7097
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-03-22 Sun 13:02]
:END:

What happens to an Orphan process?

***** Answer

It is adopted by init (pid 1)

**** Zombie                                                        :drill:
SCHEDULED: <2020-10-28 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       2ea77385-85c5-472c-9600-f079393b995b
:DRILL_LAST_INTERVAL: 307.0957
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.18
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2019-12-26 Thu 14:13]
:END:

unix: A <[Zombie]> process is a process <[which has exited and hasn't been
"reaped" by its parent yet]>

**** Zombie                                                        :drill:
SCHEDULED: <2021-12-19 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       d84add7b-de7f-422a-b431-fce67de5dc8d
:DRILL_LAST_INTERVAL: 593.8978
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.52
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-04 Mon 14:59]
:END:

unix: <[waiting()]> on a child process is commonly called <[reaping]>

*** Standards
**** POSIX
***** Acronym                                                     :drill:
SCHEDULED: <2022-03-31 Thu>
:PROPERTIES:
:ID:       b6a327a4-abcd-41ef-a784-e5d9653b3656
:DRILL_LAST_INTERVAL: 673.6511
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.62
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-26 Tue 14:59]
:END:

POSIX stands for <[Portable Operating System Interface]>

***** What                                                        :drill:
SCHEDULED: <2022-03-31 Thu>
:PROPERTIES:
:ID:       356e54ef-1d8f-4a45-80ef-be5d0252182a
:DRILL_LAST_INTERVAL: 673.6511
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.62
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-26 Tue 14:58]
:END:

POSIX is a <[set of standards||(not the goal)]>

***** Why                                                         :drill:
SCHEDULED: <2021-10-26 Tue>
:PROPERTIES:
:ID:       4f487de3-d71b-470f-a018-5765b3898901
:DRILL_LAST_INTERVAL: 448.6193
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.285
:DRILL_EASE: 1.8
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-08-03 Mon 11:55]
:END:

The goal of POSIX is to <[help maintain compatibility between Unix OSes]>

**** SUS
***** Acronym                                                     :drill:
SCHEDULED: <2022-06-15 Wed>
:PROPERTIES:
:ID:       eb671553-5cb5-47db-9d26-b9f6188aa61d
:DRILL_LAST_INTERVAL: 741.5287
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.667
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-06-03 Wed 14:54]
:END:

unix: SUS aka <[Single Unix Specification]>

***** UNIX Trademark                                              :drill:
SCHEDULED: <2021-08-22 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       eaa79d9f-8b1c-4396-831c-3e5f54b73e07
:DRILL_LAST_INTERVAL: 406.4062
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.833
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-07-12 Sun 12:47]
:END:

unix: You need to comply with the <[SUS standards]> in order to qualify for the
<[UNIX Trademark]>

**** Drill                                                         :drill:
SCHEDULED: <2022-03-22 Tue>
:PROPERTIES:
:ID:       e88a3f1c-84f1-44b9-8466-fb7e95008876
:DRILL_LAST_INTERVAL: 675.7876
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-05-15 Fri 11:49]
:END:

How are POSIX and SUS related nowadays?

***** Answer

They are mostly equivalent

**** Drill :drill:
SCHEDULED: <2020-10-08 Thu>
:PROPERTIES:
:ID:       6f4e7c0c-1976-4150-ab7a-0b5f07ef51dd
:DRILL_LAST_INTERVAL: 339.7862
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 3.1
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2019-11-03 Sun 10:56]
:END:

Nowadays POSIX and SUS standards are developed by the <[Austin Group]>

*** Shell
**** ~$OSTYPE~

~$OSTYPE~ is a variable exposed by Bash and Zsh that can be used to detect the
running os.

Example on Linux:
#+BEGIN_SRC sh
$ echo $OSTYPE
linux-gnu
#+END_SRC

On macOS:
#+BEGIN_SRC sh
$ echo $OSTYPE
darwin16.0
#+END_SRC

***** Drill                                                       :drill:
SCHEDULED: <2021-08-08 Sun>
:PROPERTIES:
:ID:       F96408F5-6B5B-438A-83DA-EBEECF89C3AB
:DRILL_LAST_INTERVAL: 565.4467
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.52
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-01-21 Tue 09:01]
:END:

sh: The variable <[OSTYPE]> is a variable exposed by Bash and Zsh
that contains a short OS identifier

**** ~$SHLVL~

The ~$SHLVL~ environment variable contains the depth of shells the current shell
is in starting at one. All major shells update it.

Example:
#+BEGIN_SRC sh
$ echo $SHLVL
2
#+END_SRC

***** Drill                                                       :drill:
SCHEDULED: <2021-10-10 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:DRILL_LAST_INTERVAL: 628.7515
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-01-20 Mon 09:02]
:ID:       50CB8D18-6147-49A5-9722-C7172AB8F45E
:END:

sh: The <[SHLVL]> is <[the depth of the current shell]>

**** Comparison Commands
:PROPERTIES:
:SOURCE: http://mywiki.wooledge.org/BashFAQ/031
:END:

***** test == =[=                                                 :drill:
SCHEDULED: <2022-07-16 Sat>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       c5c05e66-7c9c-4720-ab97-9ca827a3dc4e
:DRILL_LAST_INTERVAL: 809.421
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.833
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-04-28 Tue 14:06]
:END:

sh: <[test]> is equivalent to <[ [ ]>

***** =[[= vs =[=                                                 :drill:
SCHEDULED: <2021-02-20 Sat>
:PROPERTIES:
:SOURCE: https://unix.stackexchange.com/a/408003
:ID:       9a64a2bf-5d6e-4e63-a886-123fc4b9538a
:DRILL_LAST_INTERVAL: 232.2289
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 20
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.55
:DRILL_EASE: 2.02
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-07-03 Fri 13:11]
:END:

sh: =[[= supports these additional operators:
- <[&&]>
- <[\|\|]>
- <[=~]>

***** [[
****** Drill                                                     :drill:
SCHEDULED: <2022-07-16 Sat>
:PROPERTIES:
:ID:       3d758bc0-c023-4422-8652-44d7063f24ef
:DRILL_LAST_INTERVAL: 809.421
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.833
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-04-28 Tue 14:06]
:END:

sh: [[ is understood by <[Bash]> <[Ksh]> <[Zsh]>

****** Drill                                                     :drill:
SCHEDULED: <2022-02-04 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       0532e2bf-50cc-4e63-b41f-618d0adef731
:DRILL_LAST_INTERVAL: 507.1661
:DRILL_REPEATS_SINCE_FAIL: 9
:DRILL_TOTAL_REPEATS: 21
:DRILL_FAILURE_COUNT: 4
:DRILL_AVERAGE_QUALITY: 3.571
:DRILL_EASE: 2.12
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-09-15 Tue 15:06]
:END:

sh: [[: <[=~]> does <[regex matching]>

****** Drill                                                     :drill:
SCHEDULED: <2020-10-20 Tue>
:PROPERTIES:
:ID:       ca9fe039-0364-4953-a982-2b0e6b6b5777
:DRILL_LAST_INTERVAL: 329.7515
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.183
:DRILL_EASE: 2.24
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2019-11-25 Mon 09:47]
:END:

bash: [[: =~ will do regex matching only if the argument <[isn't quoted or is a
variable||something or something]>

****** Drill                                                     :drill:
SCHEDULED: <2020-11-24 Tue>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       9a5a2551-d571-4990-b263-40b49ad7f772
:DRILL_LAST_INTERVAL: 193.3322
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.001
:DRILL_EASE: 2.62
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-05-15 Fri 11:50]
:END:

sh: [[: <[-eq]> does <[integer comparisons]>

****** Drill                                                     :drill:
SCHEDULED: <2022-01-05 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       3068f71c-eebd-4979-bbd8-9d87465ad118
:DRILL_LAST_INTERVAL: 563.3436
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.727
:DRILL_EASE: 2.32
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-06-21 Sun 13:55]
:END:

sh: [[: <[= and ==||... and ...]> do <[string comparisons]>

**** GNU ~ls~ Colors
***** Drill                                                       :drill:
SCHEDULED: <2021-02-05 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       98648342-DBBE-4577-A854-C79A42A692C0
:DRILL_LAST_INTERVAL: 200.3943
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.62
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-07-20 Mon 11:36]
:END:

cmd: gnu: <[dircolors]> is the command that generates the <[LS_COLORS
variable for ls]>

**** shebang ~#!~

We all know that on UNIX systems the shebang is used by the kernel to choose which interpreter to
use for reading and executing the file. You can see an example of this in [[https://elixir.bootlin.com/linux/latest/source/fs/binfmt_script.c#L17][fs/binfmt_script.c]].

However another little known fact is that most shells will try and execute a
file if it couldn't be executed by the kernel and if it looks like a text file.
(https://stackoverflow.com/a/25202821)

***** Drill                                                       :drill:
SCHEDULED: <2020-12-13 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       0E63ECF8-3011-46D4-B71E-786DD7285469
:DRILL_LAST_INTERVAL: 75.4944
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 15
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.866
:DRILL_EASE: 2.58
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-09-29 Tue 14:19]
:END:

sh: Most shells will <[execute text files]> even if <[they don't
have a shebang]>

**** Variables Expansion
***** Drill :drill:
SCHEDULED: <2021-08-18 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       2928364E-7518-4F78-B9BA-70622979134F
:DRILL_LAST_INTERVAL: 542.4023
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.38
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-02-23 Sun 16:06]
:END:

sh: <[${array:offset:length}]> is the syntax used to <[access a subset of an array]>

*** Terminal
**** Capabilities

Terminal capabilities describe the features a particular terminal
supports, such as colors, italics, and others.  They are determined by
their associated terminfo databases on Linux and termcap databases on
BSD systems.

On Linux you can use the ~infocmp~ command to show the different
capabilities a terminal supports. By default it will print the
capabilites about the current ~$TERM~.

Example:

#+BEGIN_SRC
$ infocmp
#       Reconstructed via infocmp from file: /home/me/.terminfo/t/tmux-24bit
tmux-24bit|tmux with 24-bit direct color mode,
        am, hs, km, mir, msgr, xenl,
        colors#0x100, cols#80, it#8, lines#24, pairs#0x10000,
[...]
#+END_SRC

Be mindful that some capabilities won't appear for reasons unknown to
me (eg. ~setb24~ and ~setf24~ in the following example).

You can also do diffs with ~infocmp -d~.

You can easily extend the capabilities of a terminal by creating your
own .terminfo that sources the one you want to extend.

Here's an example of my own extension of ~tmux-256color~ that enables 24bit colors in tmux and emacs:

#+BEGIN_SRC
$ cat tmux-24bit.terminfo
tmux-24bit|tmux with 24-bit direct color mode,
   use=tmux-256color,
# True colors for emacs
# https://www.gnu.org/software/emacs/manual/html_mono/efaq.html#Colors-on-a-TTY
   setb24=\E[48;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&%d;%p1%{255}%&%dm,
   setf24=\E[38;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&%d;%p1%{255}%&%dm,
# True colors for Tmux
# https://gist.github.com/XVilka/8346728#gistcomment-2110619
# https://github.com/tmux/tmux/blob/018f1b8a803f15910781dc9894fbd168cfa50943/tty-term.c#L570
# Needed for nested tmux too!
   Tc,
   RGB,
#+END_SRC

You then compile that terminfo like so:

#+BEGIN_SRC sh
$ tic -x -o ~/.terminfo tmux-24bit.terminfo
#+END_SRC

***** infocmp                                                     :drill:
SCHEDULED: <2021-12-28 Tue>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       6E7B954C-1CE7-4C8C-B7BD-72C74E5563D3
:DRILL_LAST_INTERVAL: 681.244
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.62
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-02-16 Sun 14:30]
:END:

cmd: unix: <[infocmp]> <[show terminfos]>

***** Drill                                                       :drill:
SCHEDULED: <2022-11-06 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       7A1B2C2A-2BC2-4930-8BCD-B9ADE5C5EDD5
:DRILL_LAST_INTERVAL: 786.888
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.857
:DRILL_EASE: 2.28
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-09-10 Thu 13:49]
:END:

unix: The equivalent of <[terminfo]> on Linux is <[termcap]> on BSD

**** Keys Weirdness

[[https://catern.com/posts/terminal_quirks.html][This awesome article]] talks about the weirdness of terminals and explains why some
keys are equivalent to others.

In a nutshell, in terminals the Ctrl and Shift don't send keycodes on their own,
but they modify the keycodes sent by other characters.

Shift clears the 6th bit, so typing ~i~ would send ~0o151~ and ~Shift + i~ would
send ~0o111~ which is the code for the ascii character ~I~.

Ctrl clears the 6th and 7th bit of the ascii character. So ~i~ would send
~0o151~ and ~Ctrl + i~ would send ~0o011~ which is ~TAB~.

So ~Ctrl + i~, ~Ctrl + Shift + i~ and ~TAB~ are all equivalent!

Of course there's some exceptions .... this only happens for alphanumeric
characters. Also ~Ctrl + Shift + ?~ sends ~DEL~.

FIXME why does Emacs detect ~C-j~ rather than ~linefeed~? My guess is
that it cheats and internally predicts that you typed ~linefeed~ by
typing ~C-j~.

***** Drill :drill:
SCHEDULED: <2022-03-15 Tue>
:PROPERTIES:
:ID:       B3CCFB43-9B95-4289-BB55-3AE6CE0D0666
:DRILL_LAST_INTERVAL: 749.5807
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.667
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-02-24 Mon 12:57]
:END:

unix: In terminals, pressing the <[ctrl key]> doesn't send a keycode but modifies the
keycodes sent

***** Drill :drill:
SCHEDULED: <2021-07-04 Sun>
:PROPERTIES:
:ID:       189D0F15-89C6-44A9-AEE5-D50133A3D58C
:DRILL_CARD_TYPE: show1cloze
:DRILL_LAST_INTERVAL: 573.1383
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2019-12-09 Mon 10:17]
:END:

unix: Typing <[~Ctrl + [~]> in a terminal actually sends the <[~ESC~]> character

***** Drill :drill:
SCHEDULED: <2020-12-03 Thu>
:PROPERTIES:
:ID:       17A5C222-EA3E-4895-8DAF-5E97B2C635ED
:DRILL_LAST_INTERVAL: 404.5962
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.38
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2019-10-25 Fri 13:04]
:END:

unix: In terminals, the Ctrl key actually clears the <[6th and 7th]>
bits of the alphanumeric character pressed with

** Valgrind
*** vgdb

Valgrind incorporates a gdb server that allows one to debug a program and refine
his search of undefined behavior or memory leaks.

In order to use this you should run valgrind on your program with the following
arguments: ~--vgdb=yes --vgdb-error=0~

Example:
#+BEGIN_SRC
$ valgrind --leak-check=full --show-leak-kinds=all --vgdb=yes --vgdb-error=0 ./test
==58713== Memcheck, a memory error detector
==58713== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==58713== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==58713== Command: ./test
==58713==
==58713== (action at startup) vgdb me ...
==58713==
==58713== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==58713==   /path/to/gdb ./test
==58713== and then give GDB the following command
==58713==   target remote | vgdb --pid=58713
==58713== --pid is optional if only one valgrind process is running
==58713==
#+END_SRC

In another terminal, run gdb as follows:

#+BEGIN_SRC
$ gdb ./test
[...]
(gdb) target remote | vgdb
Remote debugging using | vgdb
relaying data between gdb and process 58713
0x0000000100012000 in ?? ()
#+END_SRC

You can now continue the program, add breakpoints, step and stuff, just like
in good ol' gdb.

What valgrind add, is a command: ~monitor~. With this command you can query
valgrind about a lot of things.

For example you can use ~monitor leak_check reachable any~ to show any reachable
or lost allocation:
#+BEGIN_SRC
(gdb) monitor leak_check reachable any
==61216== 1 bytes in 1 blocks are still reachable in loss record 1 of 43
[...]
==61216==    by 0x1000012D9: main (main.c:122)
==61216==
==61216== 12 bytes in 1 blocks are still reachable in loss record 2 of 43
[...]
==61216==    by 0x1000012D9: main (main.c:122)
==61216==
==61216== LEAK SUMMARY:
==61216==    definitely lost: 0 bytes in 0 blocks
==61216==    indirectly lost: 0 bytes in 0 blocks
==61216==      possibly lost: 0 bytes in 0 blocks
==61216==    still reachable: 13 bytes in 2 blocks
==61216==         suppressed: 18,193 bytes in 158 blocks
#+END_SRC

You can also show information about the allocations with ~monitor block_list
<num>~ (the number being one of the "loss record <num> of ..."):
#+BEGIN_SRC
(gdb) monitor block_list 1
==61216== 1 bytes in 1 blocks are still reachable in loss record 1 of 43
[...]
==61216==    by 0x1000012D9: main (main.c:122)
==61216== 0x100B65CD0[1]
#+END_SRC

~0x100B65CD0~ is the address of the block that was allocated. Since it is still
reachable you can ask valgrind to tell us who still points to this address with
~monitor who_points_at <address>~:
#+BEGIN_SRC
(gdb) monitor who_points_at 0x100B65CD0
==61216== Searching for pointers to 0x100b65cd0
==61216== *0x1000032a8 points at 0x100b65cd0
 Address 0x1000032a8 is in the Data segment of ./test
#+END_SRC

And with gdb you can possible find the variable behind this address with ~info
symbol <address>~:
#+BEGIN_SRC
(gdb) info symbol 0x1000032a8
my_function.my_static + 24 in section .bss of test
#+END_SRC

** Vulnerabilities
*** https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-14287

In Sudo before 1.8.28, an attacker with access to a Runas ALL sudoer account can
bypass certain policy blacklists and session PAM modules, and can cause
incorrect logging, by invoking sudo with a crafted user ID. For example, this
allows bypass of !root configuration, and USER= logging, for a "sudo -u
\#$((0xffffffff))" command.

** Vim
# *** =[{=                                                            :drill:
# SCHEDULED: <2020-08-20 Thu>
# :PROPERTIES:
# :DRILL_CARD_TYPE: show1cloze
# :DRILL_LAST_INTERVAL: 171.2451
# :DRILL_REPEATS_SINCE_FAIL: 6
# :DRILL_TOTAL_REPEATS: 5
# :DRILL_FAILURE_COUNT: 0
# :DRILL_AVERAGE_QUALITY: 4.0
# :DRILL_EASE: 2.46
# :DRILL_LAST_QUALITY: 4
# :DRILL_LAST_REVIEWED: [2020-03-02 Mon 10:51]
# :ID:       322fe210-dbdd-4c98-95e8-60fda3c4ab12
# :END:

# vim: <[Go to the previous unmatched brace]> with <[=[{=]>

# *** =[(=                                                            :drill:
# SCHEDULED: <2020-08-15 Sat>
# :PROPERTIES:
# :DRILL_CARD_TYPE: show1cloze
# :ID:       2e5d6dd9-972f-44d2-b9f8-9c1fb7b9b9c6
# :DRILL_LAST_INTERVAL: 165.8295
# :DRILL_REPEATS_SINCE_FAIL: 6
# :DRILL_TOTAL_REPEATS: 5
# :DRILL_FAILURE_COUNT: 0
# :DRILL_AVERAGE_QUALITY: 3.8
# :DRILL_EASE: 2.32
# :DRILL_LAST_QUALITY: 3
# :DRILL_LAST_REVIEWED: [2020-03-02 Mon 10:51]
# :END:

# vim: <[Go to the previous unmatched parenthesis]> with <[=[(=]>

# *** =]}=                                                            :drill:
# SCHEDULED: <2020-08-20 Thu>
# :PROPERTIES:
# :DRILL_CARD_TYPE: show1cloze
# :ID:       22acd773-9f32-4b1f-b6cb-fed6788664bc
# :DRILL_LAST_INTERVAL: 171.2451
# :DRILL_REPEATS_SINCE_FAIL: 6
# :DRILL_TOTAL_REPEATS: 5
# :DRILL_FAILURE_COUNT: 0
# :DRILL_AVERAGE_QUALITY: 4.0
# :DRILL_EASE: 2.46
# :DRILL_LAST_QUALITY: 4
# :DRILL_LAST_REVIEWED: [2020-03-02 Mon 10:51]
# :END:

# vim: <[Go to the next unmatched brace]> with <[=]}=]>

# *** =])=                                                            :drill:
# SCHEDULED: <2020-08-15 Sat>
# :PROPERTIES:
# :DRILL_CARD_TYPE: show1cloze
# :ID:       09a9727c-c672-41a1-beb0-1133cbace928
# :DRILL_LAST_INTERVAL: 165.8295
# :DRILL_REPEATS_SINCE_FAIL: 6
# :DRILL_TOTAL_REPEATS: 5
# :DRILL_FAILURE_COUNT: 0
# :DRILL_AVERAGE_QUALITY: 3.8
# :DRILL_EASE: 2.32
# :DRILL_LAST_QUALITY: 3
# :DRILL_LAST_REVIEWED: [2020-03-02 Mon 10:51]
# :END:

# vim: <[Go to the next unmatched parenthesis]> with <[=])=]>

*** Format with =gq= or =gw=                                        :drill:
SCHEDULED: <2020-10-17 Sat>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       2c347cd8-3c66-41b7-974e-32331677a69d
:DRILL_LAST_INTERVAL: 228.688
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.4
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-03-02 Mon 10:51]
:END:

vim: <[Format]> with <[gq or gw||X or Y]>

*** =gq= vs =gw=                                                    :drill:
SCHEDULED: <2021-02-10 Wed>
:PROPERTIES:
:ID:       e84bae63-2a13-4fb5-bc98-abba2abf1495
:DRILL_LAST_INTERVAL: 220.7824
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.1
:DRILL_EASE: 2.72
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-07-04 Sat 09:20]
:END:

vim: The difference between =gq= and =gw= is that
<[=gw= doesn't move the cursor]>

*** Searching Forward the Whole Word Under of After the Cursor      :drill:
SCHEDULED: <2021-08-05 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       7DD35A8F-86CC-4921-AE95-6F9EFADCC19C
:DRILL_LAST_INTERVAL: 485.14
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-04-07 Tue 14:39]
:END:

vim: <[*Search forward* for the *word under the cursor*]> with <[*]>

*** Searching Backward the Whole Word Under of After the Cursor     :drill:
SCHEDULED: <2021-08-28 Sat>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       ED9EB330-76CA-4FFA-9EB5-9C4E94B98D95
:DRILL_LAST_INTERVAL: 392.8059
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.455
:DRILL_EASE: 1.9
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-07-31 Fri 12:49]
:END:

vim: <[*Search Backward* for the *word under the cursor*]> with <[#]>

*** Selecting the last selection

What if I told you that in Vim (and emulators) you could *reselect your last
selection*?!  Just hit ~gv~ to get that fleeting selection.

**** Drill                                                         :drill:
SCHEDULED: <2021-07-12 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       5929EA62-8D77-49BD-8053-72DD79A50921
:DRILL_LAST_INTERVAL: 584.5669
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2019-12-05 Thu 14:06]
:END:

vim: <[Reselect your last selection]> with <[gv]>

*** Selecting the search matches

In Vim you can select the search with the keys ~gn~.
If your cursor is on the match, ~gn~ will select it.
If your cursor isn't on the match or if there's already a selection, ~gn~ will
select the next match.

~gN~ behaves the same but backward.

* Learning
** How To Get Started With Anything
:PROPERTIES:
:SOURCE: http://rs.io/how-to-get-started-with-anything/
:END:

*** How to get started with anything?                               :drill:
SCHEDULED: <2021-04-18 Sun>
:PROPERTIES:
:ID:       855d616e-e985-450c-bd8a-4d36435fa5e5
:DRILL_LAST_INTERVAL: 264.3774
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 17
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.589
:DRILL_EASE: 1.92
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-07-28 Tue 08:23]
:END:

How to get started with anything?

**** Answer

1. Try the dumbest thing that could work
2. Start experimenting as soon as possible

** The Feynman Technique
*** Drill                                                           :drill:
SCHEDULED: <2020-12-11 Fri>
:PROPERTIES:
:ID:       eaea7b24-1b56-4af8-8e4e-4ce4e23542d4
:DRILL_LAST_INTERVAL: 240.5283
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 16
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.687
:DRILL_EASE: 2.16
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-04-14 Tue 13:19]
:END:

The Feynman Technique:
<[- Study a topic]>
<[- Explain it in simple terms]>
<[- Find and fill the gaps in your knowledge]>
<[- Review and simplify]>

** SRS
*** Effective Learning: Twenty Rules of Formulating Knowledge
:PROPERTIES:
:SOURCE: https://www.supermemo.com/en/archives1990-2015/articles/20rules
:END:

**** Memorize After Understanding                                  :drill:
SCHEDULED: <2020-12-29 Tue>
:PROPERTIES:
:ID:       ef861f31-9a54-4b8b-ab9a-bf5c7f85ac02
:DRILL_LAST_INTERVAL: 269.5956
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.428
:DRILL_EASE: 1.9
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-04-03 Fri 08:12]
:END:

srs: best practice: *Memorize* only if you *Understand*

**** Memorize After Getting an Overall Picture                     :drill:
SCHEDULED: <2020-11-29 Sun>
:PROPERTIES:
:ID:       2b0de45d-6568-4743-b677-e6ae27992edc
:DRILL_LAST_INTERVAL: 181.7633
:DRILL_REPEATS_SINCE_FAIL: 9
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 2.9
:DRILL_EASE: 1.24
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-05-31 Sun 11:52]
:END:

srs: best practice: Get an *Overall Picture* before *Memorizing*

**** Memorize the Basics                                           :drill:
SCHEDULED: <2021-09-11 Sat>
:PROPERTIES:
:ID:       e03e167f-9697-48e8-a3bd-2b38a94ed3cc
:DRILL_LAST_INTERVAL: 409.0833
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.285
:DRILL_EASE: 1.8
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-07-29 Wed 15:32]
:END:

srs: best practice: *Memorize* the *Basics*

**** Make Simple Cards                                             :drill:
SCHEDULED: <2020-12-29 Tue>
:PROPERTIES:
:ID:       fd678316-c1cb-4c9e-b996-704b6daf6cc4
:DRILL_LAST_INTERVAL: 269.5956
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.428
:DRILL_EASE: 1.9
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-04-03 Fri 08:12]
:END:

srs: best practice: Make *Simple* cards

**** Use Images                                                    :drill:
SCHEDULED: <2020-10-19 Mon>
:PROPERTIES:
:ID:       48fb8184-a1d6-42c0-a016-2a8e699c1ada
:DRILL_LAST_INTERVAL: 20.042
:DRILL_REPEATS_SINCE_FAIL: 15
:DRILL_TOTAL_REPEATS: 59
:DRILL_FAILURE_COUNT: 9
:DRILL_AVERAGE_QUALITY: 2.88
:DRILL_EASE: 1.3
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-09-29 Tue 14:20]
:END:

srs: best practice: Use *Images*

**** Use Mnemonic Techniques                                 :drill:leech:
:PROPERTIES:
:ID:       5918276c-f34c-4199-83b1-1fc71763b0b2
:DRILL_LAST_INTERVAL: 0.0
:DRILL_REPEATS_SINCE_FAIL: 1
:DRILL_TOTAL_REPEATS: 54
:DRILL_FAILURE_COUNT: 16
:DRILL_AVERAGE_QUALITY: 2.741
:DRILL_EASE: 1.3
:DRILL_LAST_QUALITY: 2
:DRILL_LAST_REVIEWED: [2019-12-31 Tue 10:34]
:END:

srs: best practice: Use *Mnemonic Techniques*

**** Use Graphic Deletion                                          :drill:
SCHEDULED: <2020-11-04 Wed>
:PROPERTIES:
:ID:       298e6279-44c1-4327-be5f-23384484f1a5
:DRILL_LAST_INTERVAL: 71.0611
:DRILL_REPEATS_SINCE_FAIL: 21
:DRILL_TOTAL_REPEATS: 35
:DRILL_FAILURE_COUNT: 4
:DRILL_AVERAGE_QUALITY: 2.887
:DRILL_EASE: 1.16
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-08-25 Tue 11:49]
:END:

srs: best practice: Use *Graphic Deletion*

**** Avoid Sets and Enumerations                                   :drill:
SCHEDULED: <2020-12-20 Sun>
:PROPERTIES:
:ID:       9d188185-9f08-4e01-92a1-566a4c29723b
:DRILL_LAST_INTERVAL: 261.082
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.285
:DRILL_EASE: 1.76
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-04-03 Fri 08:11]
:END:

srs: best practice: Avoid *Sets* and *Enumerations* but use *Enumerations* if
you really have to

**** Detect and Remove Interfering Cards                           :drill:
SCHEDULED: <2020-12-20 Sun>
:PROPERTIES:
:ID:       6bfda1c0-f4b7-4abf-8113-09a0b70f9b4b
:DRILL_LAST_INTERVAL: 261.082
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.285
:DRILL_EASE: 1.76
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-04-03 Fri 08:12]
:END:

srs: best practice: *Detect and Remove* *Interfering* cards

**** Add Context Cues                                              :drill:
SCHEDULED: <2021-09-04 Sat>
:PROPERTIES:
:ID:       6ce82bdb-a64f-41c2-83de-ca299781281f
:DRILL_LAST_INTERVAL: 525.7794
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.667
:DRILL_EASE: 2.86
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2020-03-27 Fri 08:13]
:END:

srs: best practice: Add *Context Cues*

**** Add Sources                                                   :drill:
SCHEDULED: <2022-02-13 Sun>
:PROPERTIES:
:ID:       8bd52a85-cce2-4755-8ce4-04c3d8bd9a95
:DRILL_LAST_INTERVAL: 535.6928
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.714
:DRILL_EASE: 2.14
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-08-26 Wed 11:56]
:END:

srs: best practice: Add *Sources*

*** Effective Study Skills for College Students: “Why?” Questions
:PROPERTIES:
:SOURCE: http://rs.io/effective-study-skills-for-college-students-why-questions/
:END:

**** Why Cards                                                     :drill:
SCHEDULED: <2020-10-11 Sun>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       c8e432fe-4b6a-42e5-bd6a-c7dc2672ff3c
:DRILL_LAST_INTERVAL: 14.3001
:DRILL_REPEATS_SINCE_FAIL: 10
:DRILL_TOTAL_REPEATS: 32
:DRILL_FAILURE_COUNT: 4
:DRILL_AVERAGE_QUALITY: 2.875
:DRILL_EASE: 1.3
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-09-27 Sun 13:07]
:END:

srs: best practice: Make *Why* or *Because* cards

*** Janki Method
:PROPERTIES:
:SOURCE: http://www.jackkinsella.ie/articles/janki-method-refined
:END:

**** Best Practice Cards                                           :drill:
SCHEDULED: <2021-08-13 Fri>
:PROPERTIES:
:ID:       1155B15A-E783-474E-A7B7-00F03052EA98
:DRILL_LAST_INTERVAL: 494.6704
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-04-05 Sun 15:32]
:END:

janki method: What is his tip about *Best Practices*?

***** Answer

To:
- Make a card
- Fail the card if it hasn't been implemented recently

**** Best Practice Cards and Failing Them                          :drill:
SCHEDULED: <2021-07-06 Tue>
:PROPERTIES:
:ID:       CE00AAE5-D7EF-4623-902B-34BAE633CB92
:DRILL_LAST_INTERVAL: 379.0825
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.428
:DRILL_EASE: 1.9
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-06-22 Mon 11:56]
:END:

srs: best practice: Make *Best Practice* cards and *Fail* them if not
implemented recently

# **** Bolding the Key Point                                         :drill:
# SCHEDULED: <2020-08-18 Tue>
# :PROPERTIES:
# :ID:       3B46BD98-57CA-4C9D-BFD9-438782FD332B
# :DRILL_LAST_INTERVAL: 240.6261
# :DRILL_REPEATS_SINCE_FAIL: 7
# :DRILL_TOTAL_REPEATS: 6
# :DRILL_FAILURE_COUNT: 0
# :DRILL_AVERAGE_QUALITY: 3.5
# :DRILL_EASE: 2.08
# :DRILL_LAST_QUALITY: 3
# :DRILL_LAST_REVIEWED: [2019-12-21 Sat 13:24]
# :END:

# janki method: Why does he bold the key point in a card?

# ***** Answer

# Because:
# - It helps reduce the review time

**** Bolding the Key Point                                         :drill:
SCHEDULED: <2020-10-22 Thu>
:PROPERTIES:
:ID:       B003AA0B-5299-472F-B2C9-88C9FC660792
:DRILL_LAST_INTERVAL: 221.0818
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.143
:DRILL_EASE: 1.66
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-03-15 Sun 15:35]
:END:

srs: best practice: *Bolding* the key point

**** Brainstorming about a Card Use or Deleting it                 :drill:
SCHEDULED: <2020-10-22 Thu>
:PROPERTIES:
:ID:       B20A6B8D-6AF4-4483-9DC5-1DB7B4D38DF9
:DRILL_LAST_INTERVAL: 221.0818
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.143
:DRILL_EASE: 1.66
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-03-15 Sun 15:35]
:END:

srs: best practice: *Brainstorming* about a card use and *Deleting* it if
useless

**** Executing Repeatedly Failed Cards in Context                  :drill:
SCHEDULED: <2021-05-29 Sat>
:PROPERTIES:
:ID:       656BE464-85B0-45B4-AB7B-7493A15ABC2E
:DRILL_LAST_INTERVAL: 393.9198
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.62
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2020-04-30 Thu 11:05]
:END:

janki method: *Executing* repeatedly failed cards *In Context* is useful because:

- <[It ensures the cards are correct]>
- <[It helps remembering them more]>

**** Executing Repeatedly Failed Cards in Context                  :drill:
SCHEDULED: <2020-10-15 Thu>
:PROPERTIES:
:ID:       D3336A08-FC17-4F70-B94A-4C450990DC78
:DRILL_LAST_INTERVAL: 214.1563
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 1.52
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-03-15 Sun 15:34]
:END:

srs: best practice: *Executing* repeatedly failed cards *In Context*

# **** Making Cards after Reading the Material                       :drill:
# SCHEDULED: <2020-10-15 Thu>
# :PROPERTIES:
# :ID:       9D89A14A-8010-459F-BAB1-AE115E4B585F
# :DRILL_LAST_INTERVAL: 214.1563
# :DRILL_REPEATS_SINCE_FAIL: 8
# :DRILL_TOTAL_REPEATS: 7
# :DRILL_FAILURE_COUNT: 0
# :DRILL_AVERAGE_QUALITY: 3.0
# :DRILL_EASE: 1.52
# :DRILL_LAST_QUALITY: 3
# :DRILL_LAST_REVIEWED: [2020-03-15 Sun 15:35]
# :END:

# srs: best practice: Make cards *after* reading the material

**** Puzzle Cards and Methodology                                  :drill:
SCHEDULED: <2020-10-06 Tue>
:PROPERTIES:
:ID:       14C095DD-0797-44F6-915B-495F4B1C214C
:DRILL_LAST_INTERVAL: 23.6933
:DRILL_REPEATS_SINCE_FAIL: 16
:DRILL_TOTAL_REPEATS: 71
:DRILL_FAILURE_COUNT: 13
:DRILL_AVERAGE_QUALITY: 2.832
:DRILL_EASE: 1.3
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-09-12 Sat 13:34]
:END:

srs: best practice: Make *Puzzle* cards with the methodology in the answer

**** Recurring Patterns Cards                                      :drill:
SCHEDULED: <2020-10-24 Sat>
:PROPERTIES:
:ID:       A9660CA6-5FC6-4A62-A0F2-280352BEC00B
:DRILL_LAST_INTERVAL: 27.1683
:DRILL_REPEATS_SINCE_FAIL: 16
:DRILL_TOTAL_REPEATS: 42
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 2.978
:DRILL_EASE: 1.3
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-09-27 Sun 13:07]
:END:

srs: best practice: Make *Recurring Patterns* cards

**** Shallow Technology Knowledge                                  :drill:
SCHEDULED: <2020-10-15 Thu>
:PROPERTIES:
:ID:       A321283F-AA47-4DD9-9FF8-A51F09CB78C8
:DRILL_LAST_INTERVAL: 214.1563
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 1.52
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-03-15 Sun 15:34]
:END:

srs: best practice: Put on hold *Shallow Technology Knowledge* until later use

** Best Practice: Develop Insights                                   :drill:
SCHEDULED: <2021-07-25 Sun>
:PROPERTIES:
:ID:       1a61e78d-5698-45a1-9b3a-d3466b71bc4b
:DRILL_LAST_INTERVAL: 299.5443
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.143
:DRILL_EASE: 1.66
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-09-28 Mon 10:47]
:END:

study: best practice: Develop Insights for every technical item learned

** Math
*** Best Practice: Recreate Proofs                                  :drill:
SCHEDULED: <2021-03-22 Mon>
:PROPERTIES:
:ID:       4fdcb49a-73b8-4d26-a26f-a73382a05681
:DRILL_LAST_INTERVAL: 223.617
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 1.52
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-08-10 Mon 12:16]
:END:

study: best practice: Recreate every Proofs learned

* Readings and Watchings
** AI DL ML
*** DONE Emil’s Story as a Self-Taught AI Researcher
:PROPERTIES:
:Source: https://blog.floydhub.com/emils-story-as-a-self-taught-ai-researcher/
:Source+: https://news.ycombinator.com/item?id=22101066
:DONE:
*** DONE GDC 2018: John McDonald (Valve) - Using Deep Learning to Combat Cheating in CSGO
:PROPERTIES:
:Source: https://youtu.be/ObhK8lUfIlc
:END:
** Algo
*** DONE https://lemire.me/blog/2019/09/14/speeding-up-independent-binary-searches-by-interleaving-them/
*** DONE http://blog.ezyang.com/2012/03/you-could-have-invented-fractional-cascading/
** Assembly
*** DONE  https://www.nayuki.io/page/a-fundamental-introduction-to-x86-assembly-programming
** Biology
*** DONE Doctor Dissects the Wim Hof Method - Cold Hard Science Analysis
:PROPERTIES:
:Source: https://www.youtube.com/watch?v=D6EPuUdIC1E
:END:

- Probable benefits:
  - Short term effects on immune system
  - Mental health
  - Stress
  - Sleep
  - Willpower
  - Arthritis relief (inflammatory)

- Possible benefits:
  - Energy
  - Workout recovery
  - Concentration
  - Arthritis relief (wear and tear)

- No evidence:
  - Long term effects on immune system
  - Sports performance
  - Creativity
  - Parkinson's

- Probably works via "good" stress
- Similar to meditation and some breathing thechniques, which have sound
  evidences
- Cold exposure "primed" with breathing is most likely what helps
- Unclear how long effects last
- Potential for placebo, but still helpful
- /!\ Not to be done while in water, because there is a risk of loss
  consciousness and drowning

**** CANCELLED https://www.goodreads.com/book/show/33538300-the-way-of-the-iceman The Way of The Iceman: How The Wim Hof Method Creates Radiant Longterm Health--Using The Science and Secrets of Breath Control, Cold-Training and Commitment
**** CANCELLED https://www.goodreads.com/book/show/30039048-what-doesn-t-kill-us What Doesn't Kill Us: How Freezing Water, Extreme Altitude and Environmental Conditioning will Renew our Lost Evolutionary Strength
**** CANCELLED https://www.goodreads.com/book/show/26533127-the-oxygen-advantage The Oxygen Advantage: The Simple, Scientifically Proven Breathing Techniques for a Healthier, Slimmer, Faster, and Fitter You
*** DONE How to Slow Aging (and even reverse it)
:PROPERTIES:
:Source: https://www.youtube.com/watch?v=QRt7LjqJ45k
:END:

Aging seems to be linked to deteriorated epigenome.

What could slow down aging:
- Eat less (fasting)
- Eat less proteins
- Sport
- Be uncomfortably cold
- Be uncomfortably hot

*** DONE 5-MeO-DMT: The 20-Minute Psychoactive Toad Experience That’s Transforming Lives
:PROPERTIES:
:Source: https://www.forbes.com/sites/davidcarpenter/2020/02/02/5-meo-dmt-the-20-minute-psychoactive-toad-experience-thats-transforming-lives/
:Source+: https://news.ycombinator.com/item?id=22218645
:END:
** Books
*** DONE Ansible for Devops
*** DONE An Introduction to Programming in Emacs Lisp
*** DONE Before 8am The Miracle Morning - Hal Elrod
**** The Miracle Morning
***** Introduction

The author tells his story, about his great life and then about a
terrific accident and how he didn't let this affect him and was even
more successful after that. A second event in his life -- us economic
depression, debt, depression -- was overcome with the /Miracle Morning/.

***** It's Time To Wake Up To Your FULL Potential

#+BEGIN_QUOTE
As bestselling author, Seth Godin has so eloquently put it, "Is there
a difference between average and mediocre? Not so much."
#+END_QUOTE

- Miracle Morning = Life changing
- More and better of everything
- Early rise?

  # Too much blabla, still don't know what it is.

***** The Miracle Morning: Born Out of Desperation

The /Miracle Morning/ is about:

- Waking up early
- Personal development
- Bootstrapping an energized day

The author recollects how waking up one morning at 5am re-motivated him.
He even woke up at 4am then and felt even better.

***** The 95% Reality Check

Mediocrity

Stats: 95% of the Americans are mediocre (not financially secure or dead
...).

# Money once again ...

#+BEGIN_QUOTE
Being average means to settle for less than you truly want and are
capable of, and to struggle for your entire life.
#+END_QUOTE

- Acknowledge our mediocre status

- Identify the causes of mediocrity:

  - Rear-view Mirror Syndrome (RMS): who we were is who we are

  - Life of purpose

  - Isolating incidents: > T. Harv Eker said in his best-selling book
    Secrets of the Millionaire Mind, "How you do > anything is how you
    do everything."

    #+BEGIN_QUOTE
    Every time you choose to do the easy thing, instead of the right
    thing, you are shaping your identity, becoming the type of person
    who does what's easy, rather than what's right.
    #+END_QUOTE

  - Lack of accountability (someone holds you accountable of your
    actions, hence success)

  - Mediocre circle of influence

  - Lack of personal development:

    #+BEGIN_QUOTE
    In my opinion, none was greater than the idea that our levels of success
    will rarely exceed our level of personal development, because success is
    something we attract by who we become.
    #+END_QUOTE

  - Lack of urgency (life will work itself out)

- Draw your line in the sand: Decide /now/ what you are going to start
  doing differently from now on!

***** Why Did YOU Wake Up This Morning?

How much sleep do we really need? Author seems to say studies and
experts contradict themselves and aren't [missing end of sentence].

/Miracle Morning/ is about deciding how energized you are going to wake
up no matter how much you slept.

***** The 5-Set Snooze-Proof Wake Up Strategy

Snooze-Proof Wake up Strategy:

- Set your intentions before bed (Last thought before before bed = first
  thought in the morning)
- Move your alarm clock across the room (Movement)
- Brush your teeth (Movement?)
- Drink a full glass of water (hydration fights tiredness)
- Get dressed or jump in the shower (Movement?)

Wake Up Bonus Tips:

- Bedtime affirmations
- Bedroom lights timer
- Bedroom heater timer
- MyWakeUPCall

***** The Life S.A.V.E.R.S.

****** S for Silence

Purposeful Silence example:

- Meditation (Silencing or focusing the mind for a period of time)
- Prayer
- Reflection
- Deep Breathing
- Gratitude

Meditation process:

- Prepare your mindset
- Find a quiet, comfortable place to site
- Sit upright, cross-legged
- Focus on your breath
- "Just /being/" (No thinking)
- Repeat basic phrases as you breath (Stops thinking)

****** A for Affirmations

#+BEGIN_QUOTE
  As Henry Ford said, "Whether you think you can, or you think you
  can't, you're right either way."
#+END_QUOTE

How to create your own affirmations:

1. What you really want
2. Why you want it
3. Whom you are committed to /being/ to create it
4. What you're committed to /doing/ to attain it
5. Add inspirational quotes and philosophies

****** V for Visualization

Tips:

1. Get Ready (Music? Position? Breathing?)
2. Visualize what you really want (vivid vision):

- Vision of accomplishing
- Vision of accomplished

3. Visualize who you need to be and what you need to do

****** E for Exercise

Author recommends Yoga.

****** R for Reading

Tips:

- Commitment
- Religious books?
- Notes
- Re-Reading

****** S for Scribing

#+BEGIN_QUOTE
Ideas can come from anywhere and at any time. The problem with making
mental notes is that the ink fades very rapidly. -- ROLF SMITH
#+END_QUOTE

Use of Journaling:

- Gain Clarity (More understanding of what you have to write)
- Capture Ideas
- Review Lessons
- Acknowledge You Progress

***** The 6-Minute Miracle

One minute for each "Life SAVERS" item.

***** Customizing Your Miracle Morning

- Wake Up and Start Time (The goal still is to wake up earlier than
  usual for self-improvement)
- Eating:

  - When: Just after the Miracle Morning?
  - Why: More nutritious foods?
  - What: /living foods/? Miracle Morning Smoothie?

- Aligning The Miracle Morning With Your Goals & Dreams
- Overcoming Procrastination: Do the Worst, First
- The Miracle Morning On Weekends
- Keeping Your Miracle Morning Fresh, Fun, and Exciting!

***** From Unbearable To Unstoppable: The Real Secret To Forming Habits That Will Transform Your Life (In 30 Days)

- Habits are essentials
- People fail at New Year's resolutions because they don't have the
  right strategy
- We are addicted to our habits. Change is painful
- You can change any habit in 30 days, if you have the right strategy

30 days - 3 Phases:

1. Unbearable
2. Uncomfortable
3. Unstoppable

The author depicts his story of forming an habit of running in order to
run a ultra-marathon.

***** The Miracle Morning 30-Day Life Transformation Challenge

1. Get the MM 30-Day LTC Fast Start Kit
2. Plan your first miracle morning for tomorrow
3. Read Page-1 of the Fast Start Kit and to the exercises
4. Get and Accountability Partner

***** Let Today Be The Day You Give Up Who You've Been For Who You Can Become

***** An Essential Bonus

Send an email to your close ones in order to get constructive feedback
on yourself.

*** DONE Changez D'Alimentation - Pr Henri Joyeux
- Red wine seems to have interesting health benefits when drunk in low volumes
- French Paradox: French people have low hearth diseases while having a diet
  rich in saturated fats
- The safest cooking method is the vapor cooking one
- The best things to eat are vegetables
- The most nutrient rich and low on pesticides come from the
  "Agriculture Biologique", then comes "Agriculture Raisonné" and finally
  "Agriculture Conventionnelle"
*** DONE Mini Traité de Manipulation
*** DONE The Checklist Manifesto
*** DONE The Hidden Life of Trees: What They Feel, How They Communicate – Discoveries from a Secret World

- Trees have human-like traits such as communication, caring, etc...
- They live better in community with other trees or species
- They contribute immensely to the stability of our planet
- They help carry water to inland fields
- They help capture a lot of CO2

*** DOING How to Become a Straight-A Student: The Unconventional Strategies Real College Students Use to Score High While Studying Less - Cal Newport

Supersedes:
- 10 Steps to Earning Awesome Grades (While Studying Less) https://www.goodreads.com/book/show/24377513-10-steps-to-earning-awesome-grades

**** Part 1. Study Basics

Do not pseudo study (eg. studying in front of the tv). Instead do deep, focused
study sessions. This will require less time and be more efficient.

***** Best Practice: Do Deep Study Sessions                       :drill:
SCHEDULED: <2021-05-16 Sun>
:PROPERTIES:
:ID:       6fd09735-bdda-473d-aded-913a879cd88f
:DRILL_LAST_INTERVAL: 272.4701
:DRILL_REPEATS_SINCE_FAIL: 8
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.285
:DRILL_EASE: 1.76
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-08-17 Mon 11:42]
:END:

study: best practice: Do Deep Study Sessions

***** Step 1 Manage Your Time in Five Minutes a Day

Suggested Method:

Things Needed:
- A Calendar
- A List you can access and edit during the day

Things to Do:
- Each morning:
  - Take the things to remember on yesterday's list and schedule them
    accordingly in the calendar. Either put a to-do on a appropriate date or put
    a reminder some days before.
  - Move the yesterday's to-dos that you didn't complete to new days
    in the calendar.
  - Put two columns on your list of the day:
    - Today's Schedule
    - Things to Remember
  - Examine each items of the current day in the calendar and try to fit them
    realistically in Today's Schedule
  - Try to realistically label each item with a specific time period. Be
    pessimistic about them.
  - Schedule large breaks (eg. not twenty minutes).
  - If possible, end the day at an appropriate hour, you will need to unwind and
    relax before sleep.
  - Reschedule the remaining items in the calendar to later dates.
  - Change the Schedule during the day if anything unexpected comes up, but try
    not to use this as an excuse to procrastinate.
  - Remember: If you complete most items, five days a week, YOU ARE PRODUCTIVE!
- During the day:
  - Write down any new to-dos or scheduled things or change in schedule in the
    Things to Remember column. This is important because it helps you get all
    those new to-dos and deadlines out of your head, as quickly as possible,
    until you properly schedule them with a fresh mind in the morning.

This method is particulary fit for periods of neglect, because you'll both feel
decreased productivity and you'll only need to dump what's in your head in the
calendar to get started.

***** Step 2 Declare War on Procrastination

Anti procrastination helpers:
- Work progress journal:
  - In the morning write in a notebook the most important tasks of the day.
  - In the evening write either "All completed" or why the tasks were not done.
- Good eating and drinking habits:
  - Drink plenty of water
  - Don't drink too much coffee
  - Eat for energy not satisfaction
  - Don't skip meals and have a large breakfast
- Make an event out of the worsts tasks
  - Reward yourself before and after
  - Work on the task in another place if that helps
- Make a habit/routine out of studying:
  - Eg. every morning for one hour
  - Sooner is better because you have more motivation and less chance of being
    hijacked for other "activities"
  - Use these moments to study the same things
- Plan ahead hard days:
  - Lockdown and study hard if the current workload requires it
  - Plan relaxing days before and after these hard days

** C
*** DONE https://web.archive.org/web/20190914105319/https://eli.thegreenplace.net/2013/07/09/library-order-in-static-linking
*** DONE https://wordsandbuttons.online/so_you_think_you_know_c.html https://news.ycombinator.com/item?id=20366940 https://news.ycombinator.com/item?id=12902304
*** DONE https://blogs.oracle.com/linux/the-ksplice-pointer-challenge-v2 https://news.ycombinator.com/item?id=3125891
*** DONE https://multun.net/obscure-c-features.html https://news.ycombinator.com/item?id=20771784
*** DONE https://en.wikipedia.org/wiki/Duff%27s_device
** Cloud
*** DONE Cloud Computing in the Year 2020
:PROPERTIES:
:Source: https://youtu.be/1pBuwKwaHp0
:END:
** Cool Papers
*** A2: Analog Malicious Hardware https://ieeexplore.ieee.org/document/7546493
*** AiR-ViBeR: Exfiltrating Data from Air-Gapped Computers via Covert Surface ViBrAtIoNs https://arxiv.org/abs/2004.06195v1
*** BeatCoin: Leaking Private Keys from Air-Gapped Cryptocurrency Wallets https://arxiv.org/abs/1804.08714
*** Blue Note: How Intentional Acoustic Interference Damages Availability and Integrity in Hard Disk Drives and Operating Systems https://ieeexplore.ieee.org/document/8418653
*** BRIGHTNESS: Leaking Sensitive Data from Air-Gapped Workstations via Screen Brightness https://arxiv.org/abs/2002.01078
*** FORESHADOW: Extracting the Keys to the Intel SGX Kingdom with Transient Out-of-Order Execution https://www.usenix.org/conference/usenixsecurity18/presentation/bulck
*** Foreshadow-NG: Breaking the Virtual Memory Abstraction with Transient Out-of-Order Execution https://foreshadowattack.eu/
*** Lamphone: Real-Time Passive Sound Recoveryfrom Light Bulb Vibrations https://eprint.iacr.org/2020/708
*** MOSQUITO: Covert Ultrasonic Transmissions between Two Air-Gapped Computers using Speaker-to-Speaker Communication https://arxiv.org/abs/1803.03422
*** One&Done: A Single-Decryption EM-Based Attack on OpenSSL’s Constant-Time Blinded RSA https://www.usenix.org/conference/usenixsecurity18/presentation/alam
*** POWER-SUPPLaY: Leaking Data from Air-Gapped Systems by Turning the Power-Supplies Into Speakers https://arxiv.org/abs/2005.00395
*** PowerHammer: Exfiltrating Data from Air-Gapped Computers through Power Lines https://arxiv.org/abs/1804.04014
*** Producing Wrong Data Without Doing Anything Obviously Wrong! https://users.cs.northwestern.edu/~robby/courses/322-2013-spring/mytkowicz-wrong-data.pdf

Seemingly innocent difference, like code layout, can actually have a big impact on performance, hence on profiling.

*** This World of Ours https://www.usenix.org/publications/login-logout/january-2014-login-logout/mickens
*** When Coding Style Survives Compilation: De-anonymizing Programmers from Executable Binaries https://arxiv.org/abs/1512.08546
** Crawling / Scraping
*** DONE Crawling through HTML forms
:PROPERTIES:
:Source: https://webmasters.googleblog.com/2008/04/crawling-through-html-forms.html
:END:
*** DONE Attacked Over Tor
:PROPERTIES:
:Source: https://www.hackerfactor.com/blog/index.php?/archives/762-Attacked-Over-Tor.html
:Source+: https://news.ycombinator.com/item?id=14280084
:END:
** CS
*** DONE https://josephg.com/blog/3-tribes/ https://news.ycombinator.com/item?id=20898251 3 tribes of programming
Math programming
Physics programming
Real world/integration programming
*** TODO https://news.ycombinator.com/item?id=20912718 Philosophy of Computer Science [pdf]
*** https://www.divio.com/blog/documentation/ What nobody tells you about documentation
- Four types of documentations
- Tutorials
- How-tos
- Explanations
- References
*** DONE https://www.youtube.com/watch?v=FvNRlE4E9QQ "Finding bugs without running or even looking at code" by Jay Parlar
- Writing things down more may help uncover some bugs
- https://github.com/AlloyTools/org.alloytools.alloy or https://en.wikipedia.org/wiki/TLA%2B can help with finding models problems
- The Chord protocol was even "broken" with alloy http://www.pamelazave.com/chord.html
*** DONE https://www.youtube.com/watch?v=QyJZzq0v7Z4 Why Isn't Functional Programming the Norm? – Richard Feldman
- Most languages are OO more or less by accident
- The most popular languages are this popular because of either large
  "killer apps", exclusivity, quick upgrade capabality or by marketing.
- FP isn't the norm, but can probably be in the future
*** DONE https://www.youtube.com/watch?v=r-TLSBdHe1A "Performance Matters" by Emery Berger

- Benchmarks should be "stabilized" and weed out external factors in order to be useful/correct!
- https://github.com/ccurtsinger/stabilizer
- Causal profiling is a way to profile programs by guessing by how much the
  program will run faster if a component was optimized.
- https://github.com/plasma-umass/coz

*** DONE https://www.netmeister.org/blog/cs-falsehoods.html https://news.ycombinator.com/item?id=21501720 Falsehoods CS Students (Still) Believe Upon Graduating
*** DONE Ariane 5: Who Dunnit? http://www.inf.ed.ac.uk/teaching/courses/seoc/2008_2009/resources/ariane5.pdf
*** DONE https://daedtech.com/dont-learn-to-code-learn-to-automate/ https://news.ycombinator.com/item?id=21735592
*** DONE http://wiki.c2.com/?ThreeStarProgrammer
*** DONE https://www.youtube.com/watch?v=sK-49uz3lGg The Evolution Of CPU Processing Power Part 1: The Mechanics Of A CPU
*** DONE https://www.youtube.com/watch?v=kvDBJC_akyg The Evolution Of CPU Processing Power Part 2: Rise Of The x86
*** DONE https://www.youtube.com/watch?v=NTLwMgak3Fk The Evolution Of CPU Processing Power Part 3: The Origin Of Modern Operating Systems
*** DONE Things I Believe About Software Engineering
:PROPERTIES:
:Source: https://blog.wesleyac.com/posts/engineering-beliefs
:Source+: https://news.ycombinator.com/item?id=22222137
:END:
*** DONE Reading postmortems
:PROPERTIES:
:Source: https://danluu.com/postmortem-lessons/
:Source+: https://news.ycombinator.com/item?id=10090806
:END:

A lot of large outages are caused by:

- Improper/incomplete error handling
- Configuration error
- Hardware error
- Human error
- Incomplete monitoring

*** DONE Most tech content is bullshit
  :PROPERTIES:
  :Source: https://www.aleksandra.codes/tech-content-consumer
  :Source+: https://news.ycombinator.com/item?id=23448489
  :END:

  We should stop consuming tech content because it's very likely that it's full
  BS.
  It's much more empowering to create, learn, and analyze solutions on our own.
  Also a good solution is to read books. They contain thoughtful and curated
  content.

*** DONE Lots of people make the mistake of thinking there's only two vectors you can go to improve performance, high or wide.
:PROPERTIES:
:Source: https://news.ycombinator.com/item?id=8902739
:END:

An interesting comment on how someone managed to solve large problems, that at first were thought to
need distributed computing to be solved, with only a single or a few desktop machines.

His take on the subject of distributed computing and solving large problems is that you can go
higher, by giving more resources to a machine, go wider, by using distributed computing, or go
deeper, by using better algorithms and data structures. He solved some problems by going deeper and
then higher when he needed to scale more.

** Data Science
*** DONE My Journey: From Psych Grad to VP of Data Science at Lazada
:PROPERTIES:
:Source: https://eugeneyan.com/2020/02/28/psych-grad-to-vp-data-science/
:Source+: https://news.ycombinator.com/item?id=22456810
:END:
** Debugging
*** DONE The case of the missing DNS packets: a Google Cloud support story
:PROPERTIES:
:Source: https://cloud.google.com/blog/topics/inside-google-cloud/google-cloud-support-engineer-solves-a-tough-dns-case
:Source+: https://news.ycombinator.com/item?id=23235995
:END:
** Engineering
*** DONE I could do that in a weekend!
:PROPERTIES:
:Source: https://danluu.com/sounds-easy/
:Source+: https://news.ycombinator.com/item?id=23019816
:END:

Making a successful product is a lot harder than it might look at first.
Past the MVP you need to take care of i18n, reliability, performance and
security.
A lot of the problems are open-research problems, which is obviously
non-trivial.

** Enterprise
*** DONE Just some red flags. No big deal. Just ignore them.
:PROPERTIES:
:Source: https://rachelbythebay.com/w/2020/05/22/boarded/
:Source+: https://news.ycombinator.com/item?id=23280610
:END:
*** DONE Does competitive programming affect pay scales?
:PROPERTIES:
:Source: https://www.quora.com/Does-competitive-programming-affect-pay-scales/answer/Duncan-Smith-23
:Source+:
:END:

Competitive Programming should mostly affect entry-level pay. Later in one's
career the raises are more likely to reflect real-world performance.

*** DONE Developer Interviews are Broken, and You Can't Fix It
:PROPERTIES:
:Source: http://www.gayle.com/blog/2015/6/10/developer-interviews-are-broken-and-you-cant-fix-it
:END:
*** DONE Just Too Efficient
:PROPERTIES:
:Source: https://www.tbray.org/ongoing/When/202x/2020/07/05/Too-Efficient
:Source+: https://news.ycombinator.com/item?id=23809291
:END:
** Erlang
*** The Zen of Erlang
*** DONE The Zen of Erlang
:PROPERTIES:
:Source: https://ferd.ca/the-zen-of-erlang.html
:Source+: https://youtu.be/4ZIPijEqrNI
:Source+: https://news.ycombinator.com/item?id=11058500
:Source+: https://news.ycombinator.com/item?id=17100626
:Source+: https://news.ycombinator.com/item?id=23888497
:END:

Erlang is designed around lightweight processes for which you declarativaly describe their
dependencies between each others.
Once you make the connections clear, you can then let them crash and be restarted.

** Files
*** DONE https://danluu.com/deconstruct-files/ Files are fraught with peril
** Formats
*** DONE Next-generation of Image Formats for the Internet
:PROPERTIES:
:Source: https://youtu.be/RYJf7kelYQQ
:END:

The new JPEG XL format should be a universal format for pictures:
- Progressive
- Lossless/Lossy
- Animations
- High/Low Quality
- Legacy Friendly (lossless JPEG to JPEG XL conversion)
- Responsive by Design

** Fun
*** DONE Coding Stories: Me vs. The VNC Guy
:PROPERTIES:
:Source: https://martinrue.com/coding-stories-me-vs-vnc/
:Source+: https://news.ycombinator.com/item?id=22137250
:END:
** Games
*** DONE Exploring the Tech and Design of Noita https://www.youtube.com/watch?v=prXuyMCgbTc
*** DONE How Gamers Killed Ultima Online's Virtual Ecology | War Stories | Ars Technica
:PROPERTIES:
:Source: https://www.youtube.com/watch?v=KFNxJVTJleE
:END:

Ultima Online may have coined the term
https://en.wikipedia.org/wiki/Shard_(database_architecture)#Etymology

*** DONE How Thief's Stealth System Almost Didn't Work | War Stories | Ars Technica
:PROPERTIES:
:Source: https://www.youtube.com/watch?v=qzD9ldLoc3c
:END:
*** DONE How Stardock's Elemental: War of Magic Failed | War Stories | Ars Technica
:PROPERTIES:
:Source: https://youtu.be/_zD33Hrbo4Y
:END:
*** DONE How Serious Sam's Demo Saved the Game From Extinction | War Stories | Ars Technica
:PROPERTIES:
:Source: https://youtu.be/kXh1JJ_Jtew
:END:
*** DONE How Star Control II Was Almost TOO Realistic | War Stories | Ars Technica
:PROPERTIES:
:Source: https://youtu.be/ZgN4Mta86OE
:END:
*** DONE How Aliens versus Predator's Late Design Change Made It a Classic | War Stories | Ars Technica
:PROPERTIES:
:Source: https://youtu.be/YERrs7FYkxo
:END:
*** DONE How Total War: Rome II's Ambition Was Almost Its Undoing | War Stories | Ars Technica
:PROPERTIES:
:Source: https://youtu.be/b8-PRhz1UU4
:END:
*** DONE How Dead Space's Scariest Scene Almost Killed the Game | War Stories | Ars Technica
:PROPERTIES:
:Source: https://youtu.be/BQ3iqq49Ew8
:END:
*** DONE How Blade Runner Reinvented Adventure Games | War Stories | Ars Technica
:PROPERTIES:
:Source: https://youtu.be/Zkwpa5YPhx8
:END:
*** DONE How Command & Conquer: Tiberian Sun Solved Pathfinding | War Stories | Ars Technica
:PROPERTIES:
:Source: https://youtu.be/S-VAL7Epn3o
:END:

They solved their pathfinding needs (hundreds of friendly and enemy units,
breakable obstacles) by trying to not make units look "stupid". After layers and
layers, tweaks after tweaks, the units did something that didn't look stupid.

*** DONE How MechWarrior 5's Team Fixed Their Player-Killing Level Generator | War Stories | Ars Technica
:PROPERTIES:
:Source: https://youtu.be/fLjME439Z1w
:END:
*** DONE How Amnesia: The Dark Descent Tricked Players Into Scaring Themselves | War Stories | Ars Technica
:PROPERTIES:
:Source: https://youtu.be/sMl2la8-3-o
:END:
*** DONE How Slay the Spire’s Original Interface Almost Killed the Game | War Stories | Ars Technica
:PROPERTIES:
:Source: https://youtu.be/r_BPJzNPF6M
:END:
*** DONE How Localizing Return of the Obra Dinn Nearly Sunk the Game | War Stories | Ars Technica
:PROPERTIES:
:Source: https://youtu.be/OMi6xgdSbMA
:END:
*** DONE How This War of Mine Plays on Your Emotions | War Stories | Ars Technica
:PROPERTIES:
:Source: https://youtu.be/FNrCAWVKVQ0
:END:
*** TODO How Subnautica Succeeded Without Weapons | War Stories | Ars Technica
:PROPERTIES:
:Source: https://youtu.be/6S6bgQnlP1w
:END:
*** DONE How Dead Cells Cheated to Make the Game More Fun | War Stories | Ars Technica
:PROPERTIES:
:Source: https://youtu.be/Uv5NwboDDhk
:END:
*** DONE How Sid Meier Almost Made Civilization a Real-Time Strategy Game | War Stories | Ars Technica
:PROPERTIES:
:Source: https://youtu.be/XwUM33VJRbY
:END:
*** DONE How Mind Control Saved Oddworld: Abe's Oddysee | War Stories | Ars Technica
:PROPERTIES:
:Source: https://youtu.be/Y7f0YtzWBG4
:END:
*** DONE How Myst Almost Couldn't Run on CD-ROM | War Stories | Ars Technica
:PROPERTIES:
:Source: https://youtu.be/EWX5B6cD4_4
:END:
*** DONE How Crash Bandicoot Hacked The Original Playstation | War Stories | Ars Technica
:PROPERTIES:
:Source: https://www.youtube.com/watch?v=izxXGuVL21o
:END:

Crash Bandicoot (among others apparently) leveraged parts of the console, by for
example overwriting parts of the Playstation's standard library.
It was the first (?) 3d platform game.

*** DONE How Prince of Persia Defeated Apple II's Memory Limitations | War Stories | Ars Technica
:PROPERTIES:
:Source: https://youtu.be/sw0VfmXKq54
:END:
*** DONE How Homeworld Almost Got Lost in 3D Space | War Stories | Ars Technica
:PROPERTIES:
:Source: https://youtu.be/Q38556KTTR0
:END:
*** DONE How Netflix's "Extraction" Engineered a 12-Minute, One-Shot Action Scene | War Stories
:PROPERTIES:
:Source: https://youtu.be/TIghNcUSDBw
:END:
*** DONE How Alan Wake Was Rebuilt 3 Years Into Development | War Stories | Ars Technica
:PROPERTIES:
:Source: https://youtu.be/AoHkGDu0_Hw
:END:
*** DONE How "Robert The Bruce" Continued The Story of "Braveheart" Under Brutal Conditions
:PROPERTIES:
:Source: https://youtu.be/U-Q0Wwop9Oc
:END:
*** DONE How We Solved the Worst Minigame in Zelda's History
:PROPERTIES:
:Source: https://youtu.be/1hs451PfFzQ
:Source+: https://news.ycombinator.com/item?id=23442998
:END:

A clever use of probabilities and rng predictions to win at a notoriously hard
minigame in a Zelda game in a Zelda game.

*** DONE GAME ENGINE DEVELOPER Reacts to ROAD TO PS5 (Part 1)
:PROPERTIES:
:Source: https://youtu.be/erxUR9SI4F0
:END:
*** DONE GAME ENGINE DEVELOPER Reacts to ROAD TO PS5 (Part 2)
:PROPERTIES:
:Source: https://youtu.be/v1SRHrCa4XQ
:END:
*** DONE GAME ENGINE DEVELOPER Reacts to ROAD TO PS5 (Part 3)
:PROPERTIES:
:Source: https://youtu.be/ESQyAhooBLM
:END:
*** DONE The Road to PS5
:PROPERTIES:
:Source: https://youtu.be/ph8LyNIT9sg
:END:
*** DONE Dwarf Fortress Creator Explains its Complexity & Origins | Noclip Interview
:PROPERTIES:
:Source: https://youtu.be/VAhHkJQ3KgY
:END:
** Git
*** DONE A new hash algorithm for Git
:PROPERTIES:
:Source: https://lwn.net/SubscriberLink/811068/cfeb6a67b8dfbe47/
:Source+: https://news.ycombinator.com/item?id=22233295
:END:
** Go
*** DONE Security for Gophers
:PROPERTIES:
:Source: https://changelog.com/gotime/101
:END:
*** DONE Go at Cloudflare
:PROPERTIES:
:Source: https://changelog.com/gotime/113
:END:
*** DONE Don’t just check errors, handle them gracefully
:PROPERTIES:
:Source: https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully
:END:
** Hardware
*** Security
**** DONE https://media.ccc.de/v/36c3-10690-open_source_is_insufficient_to_solve_trust_problems_in_hardware

How to close the TOCTOU (or Place Of Check to Place Of Use) gap for hardware?

For software a signed hash lets the user check that the software shipped is the
same than the one he got.
However there is no hash function for hardware!

Implants:
- Add IC in package:
  - Add another chip in a package (connected with wirebonds)
  - Trough-Silicon Via
- IC Modification:
  - RTL Tampering
  - Hard IP Tampering
  - Mask Tampering

Are trusted factories a solution? Couriers/Customs/Distributors/... can still
insert implants!

What about better microscopes? The most useful ones are huge and very expensive.
Also you're only checking one chip!

Open source hardware could still help fix SPECTRE-like bugs through
peer-reviews.

Tradeoff between ease of verification and features/usability.

Possible solution: [[https://betrusted.io/][Betrusted]].

Why a device and not a chip? Because all the parts need to be trusty, including
the screen and keyboards for example.

Visually inspectable keyboard and screen!

The Silicon Problem: Thorough analysis requires removing layers of metal. This
is destructive.

A compromise is to use FPGAs. They are user configurable. Not all toolchains are
open source yet.

Pseudo-random mapping of design to the device. This hinders mask attacks. A true
backdoor would require a lot more silicon.

I/O MITM Mitigations:
- Design level: Bus encryption
- Implementation level: Permute data pin mappings on every device
- Hardware level: Careful X-ray inspection of devices

Closed Silicon Mitigation: [[https://symbiflow.github.io/prjxray-db/][prjxray-db]]. This is an open project that aims at
checking the consistency of the FPGA bitstream.

Ability to seal keys in the FPGA: Encrypted keys into encrypted bitstream in
ROM. AES-only boot bit blown.

**** DONE https://www.youtube.com/watch?v=ma3S7UTrwgo EPISODE 26 : Que vaut l’électronique d'un portefeuille de cryptomonnaie LEDGER NANO S ?
*** DONE https://www.youtube.com/watch?v=oIiqVrKDtLc EUV: Lasers, plasma, and the sci-fi tech that will make chips faster | Upscaled
*** DONE Aging Problems At 5nm And Below
:PROPERTIES:
:Source: https://semiengineering.com/aging-problems-at-5nm-and-below/
:Source+: https://news.ycombinator.com/item?id=23516959
:END:
** Historical
*** DONE https://www.youtube.com/watch?v=H62hZJVqs2o "Uptime 15,364 days - The Computers of Voyager" by Aaron Cummings
- Voyager 1 and 2 are still up and running
- Nuclear powered
- All systems are redundant
- Transmissions have tons of parity
- But not for very long (5-10 years)
** Humor
*** DONE http://www-users.cs.york.ac.uk/susan/joke/elephant.htm https://en.wikipedia.org/wiki/Elephant_in_Cairo
** JS
*** DONE Pointer Compression in V8
:PROPERTIES:
:Source: https://blog.infosectcbr.com.au/2020/02/pointer-compression-in-v8.html
:Source+: https://news.ycombinator.com/item?id=22220342
:END:
*** DONE JavaScript Function - What's your Function?
:PROPERTIES:
:Source: https://youtu.be/gigtS_5KOqo
:END:
** Lisp
*** DONE https://tech.grammarly.com/blog/running-lisp-in-production
*** DONE https://en.m.wikipedia.org/wiki/Greenspun%27s_tenth_rule Greenspun's tenth rule: Any sufficiently complicated C or Fortran program contains an ad-hoc, informally-specified, bug-ridden, slow implementation of half of Common Lisp.
*** DONE https://web.archive.org/web/20190913125400/https://weinholt.se/articles/r7rs-vs-r6rs/ R7RS versus R6RS
*** DONE Lisping at JPL
:PROPERTIES:
:Source: http://flownet.com/gat/jpl-lisp.html
:Source+: https://news.ycombinator.com/item?id=22087419
:END:
** Linux
*** BPF
**** DONE BPF: what's good, what's coming, and what's needed
:PROPERTIES:
:Source: https://lwn.net/Articles/787856/
:END:
*** Memory
**** https://lkml.org/lkml/2019/8/4/15 Let's talk about the elephant in the room - the Linux kernel's inability to gracefully handle low memory pressure
**** DONE https://utcc.utoronto.ca/~cks/space/blog/tech/WhyZeroMemoryPages Why your fresh new memory pages are zero-filled

The kernel clear the memory pages with 0 before handing them out again in order
to avoid data exfiltration.

*** Swap
**** https://utcc.utoronto.ca/~cks/space/blog/unix/NoSwapConsequence https://news.ycombinator.com/item?id=20641551
**** https://web.archive.org/web/20190914110631/https://chrisdown.name/2018/01/02/in-defence-of-swap.html In defence of swap: common misconceptions
*** https://twobithistory.org/2019/08/22/readline.html https://news.ycombinator.com/item?id=20772053 Things You Didn't Know About GNU Readline
** Math
*** DONE https://www.youtube.com/watch?v=Dp-mQ3HxgDE https://news.ycombinator.com/item?id=21200721
- We need to use software to help formalize and prove
- https://leanprover.github.io/about/
*** DONE https://www.youtube.com/watch?v=6JwEYamjXpA What Happens When Maths Goes Wrong? - with Matt Parker
*** DONE https://www.youtube.com/watch?v=1wAaI_6b9JE Four Dimensional Maths: Things to See and Hear in the Fourth Dimension - with Matt Parker
*** DONE Why are Textbook Proofs so Short?
:PROPERTIES:
:Source: https://www.redgreencode.com/why-are-textbook-proofs-so-short/
:END:

Textbooks proofs may be short in order for the reader to work the problem more
than if there was all the details.

Another obvious explanation is the limited space in textbooks.

*** DONE How to Read a Math Textbook
:PROPERTIES:
:Source: https://www.redgreencode.com/how-to-read-a-math-textbook/
:END:

Writing your own textbook might be the best way to really understand the one
you're reading.
Apart from the benefits of reformulation, you will write a textbook that fits
your ideas and mind.

Also reading line by line after the chapter introduction lets you see a proof
proposition and try to prove it yourself. That way you will be more prepared
when you get to the exercices. This idea is very close to my "invent/try
yourself before reading the answer".

Other people have answered this question by saying that you need to "make the
idea your own, making it fit in with your own perspective and experiences".
Writing your own textbook might be a good way to formalize this process.

** Misc
*** DONE http://boringtechnology.club/
*** DONE https://birdeatsbug.com/5-bugs-that-became-features
*** DONE https://scotthelme.co.uk/extended-validation-not-so-extended/ Extended Validation not so... extended? How I revoked $1,000,000 worth of EV certificates!
(incomplete EV certs)
*** DONE https://rachelbythebay.com/w/2019/07/21/reliability/
*** https://techxplore.com/news/2019-10-method-enables-person-walls-candidate.html Researchers' new method enables identifying a person through walls from candidate video footage, using only WiFi
*** DONE https://web.archive.org/web/20190913082559/https://www.newyorker.com/news/letter-from-silicon-valley/the-lonely-work-of-moderating-hacker-news The Lonely Work of Moderating Hacker News
*** https://hsivonen.fi/string-length/ UTF-8 chars "length"
*** DONE https://torrentfreak.com/the-scene-pirates-ripping-content-from-amazon-netflix-190707/
Pirate interview about ripping content from web sources
*** DONE https://vaibhavsagar.com/blog/2019/09/08/popcount/ popcount uses
*** DONE https://arp242.net/yaml-config.html YAML: probably not so great after all
*** DONE https://en.wikipedia.org/wiki/Ghoti Ghoti is a creative respelling of the word fish, used to illustrate irregularities in English spelling and pronunciation.
- Ghoti is meant to be pronounced the same way as fish
*** DONE https://berthub.eu/articles/posts/state-of-galileo-and-accident/
*** http://stevelosh.com/blog/2012/10/a-modern-space-cadet/
*** DONE https://www.youtube.com/watch?v=5YO7Vg1ByA8 La faute de l'orthographe | Arnaud Hoedt Jérôme Piron | TEDxRennes
*** DONE https://www.theatlantic.com/technology/archive/2017/04/the-tragedy-of-google-books/523320/ Torching the Modern-Day Library of Alexandria
*** DONE https://www.theverge.com/2019/12/3/20984028/playstation-supercomputer-ps3-umass-dartmouth-astrophysics-25th-anniversary
*** DONE https://plaintextproject.online/ https://news.ycombinator.com/item?id=21685660
*** DONE https://www.youtube.com/watch?v=783w2bgCDaI Sucre, le doux mensonge | ARTE
*** DONE https://media.ccc.de/v/36c3-10961-boeing_737max_automated_crashes  Boeing 737MAX: Automated Crashes | Underestimating the dangers of designing a protection system
*** DONE https://danluu.com/algorithms-interviews/ https://news.ycombinator.com/item?id=21961174
*** DONE https://media.ccc.de/v/36c3-10936-inside_the_fake_like_factories
*** DONE Body By Victoria
:PROPERTIES:
:Source: https://www.hackerfactor.com/blog/index.php?/archives/322-Body-By-Victoria.html
:Source+: https://news.ycombinator.com/item?id=1017726
:END:
*** DONE Flash-Mob Denial of Service
:PROPERTIES:
:Source: https://www.hackerfactor.com/blog/index.php?/archives/347-Flash-Mob-Denial-of-Service.html
:END:
*** DONE You want to reduce the carbon footprint of your food? Focus on what you eat, not whether your food is local
:PROPERTIES:
:Source: https://ourworldindata.org/food-choice-vs-eating-local
:END:
*** DONE Predictions of the Year 2000 from The Ladies Home Journal  of December 1900
:PROPERTIES:
:Source: https://web.archive.org/web/20010203004700/http://www.yorktownhistory.org/homepages/1900_predictions.htm
:Source+: https://news.ycombinator.com/item?id=1026018
:END:
*** DONE Incendies géants : enquête sur un nouveau fléau | ARTE
:PROPERTIES:
:Source: https://youtu.be/SpzQvgj-j20
:END:
*** DONE Désamorcer les explosifs | ARTE Regards
:PROPERTIES:
:Source: https://youtu.be/9r85PbO67Es
:END:
*** DONE The Ph.D. Octopus
:PROPERTIES:
:Source: https://www.uky.edu/~eushe2/Pajares/octopus.html
:Source+: https://news.ycombinator.com/item?id=13944474
:END:

A critique of the PhD from 1903!

*** DONE The Original Skunk Works – Nickolas Means | The Lead Developer UK 2017
:PROPERTIES:
:Source: https://youtu.be/pL3Yzjk5R4M
:END:
*** DONE Who Destroyed Three Mile Island? - Nickolas Means | #LeadDevLondon 2018
:PROPERTIES:
:Source: https://youtu.be/hMk6rF4Tzsg
:END:
*** DONE Eiffel's tower - Nickolas Means | #LeadDevAustin 2018
:PROPERTIES:
:Source: https://youtu.be/dLPi4lfk8is
:END:
*** DONE After 10 Years in Tech Isolation, I’m Now Outsider to Things I Once Had Mastered
:PROPERTIES:
:Source: https://forklog.media/after-10-years-in-tech-isolation-im-now-outsider-to-things-i-once-had-mastered/
:Source+: https://news.ycombinator.com/item?id=23475594
:END:
** MOOCs
*** Learning How to Learn
**** Week 1
***** Introduction to the Focused and Diffuse Modes

Metaphors are powerful tools for learning.

There is two fundamental modes of thinking:

- Focused (the most familiar)
- Diffuse (more relaxed mode of thinking)

Diffuse is best for learning new things.

Pin-Ball Machine analogy:

- Focused mode: The ball bounces directly to packed familiar thoughts
- Diffuse mode: The ball bounces randomly to looser/more spaced thoughts

You can't be in both mode at the same time.

***** Using the Focused and Diffuse Modes (Or, a Little Dali will do You)

Dali used to relax and let his mind go free, with keys in his hand, and
as he would fall asleep, the keys would fall and wake him up just in
time to recollect all his thoughts from his diffuse thinking before
using them in focused mode.

According to the legend, Edison would do the same (but with ball
bearings).

When learning something new, your mind needs to go back and forth
between both modes.

***** What is Learning?

The brain is the most complex object in the universe. There are a
million billion synapses in the brain. Synapses are less than a micron
in diameter. Learning seems to be correlated to the formation of new
synapses on dendrites. We will learn how to take advantage of our
subconscious mind and how sleep affects our learning.

***** A Procrastination Preview

Looking at something you would rather not do seems to activate a region
of your brain associated with pain (Insular Cortex). It will try to
avert your attention from it. Researchers have found that not long after
working on this unpleasant task this neural discomfort disappears.

The Pomodoro technique consists in setting a timer for 25 minutes, and
focusing for that duration with no interruptions. After that you can
give yourself a small reward (pleasant activity).

***** Practice Make Permanent

Science is harder because of abstraction. Practice is needed to improve
our understanding of abstract ideas. The neurons thought pattern becomes
real through practice. Changing our focus (or relaxing) allows our brain
to use his diffuse mode to work in the background and improve our
knowledge base.

***** Introduction to Memory

There is two types of memory:

- Long term memory
- Working memory

The working memory (Prefrontal cortex) holds only ~4 chunks of
information. Grouping chunks will make it seem larger. Repetition is
needed in order to keep this memory active.

Long term memory is distributed over a large areas of the brain.
Revisiting long term memories can help to ensure the information will be
there later on. It stores fundamental concepts. When learning something
you need to move the information from short to long term memory,
preferably with spaced repetition.

***** The importance of Sleep in Learning

Just by being awake, our brain produces toxic waste. When sleeping, your
brain cells shrink, and it allows the brain to flush this toxic waste.

When sleeping the brains also tidies ideas, erases less important parts,
and strengthen the things you are trying to learn. It also replays some
neural patterns related to things you are trying to learn. It's as if
deactivating the focused part of your brain helps the rest to find the
neural solution of what you are trying to learn.

***** Interview with Dr. Terrence Sejnowski

What do you do to learn something new:

#+BEGIN_QUOTE
Learning by doing. Not by reading a book, but just by going to the thick of
it (eg. doing experiments).
#+END_QUOTE

How do you keep your attention:

#+BEGIN_QUOTE
Active engagement.
#+END_QUOTE

How do you use diffuse mode:

#+BEGIN_QUOTE
Jogging helps with that. He takes notes to remember those ideas.
#+END_QUOTE

Do you multitask?:

#+BEGIN_QUOTE
Yes, essential. Doing two things at the same time is close to impossible.
Multitasking is about context switching. Some are better at that than others.
#+END_QUOTE

How do you apply your own knowledge of neuroscience to your own
learning:

#+BEGIN_QUOTE
You have all the same neurons than at birth. Except in the hippocampus,
where neurons can be created. Enriched environment creates much stronger
bounds in the hippocampus than in closed environments. Exercise also
increases the number of new neurons that are being born.
#+END_QUOTE

Any special techniques to learn or focus:

#+BEGIN_QUOTE
Enriched environments help.
#+END_QUOTE

Test taking?:

#+BEGIN_QUOTE
Do not hung up on questions where you stuck. The answer may come up later.
#+END_QUOTE

How do you keep creativity?:

#+BEGIN_QUOTE
Environment, colleagues, youth etc...
#+END_QUOTE

How to learn effectively?:

#+BEGIN_QUOTE
Being passionate, and persistent helps
#+END_QUOTE

**** Week 2
***** Introduction to Chunking

Chunks are compact packages of information that our mind can easily
access. Illusions of competence in learning is when you are using
ineffective methods of learning. Interleaving studies can be very
valuable.

***** What is a Chunk?

A chunk is a compact package of information. It helps memorizing new
concepts as it has context. Without context memorizing information would
be much harder. When focusing on something you also make connections
from the "four working chunks" to other parts of your brain. Stress
hinders that process. Chunks are pieces of information bound together
through meaning or use. A chunk is a network of neurons that are used to
fire together. Expertise comes by creating little by little more chunks.

***** How to Form a Chunk - Part 1

You first need to grasp bits and pieces. Then you gradually merge them
with larger chunks and so on. The best chunks are the one you don't even
have to think about to use. One easy mistake might be to focus too
much on how something works, and not on the connection between steps. In
science, it helps to start out with a work through example.

***** How to Form a Chunk - Part 2

Chunking can be different in different domains. You need to focus
exclusively. You also need to understand the basic concepts in question.
Even though you can understand a new concept at some point, you need to
review it to ensure you remember it. Testing yourself alone can greatly
help. Gaining context to see when to or not to use a chunk is very
important. Practice should help with this. Learning can be done "Bottom
up" which chunking, or "Top down" with a big picture process. Both are
vital. Glancing through the material first, can help you get a big
picture, and later on have the necessary context to use the chunks
properly.

***** Illusions of Competence

Recall is much more productive than just re-reading the material. You
just need to look away from the material and try to recall what you just
learned. It helps learning far more and at a much deeper level.

Concept mapping may not be that beneficial because trying to build
connections between chunks before understanding the basic chunks doesn't
work.

The only time re-reading helps in learning, is when you re-read the
material later on, just as an exercise of spaced repetition.

Glancing at a solution is a big illusion of competence in learning. You
need to have the competence in your memory.

Highlighting and underlining must be done carefully. Try to highlight
only main ideas when you think you have found them.

Having the book or the notes near you can give you an illusion of
competence, because it can be easier to look at the material than
recall.

Testing yourself is the best way to defeat this illusion of competence.
Mistakes are valuable when you self-test because they will help you make
repairs in your thinking flaws.

Recalling when you are outside can help strengthening your learning
because the memories of the learning material wouldn't be as deeply
connected to your surrounding as before.

***** What Motivates You?

Being interested in the material helps learning.

Acetylcholine neurons produce acetylcholine which is important for
focused learning.

Our motivation is controlled by dopamine. It is released when we receive
an unexpected reward. It is in the business of future rewards, and not
just the immediate reward. (Drugs artificially increase dopamine
activity.) Loss of dopamine leads to Anhedonia, the loss of dopamine.
Promising yourself to a treat after a study section taps into your
dopamine system.

Serotonin strongly affects your social life. It is also linked to risk
taking behavior.

Research show that emotions are intertwined with perception and attention
and interact with learning and memory.

You want to keep you amygdala happy to be an effective learner.

***** The Value of a Library of Chunks

Combining chunks is the root of lots of innovation. Chunking isn't all
to learning, but it is very important.

Transfer is when you find links between chunks between different
domains.

As you learn more about a subject, you will be able to create larger
chunks. Having a good library of chunks helps solve new problems.

Building chunks fills a part of the big picture.

Two ways of solving problems:

- Sequential: Small consecutive steps
- Holistic (global): Diffuse mode linking of focused thoughts

Law of Serendipity: Lady Luck favors the one who tries. After learning
the first concept, the second should be easier, and so on.

***** Overlearning, Choking, Einstellung, and Interleaving

Overlearning is continuing to study something you already master. It can
help for automaticity.

Research has show it can be a waste of valuable time. Focusing again and
again in the same learning session doesn't strengthen for the long term
memory.

Focusing on the more difficult material is called "Deliberate Practice".

"Einstellung" is when an initial thought with an idea you already have
in mind may hide a better solution. It means "mindset".

Mastering a new subject means not only creating basic chunks but also
when to use them. Interleaving, which consists in exercising with
problems that require different methods, helps for this.

**** Week 3
***** Tackling Procastination

Not all procrastination is bad. Learning is a bit by bit process. You
want to avoid "cramming" which doesn't build solid neural structures.
Willpower uses a lot of neural resources. The best is not having to use
it to fight procrastination. Procrastination can almost be thought as an
addiction.

***** Zombies Everywhere

Neuro-scientifically speaking, chunking is related to habit. Habit is an
energy saver. You don't have to think in a focused manner.

Habits have four parts:

- The cue: The trigger that launches you in zombie mode.
- The routine: The zombie mode.
- The reward: Habits develop and continue because it rewards us.
  Immediate little feeling pleasure. Finding ways to reward good habits
  is important.
- The belief: You believe in your habit.

***** Process vs Product

Learning can be painful at first. How we handle this is important.

To avoid procrastination, focus on the /Process/ not the /Product/. The
/Product/ is what creates the negative thoughts. This helps yourself to
back away from judging yourself.

***** Harnessing Your Zombies to Help You

The trick to overcoming habits is to change the reaction to the cue.
This is the only place where you need to apply willpower.

Four parts of habits:

1. The cue: Location - Time - How you feel - Reactions
2. The routine: The key to rewiring is to have a plan.
3. The reward: Give yourself a reward. Only when your brain expects a
   reward will it overcome previous cravings.
4. The belief: You need to believe that your new habit is worth it, that
   you can make it.

***** Juggling Life and Learning

- Weekly list of key tasks
- Daily "to do" list

Do the "to do" list before going to sleep because it helps the
subconscious grapple with the future tasks. Tasks lists free working
memory in favor of problem solving. Mixing other tasks makes everything
more enjoyable and keeps you from prolonged and unhealthy bouts of
sitting. Note what does work, and what doesn't. You put what you think
can fit in a day. Planning your quitting time is as important as
planning your working time.

Eat the frog first.

***** Diving Deeper into Memory

We have outstanding visual and spatial memory.

For something to move from working to long-term memory, you need two
things:

- The idea should be memorable
- The idea must be repeated

Flashcards are useful to remember things through recall.

***** What is Long Term Memory?

The hippocampus is essential in storing new information in long term
memory.

Re-consolidation:

- Memory is in Active State (AS) in Short Term Memory
- It moves to Long Term Memory through /Consolidation/
- It can be brought back to STM through /Reactivation/
- And so on

Old memories can change.

The brain contain cells other than the neurons called glial cells. The
most common of which are /astrocytes/. It may have an important role in
learning.

They:

- provide nutrients to neurons
- maintain extra cellular ion balance
- are involved with repair following injury

***** Creating Meaningful Groups and the Memory Palace Technique

Creating meaningful groups helps remembering things.

Associating numbers with memorable events or with familiar numerical
system. Memorable sentences (first letter of each word).

Memory Palace (Memory Loci), good for lists:

Place the objects to remember in a place you remember well.

The more you use those tools, the more creative you become.

**** Week 4
***** How to Become a Better Learner

- Exercise! New neurons are born everyday in the Hippocampus. New
  neurons will die if you don't use them. New experiences help rescue
  them. Exercise also helps new neurons survive.

- There are certain critical periods in the development of your brain.
  The critical period for first language acquisition extends up to
  puberty. Binocular depth perception matures during the first two years
  of life. Practice can repair as well as train the brain, but this
  takes much longer past the critical period. The prefrontal cortex is
  the last part of the cortex to mature.

***** Introduction to Renaissance Learning and Unlocking Your Potential

Learning doesn't progress logically. Some kind of knowledge collapse
seems to occur when your mind is restructuring its understanding to
build a more solid foundation.

***** Create a Lively Visual Metaphor or Analogy

Metaphor or analogies are great tools to remember things. The more
visual the better. It's helpful to pretend that you are the concept
you're trying to understand. Metaphors and analogies are useful for
getting people out of /Einstellung/ that is being blocked by thinking
about a problem in the wrong way.

***** No Need for Genius Envy (The Imposter Syndrome)

People learn by trying to make sense by the information they perceive.
They rarely learn anything complex simply by having someone else tell it
to them.

Even though you may be more intelligent, (eg having 9 things in working
memory) you will have less creativity, because of /Einstellung/. The
idea you are already holding in mind can block you from fresh thoughts.

Deliberate practice, especially on tougher material can lift your more
/Median/ brain in the range of the more gifted ones.

***** Change you Thoughts, Change your Life

/Myelin sheaths/, the fatty insulation that helps signals move more
quickly along a neuron, seems not to finish developing in some people
until their twenties.

When you use neural circuits however, it seems you help build it over
them. Practice appears to strengthen and reinforce connections between
different brain regions.

Anyone can change their own brain.

Approaching material with a goal of learning on your own, can give you a
unique path to /mastery/. Often it's only when you sneak off to other
books or videos that you begin to see what you learn through a single
teacher or book is a partial version of the 3D reality of the subject.

***** The Value of Teamwork

The right hemisphere helps us step back and put our work into big
picture perspective. The right hemisphere is vital in doing reality
checks. The left hemisphere supposedly interprets the world for us.

You should be careful about overly confident perspectives. Step back and
check!

"The first principle is that you must not fool yourself and you are the
easiest person to fool" - Richard Feynman

Study groups are helpful tools to keep yourself in check. But be careful
of small-talk.

***** A Test Checklist

- Did you make a serious effort to understand the text?
- Did you work with classmates on homework problems or at least check
  your solution with others?
- Did you attempt to outline every homework problem solution before
  working with classmates?
- Did you participate actively in homework group discussions
  contributing ideas and asking questions?
- Did you consult with the instructor or teaching assistants when you
  were having trouble with something?
- Did you understand all your homework problem solutions when they were
  handed in?
- Did you ask in class for explanations of homework problem solutions
  that weren't clear to you?
- If you had a study guide, did you carefully go through it before the
  test and convince yourself you could do everything on it?
- Did you attempt to outline lots of problem solutions quickly without
  spending time on the Algebra in calculations?
- Did you go over the study guide and problems with class mates and quiz
  one another?
- If there was a review session before the test, did you attend and ask
  questions about anything you weren't sure about?
- Did you get a reasonable night's sleep before the test? If your answer
  is no, your answers to all the preceding questions may not matter.

***** The /Hard Start - Jump to Easy/ Technique

For many people it's counter productive to start on easy problems and
end with hard problems. You may need to access diffuse mode, but it
would be hard to do if your last problem is the hardest one.

Take a quick look to the test. Then start with the hardest one. This
helps loading the hardest problem in mind. Then switching away to easy
problem will help diffuse mode do its magic. It's also a valuable
technique to avoid Einstellung because you see the problems from
different perspectives.

The hardest part is to pull yourself off a problem once you find
yourself stuck a minute or two.

***** Final Helpful Hints for Tests

When stressed one good workaround is to change your mindset about it.
"I'm not stressed, I'm excited! I'm determined to do my best!"

Breathe with your stomach in order to relax.

Cover up the answers to multiple choices questions, and try to recall.

Face your fears. Have a plan B for your career choice if it depends on
this test.

Step back during the test to ask yourself if your answer makes sense in
a big picture manner.

Check your answers back to front to give your brain a fresh perspective.

** Performance/Optimization
*** DONE https://www.facebook.com/notes/facebook-engineering/three-optimization-tips-for-c/10151361643253920/
** Personal Development
*** TODO https://guzey.com/productivity/ https://news.ycombinator.com/item?id=20737304 Every productivity thought I've ever had, as concisely as possible
*** TODO https://www.lesswrong.com/posts/P3zrurj5hHKFKDL3M/productivity-working-towards-a-summary-of-what-we-know
*** DONE https://nesslabs.com/time-anxiety Time anxiety: is it too late?
*** DONE https://lambdaisland.com/blog/2019-08-07-advice-to-younger-self
*** DONE https://www.scotthyoung.com/blog/2012/08/05/forgetting-is-good/ Why Forgetting Can Be Good
*** DONE https://sambleckley.com/writing/church-of-interruption.html
*** DONE https://sivers.org/zipit Announcing your plans makes you less motivated to accomplish them
*** DONE https://news.ycombinator.com/item?id=21062799 OSSU: A path to a free self-taught education in computer science (github.com)
*** DONE http://pranay.gp/how-to-learn-things-at-1000x-the-speed https://news.ycombinator.com/item?id=20855886
*** DONE https://superorganizers.substack.com/p/the-quest-to-be-good-at-everything https://news.ycombinator.com/item?id=21104552
*** DONE https://unstoppable.me/accomplish-big-things/  How to Accomplish Big Things, Even When You Feel Small
*** DONE https://alexvermeer.com/a-lack-of-time-is-a-lack-of-priorities/
*** DONE https://www.drmaciver.com/2019/05/how-to-do-hard-things/
*** DONE https://www.youtube.com/watch?v=5MgBikgcWnY
- Expertise requires 10000 hours of deliberate practice
- Good Enough Level requires 20 hours of deliberate practice
- Deconstruct the skill (see the drmaciver article for a related technique)
- Learn enough to self correct
- Remove the practice barriers (distractions)
- Commit to 20 hours of practice (obviously)
- The major barrier is emotional not intellectual
*** DONE https://news.ycombinator.com/item?id=21241906 https://www.calnewport.com/blog/2012/08/10/you-know-what-you-write-the-textbook-method-for-ultra-learning/ https://www.calnewport.com/blog/2012/08/16/experiments-with-the-textbook-method/
- Notes taking in a "Textbook" fashion is a known and good technique to
synthesize new knowledge/information
- (It's what I do with my notes following books, and to lesser extent
unorganized new knowledge about random stuff. And maybe I need to reinforce this
technique in the later case.).
*** DONE https://www.youtube.com/watch?v=LNHBMFCzznE After watching this, your brain will not be the same | Lara Boyd | TEDxVancouver
- Our brain still develops as adults!
*** DONE https://www.technologyreview.com/s/610395/if-youre-so-smart-why-arent-you-rich-turns-out-its-just-chance/ https://arxiv.org/abs/1802.07068 https://news.ycombinator.com/item?id=21312966
- Success is usually a function of luck
*** DONE https://www.youtube.com/watch?v=y2r9qtxtk-U Tout ce que je sais sur la voix et l'impro : parler à la caméra (et au micro)
*** DONE https://www.youtube.com/watch?v=KHuoMbdUm70 Le mythe du self-made man et des vacances productives (Outliers de Malcolm Gladwell)
- Success depends on luck by far
- Don't take holidays in order to work more than the others
*** DONE https://forge.medium.com/how-to-become-the-best-in-the-world-at-something-f1b658f93428 https://news.ycombinator.com/item?id=21346500
- Skill stacking will make you the best in the world if you are in the top
  (eg 10%) of multiple skills that few people have at the same time
- There is some criticism to do about the usefulness of these skills
- Also one common additional skill simply is the ability to sell yourself
*** DONE http://www.paulgraham.com/identity.html https://news.ycombinator.com/item?id=471660 https://youtu.be/SAd-XmT9wmw https://youtu.be/_p9etZzYJI8
- If you have no identity, you should have more intelligent, impartial
  discussions
*** DONE https://www.calnewport.com/blog/2012/10/26/mastering-linear-algebra-in-10-days-astounding-experiments-in-ultra-learning/
- 3 steps to learn better and faster:
  - Get a sense of what you need to learn: This consists both in finding
    resources and studying them (books or videos)
  - Practice: You cement and verify your acquired knowledge through practice
  - Insight: You perfect your knowledge by developing insights and intuitions.
    Use the Feynman technique for this.
- According to the author the last 2 steps are the most important!
*** DONE https://www.calnewport.com/blog/2008/11/14/how-to-ace-calculus-the-art-of-doing-well-in-technical-courses/

You need to develop *insights* if you want to have a deep and natural
understanding of the material.

#+begin_quote
If you want to do well in a technical class all you have to do is develop insight for every single concept covered in lecture.
#+end_quote

*** DONE https://www.calnewport.com/blog/2008/11/25/case-study-how-i-got-the-highest-grade-in-my-discrete-math-class/

Recreate the proofs by yourself with no helping notes in order to develop a deep
understanding and insights about them.

*** DONE https://www.calnewport.com/blog/2011/04/28/on-becoming-a-math-whiz-my-advice-to-a-new-mit-student/

When stuck on a problem, THINK HARD as long as you can. Don't give up
immediately, don't just stare at the problem.
Doing this every time will train your brain!

*** DONE https://www.youtube.com/watch?v=azhq2cckbD8 Tout ce que je sais sur les défis 30 jours
*** DONE https://changelog.com/brainscience/4

- SMART Objectives

*** DONE https://doist.com/blog/mental-health-and-remote-work/
*** DONE https://www.bbc.com/future/article/20180208-an-effortless-way-to-strengthen-your-memory
*** DONE https://www.bbc.com/worklife/article/20191202-how-time-scarcity-makes-us-focus-on-low-value-tasks
*** DONE https://sloanreview.mit.edu/article/learning-for-a-living/ https://news.ycombinator.com/item?id=21762640
*** DONE https://www.youtube.com/watch?v=1BBEuDK4BRk Tout ce que je sais sur la musculation
*** DONE https://www.youtube.com/watch?v=RjBMPmCwDWU Tout ce que je sais sur la lecture (lecture rapide, choix de livres, sytème de motivation, habitude)
*** DONE https://www.youtube.com/watch?v=rNx3JEME7dM Tout ce que je sais sur le sommeil polyphasique, les rêves lucides, les chronotypes, la fatigue...
*** DONE Tout ce que je sais sur l'autodiscipline, la procrastination et la volonté (Résolutions 2020)
:PROPERTIES:
:Source: https://youtu.be/2UcCSCgDa8I
:END:
*** DONE All the best engineering advice I stole from non-technical people
:PROPERTIES:
:Source: https://medium.com/@bellmar/all-the-best-engineering-advice-i-stole-from-non-technical-people-eb7f90ca2f5f
:Source+: https://news.ycombinator.com/item?id=20610839
:END:

1. “People like us make our money in the seams of things”
2. “Know what people are asking you to be an expert in”
3. “Before you can make things better, you have to stop making them worse”
4. “To go left, turn right”
5. “Thinking is also work”

*** DONE Manual Work is a Bug
:PROPERTIES:
:Source: https://queue.acm.org/detail.cfm?id=3197520
:Source+: https://news.ycombinator.com/item?id=20504471
:END:

1. Document the steps
2. Create automation equivalents
3. Create automation
4. Create self-service and autonomous systems

*** DONE How to learn to code (quickly and easily!)
:PROPERTIES:
:Source: https://youtu.be/R2pIutTspQA
:END:
*** DONE Why You Need To Start Using A Decision Journal
:PROPERTIES:
:Source: https://blog.trello.com/decision-journal
:Source+: https://news.ycombinator.com/item?id=22694014
:END:
*** DONE Learning How To Focus and Achieve My Goals
:PROPERTIES:
:Source: https://youtu.be/eLUDauIxudM
:END:

1. External vs Internal Goals: Finish Machine vs Staying Focused for the Whole
   Workday.
2. Reduce Dopamine Intake: By reducing other dopamine intakes you give yourself
   a chance to be more focused with lower dopamine rewarding tasks. He stopped
   listening to podcasts/music, checking his phone, and removed his chess.com
   account. He now takes short walks and does a little bit of piano to refocus.

*** DONE Are we too busy to enjoy life?
:PROPERTIES:
:Source: https://nesslabs.com/too-busy-to-enjoy-life
:Source+: https://news.ycombinator.com/item?id=23029486
:END:

We should be weary of always being busy. We may try to always be busy to avoid
thinking about our life-long projects. Also it may stop us from even trying to
do the things we have always wanted to do.

It's a way for us to make us think that we are productive.

*** DONE 68 Bits of Unsolicited Advice
:PROPERTIES:
:Source: https://kk.org/thetechnium/68-bits-of-unsolicited-advice/
:Source+: https://news.ycombinator.com/item?id=23015182
:END:
*** DONE Sell yourself, Sell Your Work ...
:PROPERTIES:
:Source: https://www.solipsys.co.uk/new/SellYourselfSellYourWork.html
:Source+: https://news.ycombinator.com/item?id=23250289
:END:

It is more profitable for you and the world if you "sell" your work. You should
train yourself to better write and present your work.

*** DONE 10 Reading habits that changed my life
:PROPERTIES:
:Source: https://medium.com/@manjotpahwa/10-reading-habits-that-changed-my-life-5c7673bc34bc
:Source+: https://archive.is/b8H4y
:Source+: https://news.ycombinator.com/item?id=23308931
:END:

- Take notes
- Share your notes
- Try to understand why the author wrote that book
- Get a high-level picture of the content before reading the book
- Stop or pause a book when you don't feel like continuing
- Speed read parts you know you won't retain well
- Don't force yourself to read the book linearly if it's meant to

*** DONE How to crash an airplane – Nickolas Means | The Lead Developer UK 2016
:PROPERTIES:
:Source: https://youtu.be/099cHWSbAL8
:END:

More than half of the United Airlines Flight 232 passengers survived thanks to
good team and communication skills.

*** DONE The building built on stilts - Nickolas Means | The Lead Developer New York 2017
:PROPERTIES:
:Source: https://youtu.be/NLXys9vgWiY
:END:

Citicorp Center had a major design flaw that could have meant a catastrophic
failure for the building with winds that would occur every 16 years on
average.

The structural engineer fixed this issue quickly and safely thanks to being:
- Transparent
- Solution-Oriented
- Blameless
- Kind

When innovating mistakes are inevitable and they always help improving
ourselves. We shouldn't stop innovating because of them.

*** DONE You can grow new brain cells. Here's how | Sandrine Thuret
:PROPERTIES:
:Source: https://youtu.be/B_tjKYvEziI
:END:

Adults can generate new neurons cells. It is called neurogenesis and it
happens in the Hippocampus. We estimate that 700 new neurons are produced each
day.

If blocked, some kinds of new memories can't be formed as well.

Animals with depression have been linked with lower neurogenesis. Also giving
antidepressants increased neurogenesis and decreased depression symptoms.
Moreover blocking the neurogenesis blocked the efficacy of the antidepressants.

Sport, learning, and sex will increase neurogenesis.
Old age, stress, and sleep deprivation will decrease neurogenesis.

Intermittent fasting, calorie restriction, some antioxydants and nutrients will
increase neurogenesis.
Alcohol, some vitamin defiencies, high sugar and soft diets (soft instead of
crunchy or chewy foods) will decrease neurogenesis.

Resveratol, which is found in red wines has been found to help the survival of
these new neurons. So choose red wine instead of other alcohols if you really
want to drink alcohol.

*** DONE Why fasting bolsters brain power: Mark Mattson at TEDxJohnsHopkinsUniversity
:PROPERTIES:
:Source: https://youtu.be/4UkZAwKoCP8
:END:
*** DONE Do the Real Thing
:PROPERTIES:
:Source: https://www.scotthyoung.com/blog/2020/05/04/do-the-real-thing/
:Source+: https://news.ycombinator.com/item?id=23582631
:END:

The best way to get better at something seems to be to do the real thing. When
you watch a video, or read an article on the best way to do X, you avoid doing
the real thing.
The real thing is probably better because it's often the right kind of
difficulty.

*** DONE How a Lazy Bitch like me learned to be Productive
:PROPERTIES:
:Source: https://www.madisontaskett.com/lazy-bastard-productivity/
:Source+: https://news.ycombinator.com/item?id=23314485
:END:

The author managed to change her life by installing a lot of new/good habits.
She only tried to install a few habits per month.
For the first month she did only very little and she didn't go over the
objectives she gave herself.

*** DONE Repetition and Learning
:PROPERTIES:
:Source: https://theeffortfuleducator.com/2020/06/08/repetition-and-learning/
:Source+: https://news.ycombinator.com/item?id=23462978
:END:

Effortful repetition (eg. recalling notes) is much more effective than simple
repetition (eg. reading notes).

*** DONE How Long Should You Spend on a Problem?
:PROPERTIES:
:Source: https://www.redgreencode.com/how-long-should-you-spend-on-a-problem/
:END:

Most of the time, the context will dictate how long you can work on a problem.
Eg. at work or in a class exam.

Working for too long on a problem makes you miss opportunities to learn new
things (which may actually help you on the original problem).

Principles:
- Work as long as you’re making progress
- Work after you get stuck
- Take breaks
- Collect data

How to Use Solutions:
- Read the solution gradually
- To understand the solution, you first have to understand the problem
- Calibrate your time-to-look
- Read the solution even if you solve the problem on your own

Resources:
- https://www.redgreencode.com/cpfaq-how-long-should-i-work-on-a-programming-problem-before-looking-at-the-answer/
- https://www.redgreencode.com/how-long-should-you-work-on-a-math-problem-before-looking-at-the-answer/

**** Best Practice: Work on problems for some time after I get stuck :drill:
SCHEDULED: <2020-12-03 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: show1cloze
:ID:       5456e8d3-5fff-4006-94f1-301394b07933
:DRILL_LAST_INTERVAL: 75.585
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 1.8
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2020-09-18 Fri 12:34]
:END:

best practice: Work on problems for some time after I get stuck

*** DONE Should You Solve Every Problem In a Math Textbook?
:PROPERTIES:
:Source: https://www.redgreencode.com/should-you-solve-every-problem-in-a-math-textbook/
:END:
*** DONE The Polymath Playbook
:PROPERTIES:
:Source: https://salman.io/posts/polymath-playbook/
:Source+: https://news.ycombinator.com/item?id=23796035
:END:

Interesting article on the benefits and opportunities of being a jack of all trades.

*** DONE The Art of Not Thinking
:PROPERTIES:
:Source: http://tiffanymatthe.com/not-thinking
:Source+: http://tiffanymatthe.com/not-thinking
:END:
*** DONE The Impostor's Advantage
:PROPERTIES:
:Source: https://www.zainrizvi.io/blog/the-impostors-advantage/
:END:
*** Remote Work
**** TODO https://doist.com/blog/remote-work-guides/
** Psychology
*** DONE The dark side of expertise
:PROPERTIES:
:Source: https://lwn.net/Articles/809556/
:Source+: https://news.ycombinator.com/item?id=22136405
:END:
*** DONE Méfiez-vous des conférences TED et TEDx ? | Thomas Durand | TEDxBeauvoisine
:PROPERTIES:
:Source: https://youtu.be/Y8fO3e8P0_A
:END:

Be careful of the Survivorship Bias. This advice applies to TED/TEDx
conferences as well.

*** DONE “Corn-Pone Opinions” by Mark Twain (1901)
:PROPERTIES:
:Source: https://web.archive.org/web/20191217193952/http://www.paulgraham.com/cornpone.html
:Source+: https://news.ycombinator.com/item?id=10822133
:END:
** Quantum Computing
*** DONE https://www.scottaaronson.com/blog/?p=4372 Quantum supremacy: the gloves are off
*** DONE https://www.scottaaronson.com/blog/?p=4317 Scott’s Supreme Quantum Supremacy FAQ!
*** DONE https://www.scottaaronson.com/blog/?p=3848 Quantum computing for policymakers and philosopher-novelists

Quantum Computing will be disruptive in certain domains.
But it won't break the sysmetric cryptographic primitives. For the assymetric
ones, new, quantum-computing safe primitives can be used by this time.

** Rust
*** DONE Why Discord is switching from Go to Rust
:PROPERTIES:
:Source: https://blog.discordapp.com/why-discord-is-switching-from-go-to-rust-a190bbca2b1f
:Source+: https://news.ycombinator.com/item?id=22238335
:END:
** Security
*** CTF
**** DONE https://www.robertxiao.ca/hacking/dsctf-2019-cpu-adventure-unknown-cpu-reversing/
*** Physical
**** DONE https://www.youtube.com/watch?v=4YYvBLAF4T8 The Search for the Perfect Door - Deviant Ollam
**** DONE https://www.youtube.com/watch?v=mj2iSdBw4-0 You’re Probably Not Red Teaming... And Usually I’m Not, Either [SANS ICS 2018]
**** DONE https://www.youtube.com/watch?v=oHf1vD5_b5I DEF CON 22 - Deviant Ollam & Howard Payne - Elevator Hacking - From the Pit to the Penthouse
*** Reverse Engineering (RE)
**** TODO https://safiire.github.io/blog/2017/08/19/solving-danish-defense-intelligence-puzzle/
*** Steganography
**** DONE https://web.archive.org/web/20190914104112/https://vimist.github.io/2019/01/30/Steganographic-Packets.html https://github.com/vimist/packet_differential_encoding

*** https://github.com/lfit/itpol Useful IT Policies
*** https://web.archive.org/web/20190914111513/https://techsolidarity.org/resources/basic_security.htm Basic security precautions for non-profits and journalists in the United States, early 2019.
*** https://web.archive.org/web/20190914111631/https://www.reddit.com/r/dataisbeautiful/comments/322lbk/time_required_to_bruteforce_crack_a_password/ Time required to brute-force crack a password depending on password entropy (strength) [OC]

*** https://www.forbes.com/sites/andygreenberg/2012/03/21/meet-the-hackers-who-sell-spies-the-tools-to-crack-your-pc-and-get-paid-six-figure-fees/ people that sell exploits
https://news.ycombinator.com/item?id=20651210
*** https://arstechnica.com/information-technology/2019/09/hackers-are-exploiting-a-platform-agnostic-flaw-to-track-mobile-phone-locations/
(Attacks work by sending commands directly to applications stored on SIM cards.)
*** DONE https://security.stackexchange.com/questions/214784/can-ads-on-a-page-read-my-password
Non iframe-sandboxed ads can read your passwords
*** DONE https://krebsonsecurity.com/2019/09/interview-with-the-guy-who-tried-to-frame-me-for-heroin-possession/
*** DONE https://en.wikipedia.org/wiki/The_Cuckoo%27s_Egg
*** DONE https://www.youtube.com/watch?v=DMNSvHswljM DEF CON 22 - Gene Bransfield - Weaponizing Your Pets: The War Kitteh and the Denial of Service Dog
*** DONE https://www.jefftk.com/p/shared-cache-is-going-away Shared Cache is Going Away https://news.ycombinator.com/item?id=21429621

When the browser cache was shared among domains, there was a possible privacy
leak, see example:
If you fetched a.com/css.css at some point when visiting a.com, next when
visiting b.com, if the site loads a.com/css.css, and the cache is hit, b.com
could infer that the user visited a.com previously.

*** DONE https://www.youtube.com/watch?v=vQtLms02PFM DEF CON 27 Conference - Bill Swearingen - HAKC THE POLICE

Radars can be defeated by cancelling the signals.

*** DONE https://www.youtube.com/watch?v=D5kg3jZ0Kcw DEF CON 27 Social Engineering Village - Jayson Street - I PWN thee I PWN thee not
*** DONE https://www.youtube.com/watch?v=vveLaA-z3-o hacker:HUNTER - Wannacry: The Marcus Hutchins Story - All 3 Chapters
*** DONE https://media.ccc.de/v/27c3-4087-en-console_hacking_2010 Console Hacking 2010 | PS3 Epic Fail
*** DONE https://blog.haschek.at/2015-that-not-so-awesome-time-the-police https://news.ycombinator.com/item?id=21992491 That (not so) awesome time the police raided my home | lesson learned: Don't click on links random people send you
*** DONE Does Your Domain Have a Registry Lock?
:PROPERTIES:
:Source: https://krebsonsecurity.com/2020/01/does-your-domain-have-a-registry-lock/
:Source+: https://news.ycombinator.com/item?id=22140399
:END:

"Registry Lock" are an even stronger protection againt domains stealing than
"Registrar Lock".

*** DONE Peut-on garder une URL secrète ? par Tim Carry
:PROPERTIES:
:Source: https://youtu.be/JyNq_-OJ3dA
:END:

The following techniques were used to try to find urls hidden in a podcast:
- Failed Social Engineering Attempt: "Hi, it's Gandi, your website will be down
  by the end of the week. The problem is that we have its configuration
  (url/domain)"
- Google Dorking: intext based on the previous winner page content
  - Can be blocked with a robots.txt with compliant search engines, but not
    specialised ones
- Source Code Search Engine: Lookup a logo hash tag with https://publicwww.com/
- Certificate Search Engine: Find the domain based on a regex and publishing
  date on https://censys.io/ (or https://crt.sh/) thanks to the Certificate
  Transparency Logs
- Try random combinations of words used in the podcast
- Analyze the video frames by frames, and clearly show differences between two
  frames in the hope of finding hidden clues
- Reverse Whois: Use a reverse whois engine (a shadier version of
  https://reversewhois.domaintools.com/) to find the domain based on the
  enterprise/person that registered the domain
- Find the domain by looking for domains that appeared on the same ip
  (eg. with http://www.ip-neighbors.com/)

*** DONE https://krebsonsecurity.com/2020/04/when-in-doubt-hang-up-look-up-call-back/
:PROPERTIES:
:Source: https://krebsonsecurity.com/2020/04/when-in-doubt-hang-up-look-up-call-back/
:Source+: https://news.ycombinator.com/item?id=22958477
:END:

The safest way to make sure a call from a bank is legitimate is to hang up the
call and call back the bank. You can now ask them if the call was legitimate.

ID spoofing is still a thing.

*** DONE Discret 11, the French TV encryption of the 80's
:PROPERTIES:
:Source: https://fabiensanglard.net/discret11/index.html
:Source+: https://news.ycombinator.com/item?id=23455033
:END:
*** DONE Facebook Helped the FBI Hack a Child Predator
:PROPERTIES:
:Source: https://www.vice.com/en_us/article/v7gd9b/facebook-helped-fbi-hack-child-predator-buster-hernandez
:Source+: https://news.ycombinator.com/item?id=23536416
:END:
*** DONE Why is This Website Port Scanning me?
:PROPERTIES:
:Source: https://nullsweep.com/why-is-this-website-port-scanning-me/
:Source+: https://news.ycombinator.com/item?id=23246170
:END:
*** DONE Stealing Secrets from Developers using Websockets
:PROPERTIES:
:Source: https://medium.com/@stestagg/stealing-secrets-from-developers-using-websockets-254f98d577a0
:Source+: https://news.ycombinator.com/item?id=23256458
:END:
*** DONE Ebay is port scanning visitors to their website - and they aren't the only ones
:PROPERTIES:
:Source: https://blog.nem.ec/2020/05/24/ebay-port-scanning/
:Source+: https://news.ycombinator.com/item?id=23436775
:END:
*** DONE If the NSA has been hacking everything, how has nobody seen them coming?
:PROPERTIES:
:Source: https://blog.thinkst.com/p/if-nsa-has-been-hacking-everything-how.html
:Source+: https://news.ycombinator.com/item?id=24139828
:END:
** Shell
*** https://web.archive.org/web/20190914105521/https://dwheeler.com/essays/filenames-in-shell.html
*** https://web.archive.org/web/20190914110211/http://mywiki.wooledge.org/BashFAQ/031 What is the difference between test, [ and [[ ?
*** https://web.archive.org/web/20190914110330/http://mywiki.wooledge.org/BashFAQ/105 Why doesn't set -e (or set -o errexit, or trap ERR) do what I expected?

** Social
*** DONE Trying to sneak in a sketchy .so over the weekend
:PROPERTIES:
:Source: https://rachelbythebay.com/w/2020/02/09/horizonta/
:Source+: https://news.ycombinator.com/item?id=22284463
:END:
*** DONE Don’t Fly During Ramadan
:PROPERTIES:
:Source: https://varnull.adityamukerjee.net/2013/08/22/dont-fly-during-ramadan/
:Source+: https://news.ycombinator.com/item?id=6258422
:Source+:  https://news.ycombinator.com/item?id=23625215
:END:

** Software Engineering
*** Functional
**** DONE https://www.youtube.com/watch?v=0if71HOyVjY GOTO 2018 • Functional Programming in 40 Minutes • Russ Olsen

Functionnal Programming is mainly about functions, that have no side effects and
ideally, produce the same output for the same input.
The second big principle is immutability of the datas.

*** DONE Global Variables Are Bad
:PROPERTIES:
:Source: http://wiki.c2.com/?GlobalVariablesAreBad
:END:
*** DONE Avoid rewriting a legacy system from scratch, by strangling it
:PROPERTIES:
:Source: https://understandlegacycode.com/blog/avoid-rewriting-a-legacy-system-from-scratch-by-strangling-it/
:Source+: https://news.ycombinator.com/item?id=22350664
:END:
*** DONE Levels of Seniority
:PROPERTIES:
:Source: https://roadmap.sh/guides/levels-of-seniority
:END:
*** DONE It's not what programming languages do, it's what they shepherd you to
:PROPERTIES:
:Source: https://nibblestew.blogspot.com/2020/03/its-not-what-programming-languages-do.html
:Source+: https://news.ycombinator.com/item?id=22696229
:END:

Programming languages "shepherd" you to solve problems in a certain way.
Example: "Perl shepherds you into using regexps"

*** DONE The Naked Truth About Writing a Programming Language
:PROPERTIES:
:Source: https://www.digitalmars.com/articles/b90.html
:Source+: https://news.ycombinator.com/item?id=23053773
:END:
*** DONE Rules of thumb for a 1x developer
:PROPERTIES:
:Source: https://muldoon.cloud/programming/2020/04/17/programming-rules-thumb.html
:Source+: https://news.ycombinator.com/item?id=23029489
:END:
*** DONE The Art of Code - Dylan Beattie
:PROPERTIES:
:Source: https://youtu.be/6avJHaC3C2U
:END:
*** DONE Is TDD Dead?
:PROPERTIES:
:Source: https://martinfowler.com/articles/is-tdd-dead/
:Source+: https://news.ycombinator.com/item?id=24281195
:END:

TDD should be used as a tool not as a perfect technique.
TDD can sometimes lead to bad design decisions.

** Supercomputing
*** DONE https://builtin.com/hardware/supercomputers

Supercomputers run simulation of nuclear explosions, fluid dynamics, weather
forecasting, atomic and molecular interactions.
Smartphones are as powerful as the best supercomputer 25 years ago.

*** DONE https://www.zdnet.com/article/the-rise-fall-and-rise-of-the-supercomputer-in-the-cloud-era/
** Sysadmin
*** https://web.archive.org/web/20190914105823/https://everythingsysadmin.com/dumb-things-to-check.html
*** https://web.archive.org/web/20190914110919/https://namingschemes.com/
*** https://web.archive.org/web/20190914110733/https://mnx.io/blog/a-proper-server-naming-scheme/
** Technology
*** DONE À propos du débat sur la 5G
:PROPERTIES:
:Source: https://www.bortzmeyer.org/5g.html
:END:
*** DONE Is Dark Mode Such A Good Idea?
:PROPERTIES:
:Source: https://kevq.uk/is-dark-mode-such-a-good-idea/
:Source+: https://news.ycombinator.com/item?id=23495052
:END:

Interesting analysis/debunking of the typical "dark mode is better" arguments.

HN comment on astigmatism https://news.ycombinator.com/item?id=23496286.

*** DONE Time to upgrade your monitor
:PROPERTIES:
:Source: https://tonsky.me/blog/monitors/
:Source+: https://news.ycombinator.com/item?id=23551983
:END:
** Terminals
*** https://web.archive.org/web/20190914110443/http://catern.com/posts/terminal_quirks.html Terminals Are Weird
** Tools
*** DONE https://sneak.berlin/20191011/stupid-unix-tricks/ https://news.ycombinator.com/item?id=21281025
** UNIX
*** DONE https://rcrowley.org/2010/01/06/things-unix-can-do-atomically.html
*** DONE fork() can fail: this is important
:PROPERTIES:
:Source: https://rachelbythebay.com/w/2014/08/19/fork/
:Source+: https://news.ycombinator.com/item?id=22462628
:END:
*** DONE Why is there a "V" in SIGSEGV Segmentation Fault?
:PROPERTIES:
:Source: https://blog.cloudflare.com/why-is-there-a-v-in-sigsegv-segmentation-fault/
:Source+: https://news.ycombinator.com/item?id=23562256
:END:

SIGSEGV is nowadays shown as "Segmentation Fault" but actually is an
abbreviation of "Segmentation Violation".

** UX
*** DONE The UX Infinity Gems 6 Ways to Create Great UX
:PROPERTIES:
:Source: https://youtu.be/aZZCZpc0AcY
:END:

Design:
- Words
- Declutter-ing-ness
- Clarity

Validation:
- Testing Designs
- Being Humble
- Delight Our Users

Words:
Users are not robots. Speak human to them.
Write with your heart and edit with your brain.
Consistency is key.

Declutter-ing-ness:
Show everything can be very appealing but it imposes a very high cognitive load on the user.
"Perfection is achieved when there is nothing left to take away." - Antoine de Saint-Exupéry
100 clear screens are always better than 1 cluttered one.
Whitespace is good.

Clarity:
Improving clarity should feel like an invisible hand guiding the user.
"Clarity refers to the focus on one particulare message or goal at a time, rather than attempting to
accomplish too much at once..." - Michael Hoffman
Illumination:
Build trust by using colors and patterns consistently.
The Golden Rule: Explain things like you would like them explained to you.
Use colors.

Testing Designs:
Leave room in your schedules/processes for errors.

Being Humble:
Ego kills design.
Ego stops learning.
Become mindful.
Be Honest.
Failure = Opportunity.

Delight Our Users:
Create a personality.
"Personality is the mysterious force that attracts us to certain people and repel us from others." -
Aarron Walter
Empathy is key.

** WebAssembly
*** DONE https://www.youtube.com/watch?v=CMB6AlE1QuI Rust, WebAssembly, and the future of Serverless by Steve Klabnik
*** DONE https://www.youtube.com/watch?v=fh9WXPu0hw8 Bringing WebAssembly outside the web with WASI by Lin Clark
